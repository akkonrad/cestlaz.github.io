<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>CS on C&#39;est la Z</title>
    <link>https://cestlaz.github.io/categories/cs/</link>
    <description>Recent content in CS on C&#39;est la Z</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 25 Nov 2019 05:45:55 -0400</lastBuildDate>
    
	<atom:link href="https://cestlaz.github.io/categories/cs/rss.xml" rel="self" type="application/rss" />
    
    
    <item>
      <title>Working with texts part 3 - word chains</title>
      <link>https://cestlaz.github.io/post/word-chains/</link>
      <pubDate>Mon, 25 Nov 2019 05:45:55 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/word-chains/</guid>
      <description>At this point, we&amp;#39;ve done a fair amount of playing with text so it&amp;#39;s time for a fun little project. We&amp;#39;re going to generate some text &amp;#34;in the style&amp;#34; of a source text. The technique we&amp;#39;re going to use is usually called a Markov Chain text generator. Basically a model where the next state or word is based entirely on the current state. I don&amp;#39;t dwell on the math under the hood but in case you&amp;#39;re interested, here are a few links: Wikipedia, Explained Visually, UC Davis Math.</description>
    </item>
    
    <item>
      <title>Working with texts part 2 - bag of words</title>
      <link>https://cestlaz.github.io/post/bag-of-words/</link>
      <pubDate>Wed, 20 Nov 2019 08:15:41 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/bag-of-words/</guid>
      <description>Following up on a previous post, we&amp;#39;re going to continue to talk about playing with text. This time, building and working with a bag of words from a text.  A bag of words is a simple language processing model where you just consider individual words in a text. What they are and how many times they occur. This is a pretty simple model but you can still have a good bit of fun with your students with it.</description>
    </item>
    
    <item>
      <title>Code Review Revisited or research - the teacher version</title>
      <link>https://cestlaz.github.io/post/code-review-2/</link>
      <pubDate>Tue, 16 Apr 2019 11:36:27 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/code-review-2/</guid>
      <description>Last semester I wrote about how I was introducing my students to code review. I thought it worked pretty well and was anxious to try it again.  Well, I did the lesson(s) again this past week and it looks like it&amp;#39;s a keeper. The setup was pretty much the same with some hiccups due to using a new platform. Last semester I used plain GitHub public repos. This time, I&amp;#39;ve been using GitHub classroom which I like very much but I forgot that I made this assignment use private repos which turned out to be a hassle.</description>
    </item>
    
    <item>
      <title>Solve A To Solve B</title>
      <link>https://cestlaz.github.io/post/solve-a-to-solve-b/</link>
      <pubDate>Fri, 18 Jan 2019 19:36:59 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/solve-a-to-solve-b/</guid>
      <description>So many programming assignments involve a direct solution. Write a program to do this or write a problem to solve that. It&amp;#39;s pretty typical. There&amp;#39;s nothing wrong with assignments like these. They allow students to practice what they&amp;#39;ve been learning and it gives them the opportunity to create some cool programs. All the same, I like it when there&amp;#39;s an indirect problem. You&amp;#39;re faced with a problem but in order to solve it you first have to solve some other problem  That&amp;#39;s why I liked day 10 from this year&amp;#39;s Advent of Code.</description>
    </item>
    
    <item>
      <title>An experiment with code review</title>
      <link>https://cestlaz.github.io/post/code-review/</link>
      <pubDate>Thu, 15 Nov 2018 17:09:58 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/code-review/</guid>
      <description>Sometimes professional practices don&amp;#39;t work well in the classroom and sometimes they do. One professional practice that does work well is code review - reading and reflecting on other peoples code.  I&amp;#39;ve had my students do code reviews in the past but this time I did things differently. Here&amp;#39;s what I did and here&amp;#39;s how it went  Two weeks ago my students completed a lab. The lab involved reading in a poorly indented C++ program and spit out a properly indented one.</description>
    </item>
    
    <item>
      <title>Who Played Spiderman - part 3</title>
      <link>https://cestlaz.github.io/post/who-played-spiderman-3/</link>
      <pubDate>Tue, 16 Oct 2018 17:25:33 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/who-played-spiderman-3/</guid>
      <description>Parts 1 and 2     Part 1    Part 2   Part 3   In the first two parts of this set of posts I wrote about the motivation and design a question answering system that can answer &amp;#34;who&amp;#34; queries like &amp;#34;who played Spiderman&amp;#34; or &amp;#34;who shot John Lennon?&amp;#34; It&amp;#39;s not perfect. When doing the Spiderman query, chances are the desired answer will be at or near the top of the list of most frequently appearing names but so will &amp;#34;Peter Parker.</description>
    </item>
    
    <item>
      <title>Who Played Spiderman part 2</title>
      <link>https://cestlaz.github.io/post/who-played-spiderman-2/</link>
      <pubDate>Sat, 13 Oct 2018 16:04:59 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/who-played-spiderman-2/</guid>
      <description>Parts 1 and 3     Part 1    Part 3   Part 2   When we left off last time we used a search engine API to gather a whole bunch of documents with the term &amp;#34;played Spiderman&amp;#34; or &amp;#34;who played Spiderman.&amp;#34; Now we have to process these documents to answer the question. Fortunately, the documents are basically just big strings of text.</description>
    </item>
    
    <item>
      <title>Who Played Spiderman part 1 or my Nifty Assignment (that was rejected)</title>
      <link>https://cestlaz.github.io/post/who-played-spiderman/</link>
      <pubDate>Thu, 11 Oct 2018 17:16:23 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/who-played-spiderman/</guid>
      <description>Parts 2 and 3     [[/post/who-played-spiderman-2/][Part 2]    Part 3    I wasn&amp;#39;t going to teach this lesson today. I was planning on starting a multi day project starting with an exercise in specification writing and design.  Beforehand though, we had to talk about classes. One of my students asked if probability and/or statistics were really important for CS. I started to cite a few examples and then decided to segue into this.</description>
    </item>
    
    <item>
      <title>Compile Each Concept</title>
      <link>https://cestlaz.github.io/post/compile-each-concept/</link>
      <pubDate>Tue, 09 Oct 2018 14:46:59 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/compile-each-concept/</guid>
      <description>We&amp;#39;ve all been there:   Student: Teacher, I need help Teacher (comes over) Student (shows screen listing three bazillion errors)   The student has just written pages of code and finally decided to try to run it only to end up with pages of errors.  Error messages can at times be hard to read for beginners but to see and truth be told, they frequently don&amp;#39;t even read them but over the years I&amp;#39;ve developed a practice that I&amp;#39;ve found helpful as a software developer and if students adopt the same practice it can save them a lot of time and effort.</description>
    </item>
    
  </channel>
</rss>
<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on C&#39;est la Z</title>
    <link>https://cestlaz.github.io/post/</link>
    <description>C&#39;est la Z (Posts)</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 14 Oct 2021 14:40:35 -0400</lastBuildDate>
    
    <atom:link href="https://cestlaz.github.io/post/rss.xml" rel="self" type="application/rss" />
    
    
    <item>
      <title>Feeling like an English teacher</title>
      <link>https://cestlaz.github.io/post/english-teacher/</link>
      <pubDate>Thu, 14 Oct 2021 14:40:35 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/english-teacher/</guid>
      <description>&lt;p&gt;
So I&amp;#39;m teaching my Ethics and CS class for the first time. I
originally designed the course but didn&amp;#39;t teach it the first time
around. That honor went to my friend, Master Teacher Topher
Mykolyk. He of course did an amazing job - impossible to
follow. Fortunately, this is a different cohort so they don&amp;#39;t know how
great Topher was for the course :-).&lt;/p&gt;
&lt;p&gt;
Even though I have the syllabus and Topher&amp;#39;s notes from last time
around, first time through is very week to week but I think I&amp;#39;m
starting to get my legs under me. &lt;/p&gt;
&lt;p&gt;
This course is very different from what I&amp;#39;ve taught in the past. It&amp;#39;s
also  different from the ethics courses I&amp;#39;ve seen currently out
there. Specifically, I wanted a programming component in the
course. Still, there&amp;#39;s a lot more open ended discussion and opinion
based stuff going on.&lt;/p&gt;
&lt;p&gt;
I mean, when you do a class on an algorithm like mergesort or a
construct like a loop, it is what it is. You can motivate it in
different ways and engage the class but there&amp;#39;s only one punch line
and it&amp;#39;s set in advance. Here things are a lot looser. Most issues
have two sides and even when most of the class is on one like when we
talked about predictive policing, we can still
effectively play devil&amp;#39;s advocate for the other side. &lt;/p&gt;
&lt;p&gt;
It can also lead to the class going sideways. Yesterday we were
talking about basic web privacy. Tracking, cookies and the like. In my
mind I had the lesson mapped out. First, our &amp;#34;weekly ethicacy&amp;#34; student
presentation and then a short breakout, discussion on the info we
share, and then curated questions and resources  that we&amp;#39;d use in a
sequence of breakout room and whole class discussions. The trouble is,
after the first short breakout, the student conversation went directly
to what I had intended for our async work over the course of the
week. Oh well, time to &lt;a href=&#34;https://cestlaz.github.io/post/audible/&#34;&gt;call an audible&lt;/a&gt;. It wasn&amp;#39;t really a big deal,
the conversation moved in a different direction but it was still very
much in the wheelhouse of the day&amp;#39;s topic.&lt;/p&gt;
&lt;p&gt;
Must be what an English class can be like.&lt;/p&gt;
&lt;p&gt;
It was fun.&lt;/p&gt;
&lt;p&gt;
Overall I think the course is doing well but I won&amp;#39;t know for sure
until afterwards when I can debrief with the students. After all,
they&amp;#39;re the ones that ultimately determine if the class is successful. &lt;/p&gt;
&lt;p&gt;
Over the next few weeks I&amp;#39;ll share some specifics about the class. The
programming stuff in particular. Can&amp;#39;t do that now because we&amp;#39;re in
the middle and I don&amp;#39;t want any members of the class who might be
reading this to see the reveal before it&amp;#39;s time.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs 79 Project</title>
      <link>https://cestlaz.github.io/post/using-emacs-79-project/</link>
      <pubDate>Mon, 11 Oct 2021 11:24:36 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/using-emacs-79-project/</guid>
      <description>&lt;p&gt;
One of the comments on my last video talked about the new project
management support Emacs includes in it&amp;#39;s latest version -
project.el. I remembered reading about it when it rolled around but
then forgot and never checked it out.&lt;/p&gt;
&lt;p&gt;
Up until recently when working in projects I used &lt;a href=&#34;https://github.com/bbatsov/projectile&#34;&gt;Projectile&lt;/a&gt;, a great
package by &lt;a href=&#34;https://twitter.com/bbatsov&#34;&gt;Bozhidar Batsov&lt;/a&gt;, also known as Bug. I only used it when
doing development work - that&amp;#39;s when I find myself jumping around
within a group of related files. At other times, I&amp;#39;m pretty much in
one file, do my thing, then move on.&lt;/p&gt;
&lt;p&gt;
I wrote a post and did a video on Projectile a while ago - you can
check it out [[&lt;a href=&#34;https://cestlaz.github.io/posts/using-emacs-33-projectile-jump/&#34;&gt;https://cestlaz.github.io/posts/using-emacs-33-projectile-jump/&lt;/a&gt;
][here]].&lt;/p&gt;
&lt;p&gt;
As I mentioned in the last video, I decided to rebuild my Emacs config
from scratch and I&amp;#39;m trying to be a bit more minimalist so with that
reminder I got, I figure it&amp;#39;s time to check out the now built in
project.el. If it&amp;#39;s as good as projectile, or even, good enough, it
could be a nice alternative.&lt;/p&gt;
&lt;p&gt;
At it&amp;#39;s core, project.el works similarly to projectile. There&amp;#39;s a
prefix key an then an action which is restricted to your project. For
projectile, it was &lt;code&gt;C-c p&lt;/code&gt; and the default for project.el is &lt;code&gt;C-x
p&lt;/code&gt;. No big difference there. Projectile seems to have many many more
options but in general, I find that all I need is&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Switch to a project - &lt;code&gt;C-x p p&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Find or open a file in a project - &lt;code&gt;C-x p f&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Switch buffers in a project - &lt;code&gt;C-x p b&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Delete all the project buffers - &lt;code&gt;C-x p k&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;List the project buffers&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Project.el has all except listing all the buffers. It also supports a
few other features that I think I&amp;#39;ll find useful:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;project dired - &lt;code&gt;C-x p d&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;project shell (or eshell) &lt;code&gt;C-x p s&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;project regex search and variants &lt;code&gt;C-x p g&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I&amp;#39;m not sure if projectile has these. It probably does and I could see
them being useful. I probable won&amp;#39;t use the regex searches much
because I&amp;#39;ll likely use other tools for those like consult-ripgrep.&lt;/p&gt;
&lt;p&gt;
So, it certainly seems like project.el has enough coverage for my
purposes. Another difference between the two projects is that
project.el only supports a couple of project definitions - things that
are supported by Emacs&amp;#39; VC system ad things supported by Emacs EDE
thing (which I&amp;#39;ve never really played with). I seem to recall
Projectile being more flexible.&lt;/p&gt;
&lt;p&gt;
In any event, project.el looks like it&amp;#39;s a nice simple alternative at
least for me. Check out the video for the runthrough:&lt;/p&gt;
&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/UagDCTjcifY&#34; title=&#34;YouTube video player&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;
</description>
    </item>
    
    <item>
      <title>My project grading workflow</title>
      <link>https://cestlaz.github.io/post/using-emacs-78-grading/</link>
      <pubDate>Sun, 10 Oct 2021 10:44:41 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/using-emacs-78-grading/</guid>
      <description>&lt;p&gt;
Grading sucks. Even for a well crafted assignment it takes time and
rarely does it give you the same insights into your students as you
can get from just observing them and working with them, at least when
the environment supports you doing so. &lt;/p&gt;
&lt;p&gt;
This leads lots of teachers to go to auto graders. I can&amp;#39;t bring
myself going along with that. While assignments are imperfect and
tedious to grade, they do provide some insight to your students and
that&amp;#39;s an important part about being a teacher.&lt;/p&gt;
&lt;p&gt;
So, I always keep my eye out for ways to improve my project gradiing
workflow.&lt;/p&gt;
&lt;p&gt;
In the video below, I step through my process. It&amp;#39;s mostly Emacs but I
also use GitHub classroom and the terminal along the way.&lt;/p&gt;
&lt;p&gt;
If you&amp;#39;re here as for the Emacs, I&amp;#39;d any thoughts on alternatives or
improvements.&lt;/p&gt;
&lt;p&gt;
If you&amp;#39;re here as a teacher, I&amp;#39;d love to hear what your flow is like
and what tools you use.&lt;/p&gt;
&lt;p&gt;
Enjoy&lt;/p&gt;
&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/7HLVcQi8GGk&#34; title=&#34;YouTube video player&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;
</description>
    </item>
    
    <item>
      <title>Teaching non required topics - the command line</title>
      <link>https://cestlaz.github.io/post/non-required-topics/</link>
      <pubDate>Fri, 08 Oct 2021 08:56:11 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/non-required-topics/</guid>
      <description>&lt;p&gt;
The other day I saw Allen Holub lamenting on how students don&amp;#39;t learn
the command line.&lt;/p&gt;
&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;All my students this semester have gone through at least a year of programming classes, and some of them do not know how to do even basic stuff on the command-line. This strikes me as a huge flaw in the curriculum. Maybe the first CS class should be How Devs Use Computers 101.&lt;/p&gt;&amp;mdash; Allen Holub (@allenholub) &lt;a href=&#34;https://twitter.com/allenholub/status/1444393138492116992?ref_src=twsrc%5Etfw&#34;&gt;October 2, 2021&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;p&gt;
This reminded  me of the recent article and
discussion on how students &lt;a href=&#34;https://www.pcgamer.com/students-dont-know-what-files-and-folders-are-professors-say/&#34;&gt;don&amp;#39;t know what files and folders are&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;
Neither of these are surprising. Back in the day, computer science
classes were populated with self selecting stereotypes and in order to
get anything done you had to be familiar with your tools.&lt;/p&gt;
&lt;p&gt;
I wrote about this &lt;a href=&#34;https://cestlaz.github.io/posts/2015-01-15-kids-know-nuttin/&#34;&gt;years ago&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;
Nowadays, CS is trying to be more open and inviting and with more
modern tools you no longer need to know about files
and folders let alone a Unix command line.  Back in the day, even if
you used a program like Microsoft Word you&amp;#39;d have some idea of a file
folder structure but now with the cloud and tools like Google Docs you
just search for your documents.&lt;/p&gt;
&lt;p&gt;
The issue is that many CS teachers want students to know the command
line but it&amp;#39;s not part of the formal curriculum. What&amp;#39;s more, the
value of command line expertise is debatable and pretty hard to assess.&lt;/p&gt;
&lt;p&gt;
Personally, I&amp;#39;m a big command line wonk. I think you gain tremendous
power and flexibility if you use it but I also recognize that there
are many career tech professionals, particularly these days that will
never use it and arguably won&amp;#39;t really benefit from it. They live in
their IDE that supports their language. It integrates with their
build, test, and debugging tools and their company&amp;#39;s commuication
platform is also right there on the side. Now, many people in tech
could still benefit from command line expertise but try convincing a
first or second year undergrad where they not only don&amp;#39;t see added
value but also see that a large chunk of the text world also doesn&amp;#39;t
see the value.&lt;/p&gt;
&lt;p&gt;
So, if you do believe that the command line is important and want
students to learn it, how do you do it?&lt;/p&gt;
&lt;p&gt;
There are plenty of tutorials, videos and other learning material
including clever games like &lt;a href=&#34;https://gitlab.com/slackermedia/bashcrawl&#34;&gt;bashcrawl&lt;/a&gt; and I guess you could &amp;#34;force&amp;#34;
students to use the command line while in the classroom but nothing&amp;#39;s
going to stop them from using the file browser tool or an installed
IDE. Even if you severely limit the tools in lab machines, you have no
control over what they use at home and while the command line might be
more powerful, it&amp;#39;s not nearly as learner friendly.&lt;/p&gt;
&lt;p&gt;
Then there&amp;#39;s assessment. How do you do that? You could give
memorization type questions on exams but that&amp;#39;s a really bad
idea. Since the command line is process not product, this is a tough
nut to crack.&lt;/p&gt;
&lt;p&gt;
To be honest, I&amp;#39;ve struggled with this year after year and don&amp;#39;t have
a great solution. I try to encourage the command line and model how it
can be useful as much as I can but I know I&amp;#39;m only reaching a minority
of my students. In the end, I don&amp;#39;t really care if any of them
ultimately become hardcore CLI users but I really do want all of them
to gain enough exposure so that they can make an informed decision as
to its value and then make up their own minds.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Coding For Problem Solving</title>
      <link>https://cestlaz.github.io/post/coding-for-problem-solving/</link>
      <pubDate>Fri, 01 Oct 2021 10:17:01 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/coding-for-problem-solving/</guid>
      <description>&lt;p&gt;
Like most CS educators I&amp;#39;m a regular reader of Alfred Thompson&amp;#39;s
blog. Alfred&amp;#39;s &lt;a href=&#34;https://blog.acthompson.net/2021/09/define-learn-to-code.html&#34;&gt;latest post&lt;/a&gt; is spot on but there was a line in it and a
particular Twitter response that reminded me that we so often forget
a big reason why people learn to code.&lt;/p&gt;
&lt;p&gt;
Alfred mentions, as did that Tweet about coding to solve
problems. What problem are you trying to solve. This is the mainstream
push - programming helps you solve problems. I&amp;#39;ve noticed a doubling
down on this with all the efforts (including mine) to integrate CS
into other subjects. While where and how much CS should be
integrated vs standalone is a topic for another day, integrating CS
into other fields is very much a &amp;#34;help solve the problems of that
field&amp;#34; approach.&lt;/p&gt;
&lt;p&gt;
Nothing wrong with all of this. It&amp;#39;s all good stuff but there&amp;#39;s
another side to the coin. It&amp;#39;s a side that I sometimes forget about
from in the trenches. In fact, a few years ago I was rambling on and
on about programming as problem solving and my friend and fellow CS
teacher Peter Brooks reminded me - the question doesn&amp;#39;t have to be
&amp;#34;what problem do you want to solve?&amp;#34; The question can be &amp;#34;what do you
want to create?&amp;#34;&lt;/p&gt;
&lt;p&gt;
Sometimes we forget that programming can be an amazingly creative
endeavor. You can use it to make something brand new and there doesn&amp;#39;t
necessarily have to be a problem to be solved.&lt;/p&gt;
&lt;p&gt;
Fred Brooks puts it nicely at the start of his classic work &amp;#34;The
Mythical Man Month:&amp;#34;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The programmer, like the poet, works only slightly removed from pure
thought-stuff. He builds his castles in the air, from air, creating by
exertion of the imagination. Few media of creation are so flexible, so
easy to polish and rework, so readily capable of realizing grand
conceptual structures….&lt;/p&gt;
&lt;p&gt;
– Fred Brooks, The Mythical Man Month &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
I also saw elsewhere, maybe by Fred Brooks, maybe someone else talking
of a programmer being like a painter but whereas a painter has oils,
brushes, and pigments to create on a canvas, the programmer has
programming languages to create on the computer. &lt;/p&gt;
&lt;p&gt;
Maybe it&amp;#39;s the push for &amp;#34;practical&amp;#34; education, maybe the integration,
maybe the focus on testing. I have no idea but it seems that we
frequently forget about the creative side of the equation.&lt;/p&gt;
&lt;p&gt;
I mean, yes, the APCS-P specification does mention creativity in the
interestingly enough named &amp;#34;Create Task:&amp;#34;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Programming is a collaborative and creative process that brings ideas
to life through the development of software. In the Create performance
task, you will design and implement a program that might solve a
problem, enable innovation, explore personal interests, or express
creativity.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
but it&amp;#39;s after &amp;#34;solve a problem&amp;#34; and &amp;#34;enable innovation.&amp;#34;&lt;/p&gt;
&lt;p&gt;
That creative side though shouldn&amp;#39;t be forgotten. Some of my students
most memorable projects didn&amp;#39;t solve a problem. I remember the
&amp;#34;Cheerleader Simulator&amp;#34; in NetLogo. No problem solved there but it was
a fun project. Another was Tamika&amp;#39;s stupid mouse dexterity game. A
simple game of her own design. I say stupid not becuase it was really
stupid - it was great. Rather, I say stupid becuase that game caused
me to waste so much time that end of year when I should have been
grading!!!!!!!!!&lt;/p&gt;
&lt;p&gt;
As we seek to engage a wider audience in CS we shouldn&amp;#39;t merely focus
on the problem solving nor the making money. The creative side is
really important as well.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Turning a good class into a bad lecture</title>
      <link>https://cestlaz.github.io/post/inperson-update/</link>
      <pubDate>Tue, 28 Sep 2021 08:11:34 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/inperson-update/</guid>
      <description>&lt;p&gt;
I&amp;#39;ve been teaching in person for about a month now so I thought I&amp;#39;d
give a quick update on how it&amp;#39;s going. I&amp;#39;ve written before about my
feelings on how Hunter started the semester (TL;DR - I was very
displeased) but that&amp;#39;s not the point of this post. As of today, I
believe every student has been required to be stabbed at least once
and on October 11, all students must be fully vaccinated to be on
campus.&lt;/p&gt;
&lt;p&gt;
So, off to the report. Going in person sounds great but now that I&amp;#39;m
doing it, I&amp;#39;m having second thoughts. Let&amp;#39;s leave safety precausions
out of it, I&amp;#39;m having second thoughts just in terms of how the current
situation and related restrictions have affected my teaching.&lt;/p&gt;
&lt;p&gt;
Here&amp;#39;s the low down. Students are supposed to wear masks at all
times and I wear mine as well. We&amp;#39;re supposed to socially distance but
that&amp;#39;s not possible given class and classroom sizes. Students are also
supposed to keep the same seed all the time, ostensibly for contact
tracing should anyone test positive.&lt;/p&gt;
&lt;p&gt;
To start, day one in person was important - I still haven&amp;#39;t met my
students from last year in person and I&amp;#39;d really like to. This years
students, at least I&amp;#39;ve seen all their foreheads.&lt;/p&gt;
&lt;p&gt;
That&amp;#39;s actually an issue. At least for me, the masks make it MUCH
harder to know my students. Can&amp;#39;t get to know a face when you can&amp;#39;t
see two thirds of it and names are going to be even harder for me.&lt;/p&gt;
&lt;p&gt;
Online, at least for those who put on cameras, we could at least see
each others full faces and expressions. Zoom doesn&amp;#39;t carry the same
nuance as in person but neither does a masked face.&lt;/p&gt;
&lt;p&gt;
The masks have another negative. You can&amp;#39;t hear anyone. I do my best
to actively project but students rarely do. This leads to me having
students repeat themselves multiple times and I also have to adopt a
conference speaker approach of repeating and projecting what the
student said so everyone can hear. This absolutely kills interactive
discussion and even question answer chains. It really pushes a lesson
more towards a lecture which, well, sucks.&lt;/p&gt;
&lt;p&gt;
The social distancing and keeping seats also negatively impact the
environment. I can&amp;#39;t get in with my students like I usually do. Even
when in lecture mode, I&amp;#39;ll move to different locations of the room for
a variety of reasons - that&amp;#39;s pretty much out. I also can&amp;#39;t just get
in close to support students. Likewise, group work can&amp;#39;t happen in the
same way. They can kind of sort of work with their direct neighbor but
I can&amp;#39;t have them work with each other as I&amp;#39;d do under normal
circumstances. &lt;/p&gt;
&lt;p&gt;
Don&amp;#39;t get me wrong. I won&amp;#39;t compromise safety for convenience but the
safety protocols do a good job in turning a good class into a bad
lecture. &lt;/p&gt;
&lt;p&gt;
Online is also lousy in many ways but as long as the students are
willing you can all see each others faces and you can do all sorts of
interesting groupings and group work. I think my code review lesson
worked pretty much as well and maybe even better online last year than
it did in person the year before but I&amp;#39;m really at a loss on how to do
it as effectively in person in a few weeks with the safety
precautions.&lt;/p&gt;
&lt;p&gt;
Ideally, I&amp;#39;d like the freedom to mix and match. We were in person week
one, but let me decide when we&amp;#39;ll be in person and when we&amp;#39;ll be
remote. Let me use the best platform for any given lesson. This would
be a bit of a drag on the students depending on how their instructors
scheduled things but if students could use the rooms that they&amp;#39;d be in
person for as locations to work remote from it wouldn&amp;#39;t be too bad.&lt;/p&gt;
&lt;p&gt;
As usual, the ideal would be to trust the teacher and let them do
what&amp;#39;s best for their students but as we all know, that&amp;#39;s never the
way. Regardless, the interesting thing to me is that while I was
clamoring for a safe in person return, the truth is, given sensible
safety precautions, in person might just not be the best way to go. At
least not all the time.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How The Hash Is Made</title>
      <link>https://cestlaz.github.io/post/how-the-hash-is-made/</link>
      <pubDate>Thu, 16 Sep 2021 17:08:19 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/how-the-hash-is-made/</guid>
      <description>&lt;p&gt;
Following up on my &lt;a href=&#34;https://cestlaz.github.io/post/what-they-used-to-know/&#34;&gt;last post&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;
Soon after I read that tweet, I read Julia&amp;#39;s post on &lt;a href=&#34;https://jvns.ca/blog/2021/09/10/hashmaps-make-things-fast/&#34;&gt;hash tables&lt;/a&gt;. This
got me thinking more about what is and isn&amp;#39;t taught in school. Hash
tables were always taught in CS programs but back in the day you might
not have used them much after your data structures or algorithms
classes. Nowadays you&amp;#39;re much more likely to use them as they&amp;#39;re built
in to so many platforms.&lt;/p&gt;
&lt;p&gt;
Hash tables and related structures are great - I use them all the time
but they can also become a go to without thinking it through. This
actually came up in conversation with the same my high level SE friend
at that big bank from the last post. He also noticed that many interviewees would always
go right to the hash table even when there were red flags in the
question to warn away fro them.&lt;/p&gt;
&lt;p&gt;
For a hash table to get you that nice fast expected constant time
performance, it has to be sparse - few collisions. If you implement a
closed hash table (all the data is in a single array) and there&amp;#39;s not
a lot of spare space, it will fill up and all of a sudden that O(1)
insertion and retrieval time will go linear. I can&amp;#39;t say for certain
but I&amp;#39;m guessing the vast majority of Python programmers who use hash
tables (dictionaries) all the time don&amp;#39;t really know this or if they
do never think about it.&lt;/p&gt;
&lt;p&gt;
Is this a byproduct of using the built in implementations in college
combined with self taught programmers never seeing this at all? Maybe
but this was probably a deficiency even in my day.&lt;/p&gt;
&lt;p&gt;
This also came up when I accidentally interviewed for a position at
Google. There was a question about storing and accessing a bunch of
data. I don&amp;#39;t remember the question but there was a key line - &amp;#34;you
have unlimited storage&amp;#34; which is the trigger phrase for &amp;#34;use a hash
table.&amp;#34; I got a kick out of it but felt this was a you know it or you
don&amp;#39;t. I think I mentioned it to the interviewer.&lt;/p&gt;
&lt;p&gt;
This also brought to mind another example. Not mine - I read this in
John Bentley&amp;#39;s terrific book &lt;a href=&#34;https://tfetimes.com/wp-content/uploads/2015/04/ProgrammingPearls2nd.pdf&#34;&gt;&amp;#34;Programming Pearls.&amp;#34;&lt;/a&gt; The gist was that a
room full of very smart people were implementing a binary search. The
idea is that you have an array of data that is sorted and instead of
looking through every item one at a time, you calculate the middle of
the array, look there and then, if you haven&amp;#39;t found the item, you
throw away half the data and repeat the process with the remaining
half.&lt;/p&gt;
&lt;p&gt;
Every now and then, the implementations had a problem and nobody could
figure out why. As it turns out, in calculating the midpoint, they&amp;#39;d
add the lower value and the higher value and then divide the sum by
two.&lt;/p&gt;
&lt;p&gt;
Sounds reasonable.&lt;/p&gt;
&lt;p&gt;
The problem was that when low and high were at the upper end of the
data set the addition would go past the largest integer wrapping
around and causing wonky results.&lt;/p&gt;
&lt;p&gt;
Pretty subtle error but at least you&amp;#39;ve got a shot at figuring it out
if you understand integer sizes and how they work on your machine. &lt;/p&gt;
&lt;p&gt;
Having some solid low level knowledge won&amp;#39;t prevent this bug from
cropping up but it will give you a fighting chance at fixing it if it
does. &lt;/p&gt;
&lt;p&gt;
This particular problem probably won&amp;#39;t come up these days as integers
are MUCH larger than back in the day but I think it illustrates the
point.&lt;/p&gt;
&lt;p&gt;
Anyway, just more food for thought on how CS Education has changed
over the years, what we leave in, and what we leave out.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>What They Used To Know</title>
      <link>https://cestlaz.github.io/post/what-they-used-to-know/</link>
      <pubDate>Thu, 16 Sep 2021 10:42:05 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/what-they-used-to-know/</guid>
      <description>&lt;p&gt;
I saw this tweet by Julia Evans the other day.&lt;/p&gt;

&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;if you&amp;#39;ve
been working in computing for &amp;gt; 15 years -- are there fundamentals
that you learned &amp;quot;on the job&amp;quot; 15 years ago that you think
most people aren&amp;#39;t learning on the job today?&lt;br&gt;&lt;br&gt;(I&amp;#39;m
thinking about how for example nobody has ever paid me to write C
code)&lt;/p&gt;&amp;mdash; 🔎Julia Evans🔍 (@b0rk) &lt;a
href=&#34;https://twitter.com/b0rk/status/1435965181847343108?ref_src=twsrc%5Etfw&#34;&gt;September
9, 2021&lt;/a&gt;&lt;/blockquote&gt; &lt;script async
src=&#34;https://platform.twitter.com/widgets.js&#34;
charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;p&gt;
I&amp;#39;ve never met Julia but have been following her on Twitter and
reading her &lt;a href=&#34;https://jvns.ca/&#34;&gt;blog&lt;/a&gt; for some time now.&lt;/p&gt;
&lt;p&gt;
The tweet got me thinking. Not so much about learning on the job but
rather on how colleges prepare their students. Recent boutique majors
and concentrations notwithstanding, a degree in CS seems to have
largely stayed the same from the early/mid 1980s when I got my BA to
today. There are variations but it was and still is largely&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;programming–&amp;gt;data structures–&amp;gt;algorithms&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;some systems or OS stuff&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;some theory &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;math: calc 1, calc 2, discrete, linear, maybe stats&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;another requirement or two which might differ based on institution&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;electives&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Sure, programs have changed over the years. At one point, computer
graphics was hot. Now, not so much. Courses like compilers also used
to be required more frequently but overall things look much the
same. That said, there have been some major changes - at least from my
perspective and those changes really affected how students were
prepared for professional careers. Now of course this is only my
perspective so who knows how accurate it is. Regardless, it should be
good food for thought.&lt;/p&gt;
&lt;p&gt;
I got my BA back in the mid 80s. That was the start of the PC
generation. Colleges were starting to get computer labs full of
IBM-PCs and then  later clones. MS-DOS ruled the day. &lt;/p&gt;
&lt;p&gt;
What did that mean?&lt;/p&gt;
&lt;p&gt;
It meant that while a few years prior, students used a time sharing
system for their programming classes now they were using  an
IBM-PC with Turbo Pascal. I can&amp;#39;t say for sure but looking back, it
seemed that people educated in PC heavy programs had a weaker sense of
all those issues that come with multiple people and multiple processes
happening on a machine at the same time.&lt;/p&gt;
&lt;p&gt;
On the other hand, having a relatively simple computer - one that you
had full control over may have led to an easier time in understanding
the low level ins and outs. You could learn about low level issues on
a PC and really understand everything. That doesn&amp;#39;t seem to happen as
much nowadays when even our personal computers and computing devices
run more like those multi user computers of old than the single
process no threads IBM-PC.&lt;/p&gt;
&lt;p&gt;
There was an opportunity to recapture this right before the Arduino
got big. The Arduino was based on an Atmel processer with a small
instruction set - a platform where a student could understand
everything from wire to application. For all the good that the Arduion
and related projects have led to, they&amp;#39;ve abstracted that low level
away.&lt;/p&gt;
&lt;p&gt;
A few years later Java became a popular college CS language followed
by Python. Both of these took memory management out of the core
programming-&amp;gt;data structures-&amp;gt;algorithms sequence. Sure, you probably got to
learn a bit about memory management and related issues in your systems
classes but I have to believe you didn&amp;#39;t really own that knowledge
like you would have had you had to manage memory throughout the core
courses.&lt;/p&gt;
&lt;p&gt;
Now, I&amp;#39;m not knocking the change. Moving to Java brought some
improvements and so does moving to Python. It&amp;#39;s just that as a
language or platform giveth it also taketh away.&lt;/p&gt;
&lt;p&gt;
The interesting things here is that the changes I noticed were not
directly intended but rather byproducts of changes made for other
reasons.&lt;/p&gt;
&lt;p&gt;
A final unintended consequence I noticed also seems to be a byproduct
of the Java revolution. Years ago after many programs had adopted
Java I was talking to a friend who was a high level SE at a big NY
bank. At the time finance was NY&amp;#39;s biggest tech employer. I think
Google might have recently moved to NY but wasn&amp;#39;t yet the player
they&amp;#39;d become - this was pre-IPO days and NY tech hadn&amp;#39;t yet
exploded. My friend was lamenting after a long day of interviews. None
of his interviewees - all from top rated CS colleges could handle what
he viewed as easy algorithm questions. Questions a that were
considered close to trivial by his interviewees from a few years
back.&lt;/p&gt;
&lt;p&gt;
After some discussion, we developed a theory. It might not be true but
looking around the landscape in the months and years following that
discussion, it might hold some water. With the acceptance of Java
students were now, more frequently using library calls. The .sort
method, the built in List, Tree, Map, and Set classes and more. This
is not to say that the students hadn&amp;#39;t learned about, say, the
mergesort in their data structures or algorithms classes but rather
they didn&amp;#39;t live it. Maybe  they did a quick implementation but then
it was gone from their memories.  Back in the day, most people in my
peer group started in Pascal and frequently moved to C. Even though C
had it&amp;#39;s built in sort, we coded our own more frequently. We also
didn&amp;#39;t have easy access to all the data structure and algorithm
libraries that Java had so we rolled our own and continued to use
them. When kids who did that interviewed, they could more easily see
how an interview problem related to an algorithm they coded and
tweaked half a dozen times. On the other hand, those that saw it once
and moved to a library didn&amp;#39;t have that in depth understanding.&lt;/p&gt;
&lt;p&gt;
Now, this is not to say that it was better in the old days. When they
removed memory management, they were able to add other
topics. Likewise when students didn&amp;#39;t need to implement their own
version of everything for their class projects, instructors could
steer students towards learning other new things.&lt;/p&gt;
&lt;p&gt;
I&amp;#39;m not making a judgement call on better or worse but rather that
even without formal curricular changes the strengths and weaknesses of
our CS graduates have changed over the years quite possibly as a
result of unintended consequences of a variety of decisions.&lt;/p&gt;
&lt;p&gt;
I also don&amp;#39;t this only happens in CS. Take a look at math - the big
one would probably be bringing the calculator to the classroom. The in
your face change was the idea that on the one hand, students would
become weaker in arithmetic and manual calculation. On the other hand,
time could be spent on what might be considered richer topics due to
time saved. Lost in the shuffle were topics like linear
interpolation - a useful skill taught to navigate log and trig
tables. Those skills would be forever lost.&lt;/p&gt;
&lt;p&gt;
So, there&amp;#39;s my rant and ramble inspired by Julia&amp;#39;s post.&lt;/p&gt;
&lt;p&gt;
A day after I saw the tweet I saw &lt;a href=&#34;https://jvns.ca/blog/2021/09/10/hashmaps-make-things-fast/&#34;&gt;this post&lt;/a&gt; by Julia. Unless some
shiny object distracts me I think I want to look at how the unintended
consequences from some of the changes I mentioned directly relates to
it.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>A Memorable Lesson (at least for one student)</title>
      <link>https://cestlaz.github.io/post/a-memorable-lesson/</link>
      <pubDate>Fri, 10 Sep 2021 13:31:22 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/a-memorable-lesson/</guid>
      <description>&lt;p&gt;
Back to calling an audible.&lt;/p&gt;
&lt;p&gt;
Around seven years ago I was visiting with some former students at
Google in Mountain View. One of them from way back in the late 90s,
Pawel, out of the blue said there was one lesson I taught that was
particularly memorable. Not memorable in the &amp;#34;that was fun&amp;#34; way like
maybe my Halloween adventures but memorable in that he felt he got a
lot more out of it than a normal lesson. Pawel mentioned a few of the
things he still remembered about a lesson he saw over two decades
earlier. &lt;/p&gt;
&lt;p&gt;
It was, in fact, one of the first big CS audibles that I can
remember calling. &lt;/p&gt;
&lt;p&gt;
It was second semester APCS - probably right after the AB exam. I
guess I&amp;#39;d been teaching around seven years so I&amp;#39;d classify myself as
an advanced beginner. I also hadn&amp;#39;t done any serious programming and
problem solving since I started teaching.&lt;/p&gt;
&lt;p&gt;
Was I a fraud?&lt;/p&gt;
&lt;p&gt;
Impostor syndrome was creeping in.&lt;/p&gt;
&lt;p&gt;
Back then I had a bunch of students who participated in the &lt;a href=&#34;http://usaco.org/&#34;&gt;USACO&lt;/a&gt; and
would discuss the programming from their competitions. While I talked
a good game, I started to wonder if I could back it up. Should I
really be telling these kids about best practices for problem solving
ad programming if I just talked the talk and couldn&amp;#39;t walk the walk?&lt;/p&gt;
&lt;p&gt;
To test myself, I decided to work through some of the competition problems. I figured
that I didn&amp;#39;t have to be able to solve the hardest of the hard ones
since only the best of the best solved in that stratosphere but if I
should be able to solve or at least approach most of the advanced
problems.&lt;/p&gt;
&lt;p&gt;
After some problem solving and coding I felt much better about
myself. I wasn&amp;#39;t living a lie.&lt;/p&gt;
&lt;p&gt;
I particularly liked the Digit Pals problem. Question 4 from the
1996-1997 &lt;a href=&#34;https://www.angelfire.com/ca2/lorddave/usa974.html&#34;&gt;National Championship&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;
Fast forward to class a few days later. Early in the period, for some
reason, I wasn&amp;#39;t happy with where things were going so I decided to
totally change directions. I decided I&amp;#39;d do a lesson that was
basically a walkthrough of my problem solving and coding process for
Digit Pals.&lt;/p&gt;
&lt;p&gt;
I started by looking at the problem, working through example and then
some of the things we discussed included:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;data representation (2D array)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;the high level logic of removing a digit pal (recursive flood fill)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;the high level logic of sliding down and over&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;how to solve the whole thing.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For the overall solver, I decided to go with a straightforward, blind,
recursive search. I figured it would be fast enough for two
reasons. First, I figured that since, if you remove the digit pal at
any location, it&amp;#39;s the same as removing that pal from any of it&amp;#39;s
locations so that there would likely be many many solutions and
second, there was a line in the problem statement saying that your
solution might not work on large cases. In any event, when all was
said and done and they released the test data, my solution worked
within time constraints.&lt;/p&gt;
&lt;p&gt;
After the design phase, I went to the live coding with a focus on:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;compiling and testing every concept. That is, a single loop, a
single if, a function etc.. This may sound excessive but I&amp;#39;ve been
doing this forever and it&amp;#39;s served me well as a hobbyist and as a
professional.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Implementing the data structure first - a 2D array and then a way
to print it so that I could always tell the state of my program.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;incremental development - first remove a pal, then slide down, then
over, then the solver.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;When it was all over the problem was solved. I&amp;#39;d like to think that
the students got something out of the audible. I learned years later
that at least one student did. As a teacher, I also got a lot out of
it. That day might not have been my first live coding lesson but it&amp;#39;s
the earliest one I remember. It was all impromptu but it got me
thinking more deeply about how I approach problem solving and
programming as well as how to teach both. Even all the little things
like my compulsive compiling and testing.&lt;/p&gt;
&lt;p&gt;
Funny - I have no idea what I was originally going to teach that day
but that audible turned into both a lesson I&amp;#39;ve repeated many times
as well as concrete techniques that I&amp;#39;ve used over and over through
the years.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Should every assignment be open ended?</title>
      <link>https://cestlaz.github.io/post/creative-projects/</link>
      <pubDate>Sun, 05 Sep 2021 06:43:53 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/creative-projects/</guid>
      <description>&lt;p&gt;
&lt;a href=&#34;https://blog.acthompson.net/2021/09/are-you-assigning-projects-or-recipes.html&#34;&gt;This post&lt;/a&gt; by my friend &lt;a href=&#34;https://twitter.com/alfredtwo&#34;&gt;Alfred&lt;/a&gt; caught my eye yesterday. It&amp;#39;s a good
post - some good examples of inserting student creativity even into small
intro level assignments. While I like the post and agree with the
sentiment of open ended, student driven projects, I had to take issue
with the lead quote Alfred used: &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“If you assign a project and get back 30 of the same thing, that’s not
a project, that is a recipe.”&lt;/p&gt;
&lt;p&gt;
– Chris Lehmann&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Open ended projects and student driven assignments are great and
important but so are ones with similar or identical solutions and
they&amp;#39;re also not recipes.&lt;/p&gt;
&lt;p&gt;
First, there&amp;#39;s a certain level of utility in a uniform assignment. If
the assignment is &amp;#34;write a program to convert Fahrenheit to Celsius&amp;#34;
you know that all the students know the conversion as you can provide
it and it also allows them to easily check their work, either through
an autograder or with each other. Yes, I know, some students students
could be tempted to cut corners and copy solutions but usually
attempts to control cheating do more to constrain students doing
things the right way than to prevent the cheaters from cheating.&lt;/p&gt;
&lt;p&gt;
Also, some student, particularly early on need the structure of a set
assignment and don&amp;#39;t do as well with a &amp;#34;do anything assignment.&amp;#34;
Saying &amp;#34;just make a converter&amp;#34; can be much more stressful and
difficult than convert from pounds to kilograms.&lt;/p&gt;
&lt;p&gt;
As to recipes? Not necessarily. Let&amp;#39;s take this small assignment:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Given two variables &lt;strong&gt;a&lt;/strong&gt; and &lt;strong&gt;b&lt;/strong&gt;, write a code fragment that will swap
the values represented by &lt;strong&gt;a&lt;/strong&gt; and &lt;strong&gt;b&lt;/strong&gt;. That is, if at the start, &lt;strong&gt;a&lt;/strong&gt;
represented &lt;strong&gt;5&lt;/strong&gt; and &lt;strong&gt;b&lt;/strong&gt; represented &lt;strong&gt;10&lt;/strong&gt;, after your code, &lt;strong&gt;a&lt;/strong&gt; would
represent &lt;strong&gt;10&lt;/strong&gt; and &lt;strong&gt;b&lt;/strong&gt; would represent &lt;strong&gt;5&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
You could even add a hint:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;HINT:&lt;/strong&gt; Consider using an extra third variable in your solution.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
This isn&amp;#39;t a recipe, it&amp;#39;s an assignment. Even with the hint it doesn&amp;#39;t
tell the students exactly what to do, just the desired outcome. It&amp;#39;s
not a recipe but most or all of the solutions will look remarkably
similar.&lt;/p&gt;
&lt;p&gt;
By contrast, a swap &amp;#34;recipe&amp;#34; might read:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Create a new variable named &lt;strong&gt;extraBucket&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Assign the value currently in &lt;strong&gt;b&lt;/strong&gt; to &lt;strong&gt;extraBucket&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Assign the value currently in &lt;strong&gt;a&lt;/strong&gt; to &lt;strong&gt;b&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Assign the value currently in &lt;strong&gt;extraBucket&lt;/strong&gt; to &lt;strong&gt;a&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This is a recipe. A student would literally just rewrite the steps
into the solution but even this might have it&amp;#39;s place in a class.&lt;/p&gt;
&lt;p&gt;
A more advanced assignment that leads students through building and
understanding something like a merge or quicksort could be set up
similarly. Not in any way a recipe but rather a valuable exercise
where all the students end up with very similar solutions. This is not
necessarily a bad thing, in fact it was all the rage a few years ago
as it could be set up as a discovery or experiential learning
experience. I also poo pooed that as being the silver bullet but as
with most teaching techniques, it has its place. &lt;/p&gt;
&lt;p&gt;
Then there are opportunities to introduce student creativity even when
the assignments are, at their core, all the same. I recall a session
at either SIGCSE or CSTA by &lt;a href=&#34;https://www.bootstrapworld.org/&#34;&gt;Bootstrapworld&lt;/a&gt;. They were describing one
of their classes major projects. It was a game. I forget the details
but at the core, all the student projects were the same. They differed
only in the graphics they used and the story around the game. That&amp;#39;s
where Boostrapworld interjected student creativity but the core CS and
math of the student projects were all the same. Did the fact that all
the assignments were essentially the same make this bad or a recipe?
Certainly not. Students go to express themselves uniquely but at the
same time the assignment was constrained and focused on what the
Bootstrapworld designers wanted.&lt;/p&gt;
&lt;p&gt;
So, there you have it. There&amp;#39;s nothing wrong with assignments where
the student results are largely the same. There&amp;#39;s also nothing wrong
with student projects that are 100% open ended. It&amp;#39;s all about the
teacher having multiple tools and using them as appropriate for their
students. &lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Calling an audible</title>
      <link>https://cestlaz.github.io/post/audible/</link>
      <pubDate>Thu, 02 Sep 2021 13:48:09 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/audible/</guid>
      <description>&lt;p&gt;
Be ready to call an audible.&lt;/p&gt;
&lt;p&gt;
This was advice I got during my third year teaching. I had just
transferred from Seward Park to Stuy and was being observed for the
first time by my former teacher and now supervisor Richie
Rothenberg. I forget exactly what the lesson was on - something with
coordinate geometry I think. The lesson was okay but it wasn&amp;#39;t going
over well with the class. I was teaching at too low a level for my
audience. I could feel it as I was teaching but as I was pretty
inexperienced I wasn&amp;#39;t confident in changing things up on the fly.&lt;/p&gt;
&lt;p&gt;
Afterwards, Richie and I debriefed. He said the lesson was
satisfactory - the magic word you need on any observation but that it
could have been much better. I had only been teaching at Stuy for a
few weeks and even though I was a Stuy grad I hadn&amp;#39;t had time to get
my head around where the students were at. Richie said that sometimes
you just have to call an audible. For a young teacher, easier said
than done. In addition to not having a great handle on my students yet
I also wasn&amp;#39;t confident in flying without a net. &lt;/p&gt;
&lt;p&gt;
This is why it&amp;#39;s so important for teachers to really know their
stuff - both the content and how to teach it. It&amp;#39;s why I&amp;#39;m concerned
when I see so many leaders in CS education pushing scripted curricula
and PD based training to fully &amp;#34;prepare&amp;#34; CS teachers in just a few PD
sessions.&lt;/p&gt;
&lt;p&gt;
First time through, particularly when you&amp;#39;re voluntold to teach a new
class you just want to survive. Follow that script, learn with your
kids and get through. You&amp;#39;ll grow and the kids will be richer than had
you not gone through the fire with them.&lt;/p&gt;
&lt;p&gt;
Two or three years down the road, however, if you&amp;#39;re still just
following the script you&amp;#39;re doing your students a disservice.&lt;/p&gt;
&lt;p&gt;
Of course, having subject knowledge doesn&amp;#39;t mean you have all the
answers but it lets you call that audible when a class needs something
that is not in the lesson plan or lets you talk about multiple
positions on subjects with no single best answer like coding style.&lt;/p&gt;
&lt;p&gt;
And then calling an audible isn&amp;#39;t always about making a lesson more
advanced. It can also be about sensing what a class needs at that
time. This is something I learned from Bruce Baskind at Seward
Park. I&amp;#39;ve lost touch with Bruce but he was a mentor and a friend when
I started this teaching thing and without the support I got from Bruce
and a handful of others back at Seward, I wouldn&amp;#39;t have made it.&lt;/p&gt;
&lt;p&gt;
Sometimes, you&amp;#39;ve got to turn off the academics. A class might need a
team building exercise or maybe just something fun. They might just
need to turn off school for part or all of the period. Sure, you burn
a lesson but sometimes that&amp;#39;s what the kids need and at the end of the
semester, they&amp;#39;ll be further along for it. I&amp;#39;d sometimes take a block
of class time and do Story Time - literally right out of grade
school - usually something from &lt;a href=&#34;https://www.personal.psu.edu/faculty/k/u/kuc14/sunny/Children%20Literature/The%20stinky%20cheese%20man/stinky%20cheese%20man.pdf&#34;&gt;The Stinky Cheese Man&lt;/a&gt; like &amp;#34;The Really
Ugly Duckling.&amp;#34; In some ways it&amp;#39;s related to the &lt;a href=&#34;https://www.youtube.com/playlist?list=PL9KxKa8NpFxJYgovyJhF4HZRsAqYKBLiG&#34;&gt;Halloween Stuff&lt;/a&gt; I
used to do at Stuy. Those were preplanned but that was all about
relationship building with the class - the non academic stuff that
supports the academics the rest of the year.&lt;/p&gt;
&lt;p&gt;
As this post is beginning to wander I think I&amp;#39;ll stop.&lt;/p&gt;
&lt;p&gt;
Next up - a specific audible I called that, at least for one student,
turned into a very memorable lesson.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Day one back in person</title>
      <link>https://cestlaz.github.io/post/day-one-in-person/</link>
      <pubDate>Fri, 27 Aug 2021 06:46:11 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/day-one-in-person/</guid>
      <description>&lt;p&gt;
Yesterday was my first day of in person teaching since early
March 2020. It was,… interesting.&lt;/p&gt;
&lt;p&gt;
I was looking forward to actually seeing my  students in person but as
I mentioned in my &lt;a href=&#34;https://cestlaz.github.io/post/32-years/&#34;&gt;last post&lt;/a&gt;, i wasn&amp;#39;t comfortable given Hunter&amp;#39;s
current COVID policy and Delta.&lt;/p&gt;
&lt;p&gt;
I&amp;#39;ll be happier come mid October when 100% of students on campus will
be vaccinated but at least for now, mask compliance is high. I only
had to talk to one student in a hallway to remind him to put his mask
back on and the only other non-masked person was a staff member (too
far away for me to address) who had it under her nose.&lt;/p&gt;
&lt;p&gt;
In class distancing was not possible at all and I wasn&amp;#39;t happy with
that and this will certainly cause me stress for the next couple of
months.&lt;/p&gt;
&lt;p&gt;
The positives? Actually meeting my students. I went through all of
last year not seeing any of them in person and in fact have only met
one face to face so far. That was just a couple of weeks ago at an
event we both attended. That was great. Even with cameras on there&amp;#39;s
no comparison with what you can pick up and communicate through body
language remote vs in person. Just not the same. A secondary positive
were the low-tech tools. I haven&amp;#39;t found a Zoom based whiteboard
solution that I like. There&amp;#39;s something to be said for a whiteboard
that&amp;#39;s up all period that can be modified not only by me but by other
members of the class along with the projected screen.&lt;/p&gt;
&lt;p&gt;
What about the negatives? In addition to the general health questions,
both physical and mental there were a few other things I noticed. Day
one for me is always more lecture oriented. I have to give them a lot
of material - policies and procedures, syllabus information,
etc.. That&amp;#39;s not to say that the students aren&amp;#39;t involved at all but
my first day classes are usually ones where I talk more and they talk
less. When I talk, I like to roam the room. Move to different
locations - get their eyes on different parts of the room with
different students. It&amp;#39;s a small thing but something that makes a
difference. I couldn&amp;#39;t comfortably do that. Similarly, when they were
working, I wasn&amp;#39;t comfortable with my traditional circulation
routine - given that we don&amp;#39;t know students vaccine status, I didn&amp;#39;t
want to get in close with them. This also reinforces my question from
my last post about student collaboration and group work. These are
things that actually work better remotely. Breakout rooms are flawed
but they&amp;#39;re something and you can&amp;#39;t really do groups in a small
classroom while keeping distant.&lt;/p&gt;
&lt;p&gt;
What&amp;#39;s next? As I said at the top, I&amp;#39;ll be more comfortable come mid
October when we&amp;#39;re all vaxxed. Until then, I&amp;#39;ll take it a day at a
time. I&amp;#39;ll probably schedule some of our classes to be remote
regardless of policy if I think that the remote tools make more sense
for a particular session.&lt;/p&gt;
&lt;p&gt;
Gonna take it one class at a time.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>\(2^5\) Years Teaching</title>
      <link>https://cestlaz.github.io/post/32-years/</link>
      <pubDate>Sat, 21 Aug 2021 13:02:56 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/32-years/</guid>
      <description>&lt;script type=&#34;text/javascript&#34;
  src=&#34;https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML&#34;&gt;
&lt;/script&gt;
&lt;p&gt;
I was looking over my TRS statement the other day - that&amp;#39;s Teacher&amp;#39;s
Retirement System and noticed that next week I&amp;#39;ll be starting my 32nd
year teaching. That&amp;#39;s \(2^5\) or 10000 - 5 bits so I guess you can&amp;#39;t
call me a two bit teacher.&lt;/p&gt;
&lt;p&gt;
Two and a half years at Seward, over 20 at Stuy, and the rest at
Hunter College. I&amp;#39;ve had a lot of last days before school starts but
this year is different. I&amp;#39;m betting that&amp;#39;s the case for a lot of us.&lt;/p&gt;
&lt;p&gt;
I mentioned about burnout and not feeling any joy when I wrote about the
&lt;a href=&#34;https://cestlaz.github.io/post/no-csta2021/&#34;&gt;CSTA conference&lt;/a&gt; but we&amp;#39;re also starting a new year in a strange place
due to the pandemic. On the one hand we have vaccines but on the
other, we&amp;#39;ve got Delta. I&amp;#39;m scheduled to teach my undergraduate
classes in person and to be honest, I&amp;#39;m not 100% comfortable. Will
that affect my teaching? I guess we&amp;#39;ll see.&lt;/p&gt;
&lt;p&gt;
Then we have practical concerns. My students should all be distancing
so how will that affect group work?&lt;/p&gt;
&lt;p&gt;
As I&amp;#39;m writing this I just got an email from Hunter saying that
students will have 45 days post FDA approval to get vaccinated. The
wording seems to contradict the previous policy that in order for
students to enter campus they had to be vaccinated. This is concerning
to say the least.&lt;/p&gt;
&lt;p&gt;
When I started teaching I was always nervous before the first day back
and then again for the first day teaching. Mid career it was more of
an excited nervousness. Ultimately the nerves went away and while I
sorely needed vacation in June by September I was looking forward to
seeing my students again. This year it&amp;#39;s mostly nervousness, discomfort and
uncertainty. &lt;/p&gt;
&lt;p&gt;
I don&amp;#39;t write this merely to complain but rather to share. I figure if
I&amp;#39;m feeling this way so probably are others. We&amp;#39;re not alone.  &lt;/p&gt;
&lt;p&gt;
I&amp;#39;ve got some CS and teaching content posts lined up and plan to start
with them next week as things get back in the swing but for now, good
luck to everyone starting back up.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Why it takes so long to become a better teacher</title>
      <link>https://cestlaz.github.io/post/feedback-loop/</link>
      <pubDate>Fri, 06 Aug 2021 06:54:15 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/feedback-loop/</guid>
      <description>&lt;script type=&#34;text/javascript&#34;
  src=&#34;https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML&#34;&gt;
&lt;/script&gt;
&lt;p&gt;
I&amp;#39;ve written about how long it takes to become a &lt;a href=&#34;https://cestlaz.github.io/post/five-year-class/&#34;&gt;master teacher&lt;/a&gt; and
that even after 9 or 10 years most teachers are really just advanced
beginners. A big reason for that is our long feedback loop. You do
something and you can&amp;#39;t do it again for a year.&lt;/p&gt;
&lt;p&gt;
I was listening to a podcast on my morning run by the Hudson River and
something came up about differences between quantities of items. The difference
between having n versus n+1 of something changes based on the value of n. If, for example, you have 1 versus 2 shoes - that&amp;#39;s a BIG
difference. On the other hand, if you have 100 vs 101 shoes, not so
much.&lt;/p&gt;
&lt;p&gt;
This got me thinking about how I framed things when teaching
big-O notation. In big-O you generally just look at the dominant
term. If you have an algorithm that runs in \(O(n^2+n)\) time you
usually just say \(O(n^2)\) because \(n^2\) is the dominant term. If you n
is small, let&amp;#39;s say 2, the difference between 2 and 4 is big so the n
part of \(n^2+n\) seems important but as n gets large, say 10,000, then
the difference between 100,000,000 and 100,010,000 is negligible for
our purposes.&lt;/p&gt;
&lt;p&gt;
I try to introduce this concept when teaching big-O but listening to
the podcast and reflecting gave me some thoughts as to how I can do it
better.&lt;/p&gt;
&lt;p&gt;
The trouble is, I won&amp;#39;t be able to for a while. I introduced big-O to
our teachers in our summer intensive. My next opportunity to cover the
topic will be sometime this Spring with my first year undergrads. Same
topic, but different audience so it won&amp;#39;t be quite the same. The next
time I get to do this with teachers is next summer. All this supposes
that I remember the changes I&amp;#39;m thinking about making and work them
in. I&amp;#39;m writing myself a few notes but even then, who&amp;#39;s to say if I&amp;#39;m
going to remember the nuance that I&amp;#39;m thinking now?&lt;/p&gt;
&lt;p&gt;
That&amp;#39;s the teaching feedback loop - get an idea, try it, and then
can&amp;#39;t iterate for a year. Get a new idea and you can&amp;#39;t try it until
the topics comes up which could be a long time from now.  True, some
things like a new pedagogical trick can be tried out more quickly but
even then you can&amp;#39;t just do it. You&amp;#39;ve got to find where it works
within your current classes and still have to account for the
countless differences that make up your classes when you&amp;#39;re ready for
the next iteration.&lt;/p&gt;
&lt;p&gt;
None of this is good or bad, just the nature of our profession. Just
something that I was thinking about this morning.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Hunter College CS Teacher Certification Summer 2021</title>
      <link>https://cestlaz.github.io/post/teacher-cert-cohort-2/</link>
      <pubDate>Mon, 02 Aug 2021 08:58:21 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/teacher-cert-cohort-2/</guid>
      <description>&lt;p&gt;
Last Friday concluded the summer portion of Hunter&amp;#39;s CS Teacher
Certification program. It was an intense month. All day every day from
June 28th through July 30. On the one hand between &lt;a href=&#34;https://cestlaz.github.io/post/no-csta2021/&#34;&gt;burnout and covid
fatigue&lt;/a&gt; it was a tough month and I&amp;#39;m dealing with some much needed
recovery this week. On the other hand, working with JonAlf, Topher,
new team member Genady along with around 25 amazing teachers and
teacher candidates made it a highlight of the year.&lt;/p&gt;
&lt;p&gt;
last year, the cohort was entirely in service teachers. This year we
added three Masters students into the mix. I know we had the states
first certified CS teachers with last years cohort but I&amp;#39;m also
wondering if we&amp;#39;ll have the state&amp;#39;s first newly minted teachers with a
Masters in CS Ed when they finish come May.&lt;/p&gt;
&lt;p&gt;
Hopefully, this years cohort members are all getting some rest and
relaxation through August and then we&amp;#39;ll kick off again with the
school year when they&amp;#39;ll complete the program in Fall and Spring.&lt;/p&gt;
&lt;p&gt;
There were some changes from last time around. This time, we were only
able to run 3 classes during the summer - Programming, Data
Structures, and Methods 1. Last year we ran four - these three plus
topics in CS. It was nice getting 12 credits done all at once but the
switch to 3 classes was probably a good thing. A less good thing
though was that on the state&amp;#39;s insistence we had to teach the courses
independently as opposed to in an integrated fashion. The idea was
that this way, people wouldn&amp;#39;t have to take all three but the reality
was that we had a cohort moving through the program as one.&lt;/p&gt;
&lt;p&gt;
While for the most part, the programming and data structures should be
independent we lost a good deal of value not being able to integrate
methods in at the same time. Still overall, based on our perceptions
and student ratings, things worked well.&lt;/p&gt;
&lt;p&gt;
In the fall the cohort will continue with Ethics and Computer Science
along with Curriculum Development and then two final classes in the
Spring.&lt;/p&gt;
&lt;p&gt;
This will give us close to 50 certified teachers in NY state which,
while not close to enough is a good start. We&amp;#39;re hoping to more than
double that with next years cohort.&lt;/p&gt;
&lt;p&gt;
The biggest obstacle we have is that our program requires some
fundamental knowledge in a text based programming language and as it
turns out, very few teachers currently teaching CS in NYC have
that. To help address this, we&amp;#39;ll start offering free workshops in the
Fall to get current teachers up to speed so they&amp;#39;ll be more than ready
for our program come cohort three.&lt;/p&gt;
&lt;p&gt;
If you&amp;#39;re a CS teacher in NYC, keep an eye out for those when the
school year starts.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Designated Slacker</title>
      <link>https://cestlaz.github.io/post/designated-slacker/</link>
      <pubDate>Fri, 16 Jul 2021 12:42:12 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/designated-slacker/</guid>
      <description>&lt;p&gt;
Our teacher certification program is in full swing. All day every
day through the end of the month. We finished off the first course
about a week ago and are currently covering data structures and
methods - teaching methods that is.&lt;/p&gt;
&lt;p&gt;
All day every day is pretty intense and doing it on Zoom doesn&amp;#39;t
help so we try to change things up. As with many Zoom based classes,
we make use of breakout rooms for small group work. We also use Slack
for text based communication. Personally, I prefer Zulip but didn&amp;#39;t
have a chance to switch things over. &lt;/p&gt;
&lt;p&gt;
Of course we visit them while in breakout rooms we also use Slack
polls while they&amp;#39;re in the rooms since the visits take time and
sometimes we just want a quick temperature check.&lt;/p&gt;
&lt;p&gt;
The problem is that we&amp;#39;re finding that often, the rooms ignore the
slack. This wasn&amp;#39;t a surprise. Whenever we visit rooms, they&amp;#39;re always
engrossed and engaged in the task. Usually one of them is screen
sharing and they&amp;#39;re all in deep discussion. More often than not they
don&amp;#39;t notice us at all until we say something - that&amp;#39;s actually kind
of cool.&lt;/p&gt;
&lt;p&gt;
In any event, we decided to try to address the issue. We asked that
each breakout room have one person who&amp;#39;s job would explicitly be
mannign Slack so that when we sent something we&amp;#39;d get a response.&lt;/p&gt;
&lt;p&gt;
Topher suggested that we call said person the &amp;#34;designated slacker.&amp;#34;
Who doesn&amp;#39;t want to be that????&lt;/p&gt;
&lt;p&gt;
That is all.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>No CSTA conference for me this year</title>
      <link>https://cestlaz.github.io/post/no-csta2021/</link>
      <pubDate>Wed, 14 Jul 2021 17:08:54 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/no-csta2021/</guid>
      <description>&lt;p&gt;
Today is the start of CSTA&amp;#39;s annual conference. Like last year, it&amp;#39;s
virtual. Unlike the past few years, this year I won&amp;#39;t be attending.&lt;/p&gt;
&lt;p&gt;
I&amp;#39;m a big fan of the CSTA conference. &lt;a href=&#34;https://twitter.com/jakebask&#34;&gt;Jake&lt;/a&gt; and team have done an
amazing job growing the conference and it&amp;#39;s been a highlight of my
year every time I&amp;#39;ve attended.&lt;/p&gt;
&lt;p&gt;
I could say that I&amp;#39;m not attending due to my schedule - I&amp;#39;m pretty
much spending all day every day during July teaching in my CS Teacher
Certification program and at the end of the day I&amp;#39;m wiped. This is
true but it&amp;#39;s not the only reason. The truth is, I&amp;#39;m pretty burned
out. Part of it is doing too many things. At this point, the
teacher education part of my portfolio is a full time job as is my
work with the undergraduate CS students and that&amp;#39;s not counting the
extras that have worked their way onto my plate. The other part of it
I&amp;#39;m sure is Covid. I&amp;#39;m writing this because  many teachers are
overworked and add in this past year of Covid and I&amp;#39;m sure many are
feeling the same as I am.&lt;/p&gt;
&lt;p&gt;
I love the CSTA conference but I&amp;#39;m just not feeling it. Same with a
lot of professional stuff - just not feeling the joy these days.&lt;/p&gt;
&lt;p&gt;
I&amp;#39;m hoping that come August I can turn everything off for a few weeks
and recharge a bit for next year and going back in person (safely)
will provide a boost.&lt;/p&gt;
&lt;p&gt;
I&amp;#39;m betting teachers around the country are feeling rather burned out
so wanted to share publicly saying you&amp;#39;re not alone, it&amp;#39;s okay and
it&amp;#39;s okay to dial it back for our own mental and physical well being. &lt;/p&gt;
&lt;p&gt;
Already looking forward to a better next year and  CSTA2022, hopefully in person.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Computer Science is not (inherently) fun</title>
      <link>https://cestlaz.github.io/post/no-fun/</link>
      <pubDate>Thu, 01 Jul 2021 09:56:06 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/no-fun/</guid>
      <description>&lt;p&gt;
I saw a tweet the other day by a CS teacher. They were talking about
how much easier it is to teach CS because it&amp;#39;s fun.&lt;/p&gt;
&lt;p&gt;
They went on about how they get to create cool problems which makes it
so much easier to teach than other subjects.&lt;/p&gt;
&lt;p&gt;
I&amp;#39;ve heard this a lot over the years particularly from teachers who
are into gaming - &amp;#34;CS is fun because you can create games.&amp;#34;&lt;/p&gt;
&lt;p&gt;
Sorry but I have to disagree.&lt;/p&gt;
&lt;img width=&#34;300&#34; src=&#34;https://external-content.duckduckgo.com/iu/?u=https%3A%2F%2Fmedia1.tenor.com%2Fimages%2F2394618fcb9a02e206f313155848d2d3%2Ftenor.gif%3Fitemid%3D5765989&amp;f=1&amp;nofb=1&#34;&gt;
&lt;p&gt;
Don&amp;#39;t get me wrong. I think CS is fun (and I&amp;#39;m not a game person) but
just because I find it fun doesn&amp;#39;t mean it&amp;#39;s inherently fun.&lt;/p&gt;
&lt;p&gt;
I used to think like those teachers posting but one day, early in my
career I was observed by my principal. She liked the lesson but
focused in on one thing. At one point I mentioned that we could use a
specific new technique and that it was &amp;#34;cool.&amp;#34; She asked me &amp;#34;why is it
cool?&amp;#34; and more importantly &amp;#34;why should it be cool for them?&amp;#34; That got
me thinking. It was cool to me for a variety of reasons but the truth
was that in a class of 30 high school students, what&amp;#39;s cool for one
person is probably not cool for everyone.&lt;/p&gt;
&lt;p&gt;
That observation stuck with me. Something that&amp;#39;s cool for some of us
isn&amp;#39;t for others. A teacher and some students might love making games
but it does nothing for me and for many students. Same thing for the
general building stuff or solving problems. The set of things that will and won&amp;#39;t
motivate students in a CS class is a large one indeed. Now, this
doesn&amp;#39;t mean don&amp;#39;t do, for instance, games but rather understand that your students
will have a wide range of interests so if you do a unit that focuses
on games, maybe do other things in your other units.&lt;/p&gt;
&lt;p&gt;
A second issue I have with the &amp;#34;CS is fun&amp;#34; thing is that it implies
that it&amp;#39;s all fun and games and not work. This is particularly a
problem transitioning from a CS0 to a CS1 class. If you don&amp;#39;t set up
the transition correctly students will find CS1 much more challenging
and harder and if it&amp;#39;s too hard or too challenging that&amp;#39;s not
fun. Besides, even if the class is fun, which should include being
challenging at the right level there will be times where things are
just not fun and that&amp;#39;s even with the best teacher. &lt;/p&gt;
&lt;p&gt;
The final thing that I find off putting about all the &amp;#34;computer
science is fun&amp;#34; posts. I think it&amp;#39;s unfair to other teachers and other
subjects. History can be tremendous fun - stories, adventures,
mysteries, predictions and more. It can be taught through traditional
lessons, role play, art music and the list goes on. English? That&amp;#39;s
also stories, adventures, mysteries etc.. Physics? How about show and
tell how the world works? To say we have the monopoly on fun is not
true and unfair. We currently don&amp;#39;t have the burden history which
strictly dictates what, how, and when we teach but we&amp;#39;re getting there
quickly.&lt;/p&gt;
&lt;p&gt;
The truth is that CS will be inherently fun for some just like any
other subject and the specifics of what and how a class is taught and
to whom can greatly influence the level of fun. A strong teacher who&amp;#39;s
passionate about games teaching a game development elective will
probably be fun for most or all participants but if it were a required
course, not so much.&lt;/p&gt;
&lt;p&gt;
CS is our field, we find it fun and interesting and we want to bring
our passion to our students. That&amp;#39;s all good but let&amp;#39;s remember that
it&amp;#39;s not special and we&amp;#39;re not special. The same can be said for other
subjects and other teachers and we have to remember that it&amp;#39;s not
about our passions but rather those of our students.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>They&#39;re all good first programming languages ;-)</title>
      <link>https://cestlaz.github.io/post/first-language/</link>
      <pubDate>Fri, 25 Jun 2021 10:06:36 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/first-language/</guid>
      <description>&lt;p&gt;
There&amp;#39;s been a lot of chatter recently about the first programming
language to teach. First, I read a Facebook thread focussing on Java,
C and C++ and then, presumably unrelated, Mark Guzdial posted &lt;a href=&#34;https://cacm.acm.org/blogs/blog-cacm/253393-why-did-we-ever-think-the-first-programming-language-didnt-matter/fulltext&#34;&gt;this&lt;/a&gt;
which lead to another Facebook discussing and then yesterday I noticed
a Twitter thread started by someone in the Bootcamp world asking
people what their first language was which resulted in answers ranging
from JS to PHP to Perl to a bunch of others.&lt;/p&gt;
&lt;p&gt;
A question Mark said he was thinking about recently was &amp;#34;Why did
anyone ever think that the first programming language didn’t matter?&amp;#34;&lt;/p&gt;
&lt;p&gt;
I don&amp;#39;t think people were thinking it didn&amp;#39;t matter but it was rather
like Anton Ego&amp;#39;s commenting on Gusteu&amp;#39;s &amp;#34;Anyone can cook.&amp;#34;&lt;/p&gt;
&lt;img width=&#34;300&#34; src=&#34;https://1.bp.blogspot.com/-lS9ekZSoIxw/XRkKDhIOO5I/AAAAAAAAd9M/H-Bjekcvh4IH_86RZlFcAikZvbqBY7uuwCLcBGAs/s1600/anyone-can-cook-book.jpg&#34;&gt;
&lt;p&gt;
It&amp;#39;s not that anyone can cook but rather great cooking can come from
anywhere. It&amp;#39;s not that the language doesn&amp;#39;t matter but rather any
language (or maybe most any language) &lt;strong&gt;can&lt;/strong&gt; be used as a first
language under the right set of circumstances.&lt;/p&gt;
&lt;p&gt;
All to often the argument goes like:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;
&amp;#34;I start my kids with C&amp;#34;&lt;/p&gt;
&lt;p&gt;
&amp;#34;But that&amp;#39;s no good - pointers - that&amp;#39;s why I use Javascript - it&amp;#39;s practical&amp;#34;&lt;/p&gt;
&lt;p&gt;
&amp;#34;But the development tools are lousy for beginners, not to mention the tool chain&amp;#34;&lt;/p&gt;
&lt;p&gt;
&amp;#34;Yeah but it&amp;#39;s ubiquitous, anyway how about Java&amp;#34;&lt;/p&gt;
&lt;p&gt;
&amp;#34;Too much overhead. Maybe scratch&amp;#34;&lt;/p&gt;
&lt;p&gt;
&amp;#34;No way, the kids will think it&amp;#39;s inauthentic.&amp;#34;&lt;/p&gt;
&lt;p&gt;
&amp;#34;I know, apl!!!!!!!!&amp;#34;&lt;/p&gt;
&lt;p&gt;
&amp;#34;DEAL!!!!&amp;#34;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Most of the discussion focuses on the language. Maybe on the related
toolset and ecosystem. A few of us though, have been pushing the fact
that there&amp;#39;s more to the equation. Teacher knowledge, comfort, and
passion is a HUGE part of the equation. So is the student level and
background. Mark raised an important factor in his post:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The first programming language is particularly important when we think
about programming for other-than-CS majors. Students want to learn
what’s valued in their desired community of practice. If a student
wants to become a data scientist, R or Python makes a lot more sense
than learning C.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
This is probably more relevant at the college level than K12 but still
important to consider for the earlier grades as well. I say consider
though because, as always, the real answer is &amp;#34;it depends.&amp;#34; Back when
Bioinformatics started to get hot in the &amp;#39;90s I seem to recall Perl
being the flavor of choice. Those of you who like me battled with Perl
and its &amp;#34;write once read never&amp;#34; approach to programming would agree
that even if it was the Lingua Franca of bioinformatics, I don&amp;#39;t know
if I would take beginners down a path so fraught with peril.&lt;/p&gt;
&lt;p&gt;
The truth is that the language does matter but there&amp;#39;s a lot of
latitude. Probably more for a general purpose programming intro
rather than for a specific discipline but even then. All things being
equal, I&amp;#39;d probably say that teacher comfort might be the most
important one to start with but that only holds when a teacher starts
teaching a class. I think it&amp;#39;s beholden on the teacher to then explore
alternatives and if another language makes more sense, become familiar
with it.&lt;/p&gt;
&lt;p&gt;
In any event, that&amp;#39;s my two cents. This conversation comes around a
couple of times a year. A couple of rounds ago I think it revolved
around Javascript so, we&amp;#39;re talking language. Last time, I and others
brought up teachers, their backgrounds and comfort levels. Now Mark&amp;#39;s
bringing another dimension. It&amp;#39;s nice to see the dialog evolving.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>But we don&#39;t have enough teachers!!</title>
      <link>https://cestlaz.github.io/post/enough-teachers/</link>
      <pubDate>Mon, 14 Jun 2021 07:55:01 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/enough-teachers/</guid>
      <description>&lt;p&gt;
A common refrain against requiring CS in our K12 schools is that we
don&amp;#39;t have the teachers and we won&amp;#39;t any time soon. Sure, we don&amp;#39;t
right now but we won&amp;#39;t if we don&amp;#39;t do something about it.&lt;/p&gt;
&lt;img width=&#34;300&#34; src=&#34;https://s-media-cache-ak0.pinimg.com/736x/16/71/5c/16715cc71bd6c28da0b32f24afec5045--simpsons-quotes-los-simpsons.jpg&#34;&gt;
&lt;p&gt;
The question to ask is &amp;#34;how long will it take&amp;#34; and &amp;#34;how do we get
there?&amp;#34;&lt;/p&gt;
&lt;p&gt;
Let&amp;#39;s look at New York City. We&amp;#39;ve got approximately 1,000,000
students in our public schools. Let&amp;#39;s say that&amp;#39;s grades 1
to 12. That&amp;#39;s 83333 per grade. Let&amp;#39;s take one particular grade and see
how many classes. At 34 students per class we get 2450 classes. Since
teachers typically teach five classes that means to cover 1 class for
every student in one particular grade we&amp;#39;ll need about 500 teachers to
cover a full year class. 250 if the class is only one semester. &lt;/p&gt;
&lt;p&gt;
This if, of course, just back of the envelope calculating and we&amp;#39;d
need a good deal more to really do justice to teaching CS in K12 but
500 sounds like a reasonable critical mass to say &amp;#34;we&amp;#39;re teaching CS.&amp;#34;&lt;/p&gt;
&lt;p&gt;
How long until we can get there?&lt;/p&gt;
&lt;p&gt;
At Hunter we started our advanced certificate program a year
ago. The cert program is specifically for teachers licensed in another
area seeking to add the New York State CS credential. Our first cohort
graduated 21 and I can proudly say they&amp;#39;re all very well prepared to
teach CS in K12. They know their content and how to teach it. We&amp;#39;re
starting another batch in two weeks and a third cohort next summer. By
June 2023 we should have between 60 and 100 teachers certified. That&amp;#39;s
not bad. We&amp;#39;ll have a core group of teacher leaders three years from
our start. &lt;/p&gt;
&lt;p&gt;
How are we doing this? What&amp;#39;s the incentive for current teachers to
get this new certification? It&amp;#39;s an opportunity to really learn some
CS and how to teach it. All the training and PD based models just
don&amp;#39;t cut it long term. On the other hand, it costs a pretty penny -
21 graduate credits. True, those credits can be applied to salary
differentials but still. Also, while the state could just flat out
require the certification but they&amp;#39;ve put in a generous ramp up -
teachers will need the credential but not for a few year.&lt;/p&gt;
&lt;p&gt;
The biggest reason we&amp;#39;ve been able to get these teachers in is the
generosity of the New York Tech community. We&amp;#39;ve been able to provide
financial support to these teachers looking to be our leaders moving
forward. &lt;/p&gt;
&lt;p&gt;
Going with that, we have 4 students currently in our Masters program
with another 6 or so slated to start in the Fall and that&amp;#39;s with zero
advertising and outreach. I expect that in a couple of years, the
demand for the certificate program will wane while it accelerates for
the masters program. &lt;/p&gt;
&lt;p&gt;
We&amp;#39;re not going to have all the teachers we need in three years or
even in five but in three we&amp;#39;ll have a solid core. As other
certification programs come online the city will increase it&amp;#39;s teacher
training capacity and as we close in on 2026 when CS4All will expect
all schools to offer CS, we&amp;#39;ll have a good number of qualified
teachers to fill the need.&lt;/p&gt;
&lt;p&gt;
Sure, it&amp;#39;ll take a decade or longer to finish the job but you&amp;#39;ve got
to start with a plan and a vision and lots of support. At least in NYC
we&amp;#39;ve got all three.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Finally got the class working - only took five years</title>
      <link>https://cestlaz.github.io/post/five-year-class/</link>
      <pubDate>Wed, 02 Jun 2021 08:36:53 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/five-year-class/</guid>
      <description>&lt;p&gt;
You don&amp;#39;t become a master teacher overnight. It takes years, perhaps
decades. Year one, you&amp;#39;re just trying to survive. Year two is
frequently a small step back. Year three on is slow improvement
provide the teacher works to improve. To me and eight to ten year
teacher is usually an advanced beginner, fifteen years?
Seasoned. Master teacher? You&amp;#39;re probably pushing close to 20 years or
more. Of course, there are exceptions but this is the pattern I&amp;#39;ve
most often observed (burnout notwithstanding).&lt;/p&gt;
&lt;p&gt;
Why such a long developmental timeline? Part of it is the feedback
loop. At best your cycle is one semester but more often than not it&amp;#39;s
a year. You do something once and then you don&amp;#39;t really know if it
worked until way later if ever. You also can&amp;#39;t try it again until
next year and even then, it&amp;#39;ll be with different students and possibly
with all sorts of different variables. &lt;/p&gt;
&lt;p&gt;
That&amp;#39;s why I was happy when this semester ended and I felt that I
finally got one of my classes to where I wanted it. It only took five
years. Actually five years but having taught it 8 times over those
five years.&lt;/p&gt;
&lt;p&gt;
The class in question is the lab/recitation for Hunter&amp;#39;s CSCI13500 -
essentially CS1. For the non-Daedalus sections, they basically do a
programming lab per week. For me, my students do those labs albeit
usually outside of class time and we do enrichment. One of the
challenges is that I have to follow the lead of the main course
instructor who designs the labs and controls the class sequence. I
have some leway but I can&amp;#39;t for instance decide to teach classes way
earlier.&lt;/p&gt;
&lt;p&gt;
Over the eight iterations I&amp;#39;ve tried different different things but I
think I&amp;#39;ve finally settled on what and how things happen in the
class.&lt;/p&gt;
&lt;p&gt;
While I still follow the thirteen labs given by the mane instructor in
sequence, they use Gradescope and I use GitHub Classroom. I also use
unit tests to grade the labs which gives me a platform to develop the
idea of testing both in general and as an industry practice. We go
from nothing to discussing testing and me providing test cases to them
designing their tests for later labs. Since we&amp;#39;re using GitHub
Classroom that allows us to leverage that as well. We&amp;#39;ll talk about SE
practices like using version control, build tools (make), code review,
etc.. This is all part of the enrichment which also includes students
working on projects started by other students.&lt;/p&gt;
&lt;p&gt;
We also do some direct CS enrichment by extending some of the
labs. Two labs that have been used recently have particularly lent
themselves to extensions. One was a lab based on rotational ciphers
which I extend by covering a decoder and there&amp;#39;s a 2D image lab based
on arrays that lends itself to all sorts of extensions - I like seam
carving.&lt;/p&gt;
&lt;p&gt;
This is what I landed on but I also tried other things that didn&amp;#39;t
work and some of this will change in the future. The point is that it
took years. I couldn&amp;#39;t do something one week and then immediately try
something else. Sure, you can do that with specific teaching
techniques but not with a class overall.&lt;/p&gt;
&lt;p&gt;
One of the other classes I&amp;#39;m still tweaking is CSC23500 - essentially
data structures. I taught it for decades as part of APCS-AB but
Hunter&amp;#39;s a new audience - different circumstances, different
constraints, and differnet advantages. First time through I wasn&amp;#39;t
super happy with my performance. Second year I made some positive
adjustments and was happier - Covid mid semester notwithstanding. This
year, I think I got the structure down. It was remote and during Covid
so there were other challenges so I won&amp;#39;t really know until the fourth
iteration but I think I&amp;#39;m getting there.&lt;/p&gt;
&lt;p&gt;
So, all this is to say that improvement in teaching and improvement in
classes doesn&amp;#39;t happen overnight. Education is the long game.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>If you build programs, teachers will come</title>
      <link>https://cestlaz.github.io/post/people-will-teach-cs/</link>
      <pubDate>Thu, 27 May 2021 06:53:26 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/people-will-teach-cs/</guid>
      <description>&lt;p&gt;
It&amp;#39;s been a month since my last post. In fact it seems that most of
the usual CS Ed bloggers are down in frequency this year. For me it&amp;#39;s
probably been Covid fatigue and the resulting funk but I&amp;#39;m going to
see if I can force myself to write more frequently.&lt;/p&gt;
&lt;p&gt;
So, the other day someone was asking about CS certification in NY
state on Facebook. One comment caught my eye. It was about Michigan
dropping all requirements to teach CS because, and I&amp;#39;m paraphrasing
here, nobody who knows enough CS to go into industry will ever become
a teacher.&lt;/p&gt;
&lt;p&gt;
I both resent and resemble that remark as do a handful of my
colleagues.&lt;/p&gt;
&lt;p&gt;
I&amp;#39;ve heard this argument many times. A particularly disgusting version
goes &amp;#34;if we teach CS teachers too much CS they&amp;#39;ll leave for industry.&amp;#34;&lt;/p&gt;
&lt;p&gt;
I don&amp;#39;t buy it. That&amp;#39;s just an excuse and it&amp;#39;ll keep our students from
getting the teachers they both need and deserve. Why don&amp;#39;t I buy it?
Math and Science. CS is the hot subject these days and, at least in
theory, with a strong tech background you can &amp;#34;easily&amp;#34; get a high
paying job but CS wasn&amp;#39;t always the be all and end all. There were and
are other fields that pay well and can pull from our pool of potential
teachers.&lt;/p&gt;
&lt;p&gt;
Let&amp;#39;s dig a little deeper. Nowadays you can become certified in math
or science in New York state by completing an &amp;#34;approved program,&amp;#34;
taking some state exams and jumping through a few hoops. This has led
programs in &amp;#34;math education.&amp;#34; Some of these  programs provide teachers
with a solid foundation in math but some, not so much. Back before no
child left behind, at least in New York City, you had to actually know
your math. You needed legit math credits as opposed to math-ed (which
can be legit or lame) and you had to get through the &amp;#34;board of
examiners&amp;#34; where you had to face a panel of teachers and assistant
principals who could grill you on all manner of content.&lt;/p&gt;
&lt;p&gt;
Where am I going with this?&lt;/p&gt;
&lt;p&gt;
Well, a math teacher who knows their math, at least in NY has plenty
of alternatives. Accounting has always been a mainstay but for the big
bucks we have wall street. How is it we have math teachers that know
math when wall street and those big bonuses beckon? Same thing with
some of the sciences - we&amp;#39;ve got big pharma right across the river.&lt;/p&gt;
&lt;p&gt;
The truth is that some people are good in their subject area and
actually want to become teachers. This might not be the majority of CS
people, math people etc. but there are some. Math and science might be
shortage areas in schools over time but somehow schools manage to find
teachers.&lt;/p&gt;
&lt;p&gt;
The problem with CS is that there was never a career path. If you knew
CS you couldn&amp;#39;t get certification so you had to go in through math or
some other subject. Then you had to find a school where you could
teach CS and of course, for seniority and job retention you were
always lumped in with another discipline.&lt;/p&gt;
&lt;p&gt;
Now, a career path is developing. We&amp;#39;ve got programs like mine at
Hunter through which a prospective teacher can become certified and we
have schools starting to offer CS and they&amp;#39;ll want to hire those CS
teachers.&lt;/p&gt;
&lt;p&gt;
It&amp;#39;ll just take time.&lt;/p&gt;
&lt;p&gt;
Our first Masters cohort at Hunter has four students in it. Our
second, which will start in the Fall looks like it will have
around 6. These are small but from what I&amp;#39;m told, pretty good sizes
for a new program, particularly when there was zero advertising and
outreach. I&amp;#39;ve also started to get questions from undergraduate CS
students.&lt;/p&gt;
&lt;p&gt;
We&amp;#39;re not going to solve K12 CS education over night. We&amp;#39;ve got to play
the long game. Positions that need certified CS teachers are starting
to appear as are pathways to certification. There will be people who
want to teach and want to teach CS. If we give them the pathway they
will come.&lt;/p&gt;
&lt;p&gt;
As a final thought though, knowledgeable CS teachers do have a
choice. So do knowledgable math and science teachers. If they&amp;#39;re
leaving teaching or not even entering the profession it&amp;#39;s not because
of CS, math, or science. It&amp;#39;s because we&amp;#39;ve made teaching as a
profession so undesireable and those teachers have options. That&amp;#39;s why
I found that version of the argument I mentioned up at the top so
disgusting. People who don&amp;#39;t want CS teachers to know real CS are
really saying that the only way they can get and keep teachers is to
in fact keep them uneducated.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Teaching Styles</title>
      <link>https://cestlaz.github.io/post/teaching-styles/</link>
      <pubDate>Tue, 20 Apr 2021 08:31:47 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/teaching-styles/</guid>
      <description>&lt;p&gt;
My friend Emmanuel lamented over on Facebook on &amp;#34;Learning Styles,&amp;#34; or
more specifically on how it&amp;#39;s still given credence. We all chimed in
in agreement but not an hour later I saw a Twitter thread where
education thought leaders extolled the virtues of Learning Styles all
over again. I pointed out that it&amp;#39;s a great example as to why so many
teachers scoff at &amp;#34;the research&amp;#34; and &amp;#34;research backed practices.&amp;#34;
We&amp;#39;ve seen it all before. We&amp;#39;re told we have to teach one way or we&amp;#39;re
failures only to be told a few years later that we have to do
something else. It&amp;#39;s not necessarily the research (although I question
a good deal of what I&amp;#39;ve read) but also the interpretations and
implementations. There are just too many factors that are never
considered.&lt;/p&gt;
&lt;p&gt;
One factor that I&amp;#39;ve rarely seen mentioned but one I think about
frequently, particularly as I work with teachers is &amp;#34;teaching styles.&amp;#34;
I&amp;#39;m not talking about any deep science here but we know that teachers
are people and people have tendencies, strengths, weaknesses, and
preferences. These are factors that are so important to teaching but
rarely considered. It&amp;#39;s always &amp;#34;teach this way&amp;#34; and never what works
for you.&lt;/p&gt;
&lt;p&gt;
Think about how ridiculous that is. In what other field do we ignore
the individual strengths, tendencies and even comfort level of the
professional. In sports, we know that there are &amp;#34;player&amp;#39;s coaches&amp;#34; and
&amp;#34;disciplinarians&amp;#34; and players and teams might take better to one or
the other. Likewise, a coaches act can grow stale over time as the
team evolves. Similarly a great coach works their system to the
strengths of the players and doesn&amp;#39;t rigidly try to make players
conform to a system where they just don&amp;#39;t fit. Now that doesn&amp;#39;t mean
that a coach won&amp;#39;t try to develop a players weaknesses or try to move
towards their favored system but the greats look at the skills and
personalities of all involved. It also doesn&amp;#39;t mean that you can&amp;#39;t
evolve. Former NY Giants coach Tom Coughlin was a rigid
disciplinarian and almost lost the team and his job prior to their Super Bowl run
in 2007. He evolved - became more of a players coach. He didn&amp;#39;t change
his stripes. He was still a stickler for rules and details but he
brought in a new human dimension to his coaching game. &lt;/p&gt;
&lt;p&gt;
Back to teaching. &lt;/p&gt;
&lt;p&gt;
While you want teachers to have a large set of tools in the box they
are going to be better with some than with others. Of course you can&amp;#39;t
ignore the students and how they respond but it&amp;#39;s not a one way
street. Take my friend Jim. He&amp;#39;s one of the best two or three natural
teachers I know. I describe him as &amp;#34;the teacher I aspire to be.&amp;#34; He&amp;#39;s
amazing. Stylistically though he&amp;#39;s what I call traditional teacher
dominant. He presents, there are questions comments and answer, seat
work. Pretty old school stuff. He doesn&amp;#39;t fit the constructivist mold
nor the cooperative one but he&amp;#39;s the best. I remember talking to our
principal a number of years ago. They said &amp;#34;I can&amp;#39;t bring
superintendents and DOE officials to Jim&amp;#39;s class when they visit and
want to see what we&amp;#39;re doing. He&amp;#39;s great but they just wouldn&amp;#39;t
understand and we&amp;#39;d get a lower school rating.&amp;#34; He&amp;#39;s the best but he
doesn&amp;#39;t fit Danielson. Now before you give me the &amp;#34;but it doesn&amp;#39;t
count, he teaches at Stuy&amp;#34; I&amp;#39;ll share that prior to teaching at Stuy
he taught at an overall low performing neighborhood school and
experience notwithstanding, he was the best then too.&lt;/p&gt;
&lt;p&gt;
What makes Jim the best? He has his preferred style and he adjusts to
what his students need. He&amp;#39;ll take an assortment of tools out of his
belt - some discovery stuff here, some group work there but he&amp;#39;ll work
it in to augment his strengths rather than being something he&amp;#39;s not
and as a result being inauthentic.&lt;/p&gt;
&lt;p&gt;
For my part I too am traditional teacher dominant. I&amp;#39;m not anywhere
close to Jim&amp;#39;s level. I consider myself an above average in class
teacher who brings other things to the table and makes up for it with
honesty, sincerity, and loyalty. I&amp;#39;m 100% &lt;strong&gt;not&lt;/strong&gt; a Danielson teacher
nor am I a cooperative learning one which was all the rage when I
started my career. I&amp;#39;ll try to get new ideas and learn new techniques
and pick and choose and overall it&amp;#39;s worked pretty well.&lt;/p&gt;
&lt;p&gt;
All of this is to say that when teaching teachers or coaching them,
don&amp;#39;t try to turn them into you or into John Keating, Jaime Escalante,
or what have you (note to self, write up teacher movie rant some
day). Help them to look at who they are and what they bring to the
table. Mix that with the needs of their students and the cosntraints
of their teaching situation and help them to be the best they cab be.&lt;/p&gt;
&lt;p&gt;
Teaching styles, for lack of a better name is too frequently missing
from the education equation. It&amp;#39;s totally removed by those who want
scripted curricula and cookie cutter instruction and barely mentioned
anywhere else but teaching styles are an important component of great
teaching and I wish more people acknowledged this.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>New York City has Certified CS Teachers</title>
      <link>https://cestlaz.github.io/post/certified-teachers/</link>
      <pubDate>Tue, 23 Mar 2021 19:35:57 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/certified-teachers/</guid>
      <description>&lt;p&gt;
I&amp;#39;m super proud to say that New York City now has state certified
Computer Science Teachers!!!!!!&lt;/p&gt;
&lt;p&gt;
&lt;figure&gt;&lt;img src=&#34;https://cestlaz.github.io/img/cs-cert.png&#34; width=&#34;500px&#34;/&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;
It&amp;#39;s been a long road - really long if you consider I got started on
my CS Ed journey decades ago and there&amp;#39;s a long road ahead but we hit
a major milestone. &lt;/p&gt;
&lt;p&gt;
I started at Hunter a little over five years ago and creating teacher
certification programs was one of the goals. Back then, the state had
neither CS certification nor CS standards. The certification area was
created a year or so ago and the standards were just adopted this past
December. Hunter&amp;#39;s programs were approved December 2019 and we started
our first advanced certificate cohort last summer. &lt;/p&gt;
&lt;p&gt;
Twenty one working teachers, all certified in another subject
area. They spent a big chunk of their summer with us all day every day
and continued on with classes and field work in the Fall. Many
finished last December while a few needed one more course which
they&amp;#39;re taking now. Earlier today on our Slack, teachers from that
cohort started sharing that they either received their state
certificates in the mail or that they looked themselves up on the
NYSED web site and confirmed that they were now certified to teach
computer science in the state of NY.&lt;/p&gt;
&lt;p&gt;
This is big news.&lt;/p&gt;
&lt;p&gt;
The entire cohort came in as strong teachers and they all grew
tremendously in terms of CS knowledge and their ability to teach
it. Now they represent the first of a growing group of certified CS
teachers - education leaders to provide a core of expertise in terms of
both CS content and how to teach it.&lt;/p&gt;
&lt;p&gt;
I&amp;#39;m super proud of the cohort and super proud to be part of this. One
of the best parts for me have been meeting and working with these
great teachers and having this new learning network form - hopefully
we can keep it growing for years to come. Another is being able to get
the band back together - I was able to bring in my old partners in
crime JonAlf and Topher to teach and anyone who&amp;#39;s seen them teach know
that they&amp;#39;re the best. I couldn&amp;#39;t include our other co-conspirator,
Sam, because he was on sabbatical and couldn&amp;#39;t work but hopefully that
will change next time around. Not having a team at Hunter has been
really one of the few downsides so being able to work with my &amp;#34;go to
guys&amp;#34; again was a blast.&lt;/p&gt;
&lt;p&gt;
We also have our Masters program well underway so the pipeline of CS
teachers is starting to form. &lt;/p&gt;
&lt;p&gt;
This is exciting news for New York City, Hunter and for me
personally. Long road ahead but as of today, a bunch of students in
NYC are being taught by state certified computer science teachers and
there will be more to come.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Quick Sort over Zoom</title>
      <link>https://cestlaz.github.io/post/qsort-over-zoom/</link>
      <pubDate>Thu, 18 Mar 2021 12:10:53 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/qsort-over-zoom/</guid>
      <description>&lt;p&gt;
I haven&amp;#39;t been blogging much this year. Not sure why - probably pandemic
fatigue. It&amp;#39;s also affected my blog reading - more scanning, less deep
reading. I&amp;#39;ve also been trying to spend mode time off screen learning
how to paint (with,let&amp;#39;s say  mixed results :-) ) leaving less time
and energy to blog. Hopefully I&amp;#39;ll pick up on both ends as more people
get vaccinated and we can get to a more normal life. &lt;/p&gt;
&lt;p&gt;
In any event, I tried a new motivation for Quicksort today so I
thought I&amp;#39;d share.&lt;/p&gt;
&lt;p&gt;
I&amp;#39;ve approached teaching the Quicksort in a variety of ways (&lt;a href=&#34;https://cestlaz.github.io/post/try-something-new/&#34;&gt;here&lt;/a&gt;,
&lt;a href=&#34;https://cestlaz.github.io/posts/quick-sort-starting/&#34;&gt;here&lt;/a&gt;, &lt;a href=&#34;https://cestlaz.github.io/posts/2010-03-14-sorting-from-top-and-from-bottom/&#34;&gt;here&lt;/a&gt;, &lt;a href=&#34;https://cestlaz.github.io/posts/2014-03-12-select-to-sort/&#34;&gt;here&lt;/a&gt;) but never had a great lead in activity. Merge sort
was easy in person since you can &amp;#34;Tom Sawyer&amp;#34; &lt;a href=&#34;https://cestlaz.github.io/posts/2014-02-27-dumbass/&#34;&gt;shuffling a deck of
cards&lt;/a&gt; in class. We adapted this activity pretty well to &lt;a href=&#34;https://cestlaz.github.io/post/merge-over-zoom/&#34;&gt;work over Zoom&lt;/a&gt;
this past summer in our teacher certification program. Quicksort
however, haven&amp;#39;t found a good one. &lt;/p&gt;
&lt;p&gt;
Thinking about how to leverage remote, I had an idea to try - use
polls. I use &lt;a href=&#34;https://zulip.com/&#34;&gt;Zulip&lt;/a&gt; for class discussions. It&amp;#39;s like Slack but is open
source, can be self hosted, you can post from email,  and has much
better threading. I wrote a small bot to quickly create emoji
polls. &lt;/p&gt;
&lt;p&gt;
First I asked for the students to share their birtdays - just month
and day in the form MMDD so if you were born on March 12th you would
write 0312 in the chat. &lt;/p&gt;
&lt;p&gt;
Then, I picked one birthday at random, let&amp;#39;s say 0515. &lt;/p&gt;
&lt;p&gt;
I then created a poll: &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;🐶 My birthday is earlier in the year than 0515&lt;/p&gt;
&lt;p&gt;
🐱 My birthday is later in the year than 0515&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
The bot tags the post with the emoji and the class can click on their
choice. &lt;/p&gt;
&lt;p&gt;
We then talk about what we now know - &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;We now know the exact location of 0515 with respect to all the
dates&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The data set is now partially ordered (everything less than 0515 to
the left, greater to the right).&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I also drew out some diagrams showing what was happening &lt;/p&gt;
&lt;p&gt;
This is also one iteration of the Quicksort. &lt;/p&gt;
&lt;p&gt;
We do this again on one side and continue to discuss. &lt;/p&gt;
&lt;p&gt;
From here we finish developing the algorithm and we&amp;#39;re off to the
races.&lt;/p&gt;
&lt;p&gt;
As usual, I won&amp;#39;t know for a while how well this worked or if it did
at all but the students seemed to be engaged and so far I think it
helped get a good feel for how the algorithm worked. &lt;/p&gt;
&lt;p&gt;
Using Zulip or other chat polls in this case made the motivating
activity easy and seamless. I&amp;#39;m not sure that this particular activity
would be as easy to implement in person unless you used some
technology like clickers. &lt;/p&gt;
&lt;p&gt;
We finished off the class discussing how we should test our
implementations. They&amp;#39;re going to test the sorts on a variety of data
sets including sets where all values are the same or are already
sorted. Given our naive pivot selection this should lead to some
pretty bad runtimes – fodder to motivate the next class.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Teaching and Pedagogy - words and music</title>
      <link>https://cestlaz.github.io/post/teach-pedagogy/</link>
      <pubDate>Mon, 08 Feb 2021 20:12:43 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/teach-pedagogy/</guid>
      <description>&lt;p&gt;
I wanted to give a little more context on &lt;a href=&#34;https://cestlaz.github.io/post/teacher-creds/&#34;&gt;yesterday&amp;#39;s post&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;
In reading over the various comments on social media related to the
topic of required and desired CS teacher knowledge there are those
that fall on the content is king and pedagogy not so important and
others who think you don&amp;#39;t really need a deep knowledge of CS. I think
you need both and think current teachers need to be given a
reasonable but finite amount of time to get there.&lt;/p&gt;
&lt;p&gt;
Whenever the topic comes up I think of &lt;a href=&#34;https://en.wikipedia.org/wiki/Eddie_and_the_Cruisers&#34;&gt;Eddie and the Cruisers&lt;/a&gt;. Tom
Berringer is playing a song - &amp;#34;On the Dark Side&amp;#34; for the band as the
band ridicules him. Eddie (Michael Pare) says &amp;#34;Not bad&amp;#34; to which a
band mate says - &amp;#34;he can&amp;#39;t sing, he can&amp;#39;t play and he can&amp;#39;t
write. What&amp;#39;s not bad?&amp;#34; to which Eddie replies &amp;#34;he&amp;#39;s got something we
need, words and music.&amp;#34; &lt;/p&gt;
&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/Ds-MR9OPiNU&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;p&gt;
Words and music - teaching and pedagogy. One isn&amp;#39;t enough - you need
both. You need the content but you also have to do something to bring
value to the kids beyond just dumping the content on the desk - it&amp;#39;s
why I&amp;#39;m so against scripted curricula.&lt;/p&gt;
&lt;p&gt;
Why do I think both sides are so important? I probably got here from
teaching at Stuyvesant for over 20 years. On top of that, I&amp;#39;m a Stuy
grad (&amp;#39;84), Stuy husband (Devorah, also &amp;#39;84), Stuy brother, and two
time Stuy parent. While Stuy has and had some good teachers, I got to
see a bunch of bad ones. I saw teachers who didn&amp;#39;t know their subject
areas and teachers who didn&amp;#39;t know how to teach. The rub is that at a
school like Stuy the kids will figure out what they need on their
own. You can put an unripe avocado on the teachers desk and the kids
will still pass all the exams. Sure, the kids pass but every kid
deserves a teacher that adds value to their lives. &lt;/p&gt;
&lt;p&gt;
Some of the worst at Stuy were teachers for whom Stuy was their first
(and only) gig - they never really had to learn how to teach but for a
variety of reasons - all the kids pass the AP or in the case of
teachers that know content but not teaching, the &amp;#34;smart kids&amp;#34; like the
teacher because they &amp;#34;know stuff&amp;#34; - they think they&amp;#39;re good teachers. &lt;/p&gt;
&lt;p&gt;
Sorry, you have to add value.&lt;/p&gt;
&lt;p&gt;
The best thing that happened to me when I started was when Stuy&amp;#39;s
chairman didn&amp;#39;t hire me. I ended up at Seward Park and that&amp;#39;s where I
started to learn my craft. Once at Stuy, I had to be careful not to
fall into the trap - you can become a good or even a great teacher at
a specialized school but, just like anywhere else, you have to work
for it. You have to really look at what and how you&amp;#39;re doing. &lt;/p&gt;
&lt;p&gt;
All of this is to say that to add value to your students you really
have to know both the content and you have to know how to teach - you
have to add value. If you can be replaced by an avocado, you&amp;#39;re not
earning your paycheck.&lt;/p&gt;
&lt;p&gt;
Now, I&amp;#39;m not saying that the teachers who don&amp;#39;t know CS and are taking
on this new challenge shouldn&amp;#39;t be given time to learn the subject or
that raw teachers who know their subject shouldn&amp;#39;t be given time to
learn how to teach but you eventually have to get there.&lt;/p&gt;
&lt;p&gt;
If we&amp;#39;re okay with teachers who have to follow scripts for either
content or pedagogy for the long term then we&amp;#39;re devaluing our
profession. I&amp;#39;d like to think we add more.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Physics Teacher Wanted - must NOT know Physics</title>
      <link>https://cestlaz.github.io/post/teacher-creds/</link>
      <pubDate>Sun, 07 Feb 2021 19:00:53 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/teacher-creds/</guid>
      <description>&lt;p&gt;
There were a few posts over on Facebook this weekend about teacher
certification. It started with a question - should teacher
certification be based on an exam like APCS-A with the teacher
correctly answering 85% or greater. A lively discussion
followed. There was agreement and disagreement with responses ranging
from:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;good idea&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;it&amp;#39;s too hard&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;it&amp;#39;s not hard enough&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There was also a discussion of the importance of content knowledge vs
knowing how to teach in general.&lt;/p&gt;
&lt;p&gt;
Since there was a lot going on in the thread I thought I&amp;#39;d pull my own
thoughts out into this post.&lt;/p&gt;
&lt;p&gt;
Let&amp;#39;s first look at the test. There are a number of states that have
a content test for computer science. For some states, I think it&amp;#39;s the
only requirement. In terms of content, at least the Praxis exam is
something like APCS-A on steroids. This is not a good thing. Don&amp;#39;t get
me wrong, I think a qualified CS teacher should know more than APCS-A
on steroids but a single day test is not how you measure deep content
knowledge. I know plenty of students who&amp;#39;ve passed standardized
exams - be they regents, AP, or other but they were no way qualified
to teach the course. They knew the formulas, recognized the patterns,
but didn&amp;#39;t really know the material. Is this what we want of our CS
teachers? I certainly don&amp;#39;t. I&amp;#39;m not hugely opposed to an exam
covering somethign like college CS1 content other than my general
anti-testing beliefs - it would help to curtail some of the problems
that will invariably arise with weak certification programs but it
should no way be the actual bar to teach - if it exists, it should be
just one standard measure along the way.&lt;/p&gt;
&lt;p&gt;
Now to that content vs pedagogy thing. What current teachers and in
fact most people in the CS Ed space forget is that states move slowly
and that we&amp;#39;re playing the long game. Right now most CS teachers are
converts from other disciplines and relatively few have strong CS
backgrounds but over time this will change. As CS becomes more
established we&amp;#39;ll have young teachers entering the filed with the
intent of becoming a CS teacher. If states and teacher prep programs
set the content bar low that&amp;#39;ll be what we&amp;#39;re stuck with for a LONG
time.  We wouldn&amp;#39;t dream of creating a science teacher credential
where the teacher hardly knows any science - no way should we do it
for CS or any other subject.&lt;/p&gt;
&lt;p&gt;
The truth is that we need teacher prep programs that ensure that new
CS teachers know both the content and how to teach it and that content
should not be tied in to any specific curriculum. I wrote more about
all of this &lt;a href=&#34;https://cestlaz.github.io/post/teachers-prep-big-pic/&#34;&gt;here&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;
So what do do with current teachers and current needs? Easy - give
them time. Back when I started teaching I was a career changer. I
never took an education course, never student taught, nothing. Turns
out that Math was a shortage area so I had an option - as long as I
had enough math credits I&amp;#39;d get a temporary license  and start
teaching. Instead of teaching 5 classes, I&amp;#39;d teach 4 and get a
mentor. I then had to get a certain number of education credits within
a certain period of time. Since I already had the subject credits it
was just about learning how to teach. Truth is, I barely survived that
first year but things did get better.&lt;/p&gt;
&lt;p&gt;
New York and other states probably couldn&amp;#39;t do the exact same
thing. First off, current and potential teachers might not know the
content so it wouldn&amp;#39;t just be ed courses and second, certification
rules have changed big time since NCLB. Still, they could do something
similar - approve certification programs like the one I created at
Hunter - ones designed for current non-CS teachers and give teachers a
period of time to complete it. For career changers, create CS version
of programs like the NY Teaching Fellows. &lt;/p&gt;
&lt;p&gt;
What isn&amp;#39;t acceptable is saying that CS teachers don&amp;#39;t have to know CS
and that career changers who know CS don&amp;#39;t have to learn how to
teach. Create the programs and give people time. We&amp;#39;re playing the
long game and the only way we lose is if we cut corners for
convenience at the expense of the kids.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Censorship, TOS, and a slippery slope</title>
      <link>https://cestlaz.github.io/post/censorship/</link>
      <pubDate>Thu, 14 Jan 2021 14:14:14 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/censorship/</guid>
      <description>
&lt;p&gt;
Lots of chatter with Donald Trump being kicked off
platforms left and right. On the one hand we&amp;#39;re getting a lot of &amp;#34;it&amp;#39;s
censorship, it&amp;#39;s unust&amp;#34; and on the other side we have &amp;#34;it&amp;#39;s about
time.&amp;#34; I&amp;#39;m of course in the &amp;#34;it&amp;#39;s about time&amp;#34; category but even so,
there&amp;#39;s a cause for concern and a lot of meat for a discussion on tech
policies.&lt;/p&gt;
&lt;p&gt;
What makes this interesting discussion fodder is that Trump was
removed from different levels of the internet. First you&amp;#39;ve got actual
applications like Twitter and Facebook. Next you&amp;#39;ve got the Play and
Apple stores and finally, you&amp;#39;ve got AWS which provided cloud services
to Parler. At each level the removal of Trump and others inciting hate
and violence have different ramifications and nuances.&lt;/p&gt;
&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
Facebook and Twitter
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;
First let&amp;#39;s look at Facebook and Twitter. On the one hand this is an
easy one. They&amp;#39;re not government agencies - they&amp;#39;re private
companies so the first amendment doesn&amp;#39;t apply. Next, were they
denying service to Trump? No - he had an account on both
services. What did happen is that he violated terms of service. While
I&amp;#39;d never follow Trump, I did follow an account that tweeted his
tweets. The account was set up to see if it would be suspended - guess
what, it was - more than once. This isn&amp;#39;t discrimination or
censorship, this is bouncing the unruly patron at the bar or, dare I
say removing the person who refuses to wear a mask from your store. &lt;/p&gt;
&lt;p&gt;
If you&amp;#39;re one of those free market regulation bad people I don&amp;#39;t want
to hear it. In this case, the market did indeed decide. &lt;/p&gt;
&lt;p&gt;
There is, however, a big problem and that&amp;#39;s the fact that Twitter,
Facebook and a few other players have so much power. You could argue
they&amp;#39;re de facto monopolies. For years they willingly amiplified
Trump&amp;#39;s lies and now overnight removed him. That&amp;#39;s a huge amount of
power for a company to have. People like me have felt that for years,
Facebook and Twitter have been behaving irresponsibly and as of last
week people on the right feel that way and Dorsey and Zuck can&amp;#39;t be
voted out of office. One can of course argue &amp;#34;The Market&amp;#34; but it&amp;#39;s not
that simple with the market being dominated by a small number of
players. &lt;/p&gt;
&lt;p&gt;
I&amp;#39;m doubting that calls to split up the tech giants will be helpful. I
don&amp;#39;t know if we&amp;#39;re better off now as opposed to before AT&amp;amp;T split and
I&amp;#39;m not sure that strongarm regulation is the answer. &lt;/p&gt;
&lt;p&gt;
Enforcing open proticols, APIs and standards would probably help a
great deal but in any event, we do have a problem with big tech but
it&amp;#39;s not what the right is crying about now.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
The stores and AWS
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;
Next we have the app stores removing Parler. I&amp;#39;m guessing this is also
a violation of TOS issue but there&amp;#39;s another issue here which is
liability. Is Google or Apple liable or responsible for something on
an application they distribute. &lt;/p&gt;
&lt;p&gt;
Related but different is AWS - are they responsible for things that
occur on their servers even though it&amp;#39;s Parler or whomever creates and
runs the applications running on the Amazon Cloud?&lt;/p&gt;
&lt;p&gt;
Napster enters the chat.&lt;/p&gt;
&lt;p&gt;
Not exactly the same, but similar. For you youngsters, Napster was one
of the early file sharing services. It was basically an IRC based
setup to locate mp3 files in order to facilitate their
transfer. Napster never hosted any of the files in question but the
music industry went hard after them. &lt;/p&gt;
&lt;p&gt;
Even earlier you had alt.pictures.binaries. Back in the day they said
that people came to the internet for email but stayed for &lt;a href=&#34;https://en.wikipedia.org/wiki/Usenet&#34;&gt;Usenet&lt;/a&gt;
news. Basically, they were forums or chatrooms on just about any
topic. I of course subscribed to comp.lang.c,
alt.sports.basketball.nyknicks and a bunch of others. You connected to
your news server to retrieve and post messages and messages were
transferred periodically between servers. Originally using UUCP which
had computers dialing each other up on set schedules but later over
the internet. The servers didn&amp;#39;t own or even know what was in the
messages. They just stored and forwarded.&lt;/p&gt;
&lt;p&gt;
The question came up with binary groups - alt.pictures.binaries in
particular. Groups like alt.pictures.binaries would contain messages
with encoded images. A single image wouldn&amp;#39;t fit into a message and
messages were ascii so binary data couldn&amp;#39;t be directly sent. Images
were encode using a program called &lt;a href=&#34;https://en.wikipedia.org/wiki/Uuencoding&#34;&gt;uuencode&lt;/a&gt; and split into a bunch of
messages. &lt;/p&gt;
&lt;p&gt;
As one might expect, the binary groups ended up a place to traffic
adult and/or illegal material. &lt;/p&gt;
&lt;p&gt;
The question was were the server&amp;#39;s owners responsible? They didn&amp;#39;t
create or own the posted material. They probably weren&amp;#39;t even aware it
was on their servers. &lt;/p&gt;
&lt;p&gt;
This is a question cloud hosts like AWS have to consider on top of
public perception and just doing what&amp;#39;s right (whatever that is).&lt;/p&gt;
&lt;p&gt;
A final note on this is that Net Neutrality, while maybe not applying
in this specific instance harps on the same questions - with net
neutrality, ISPS must treat all network traffic the same. Without it
they are free to do what they want - they could slow down or block
services they don&amp;#39;t want to support. Not the same since cloud servers
are not ISPs but certainly similar. &lt;/p&gt;
&lt;p&gt;
Lots of meat here and there&amp;#39;s no clear cut right thing to do. Should
the market decide? Is regulation needed? If so how much. Should it
just be at the application level or how about the cloud? The Net
Neutrality issue isn&amp;#39;t that old but when it came up nobody was talking
about the cloud and app stores as gatekeepers didn&amp;#39;t exist. Add to
that the fact that our elected officials are, let us say, not the most
up on modern tech and tech issues. &lt;/p&gt;
&lt;p&gt;
I can see a lot of rich discussion coming out of this.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>On Teaching Recursion</title>
      <link>https://cestlaz.github.io/post/recursion/</link>
      <pubDate>Sun, 03 Jan 2021 13:49:00 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/recursion/</guid>
      <description>
&lt;p&gt;
Yesterday I read three posts on teaching recursion. &lt;a href=&#34;https://parentheticallyspeaking.org/articles/how-not-to-teach-recursion/&#34;&gt;First&lt;/a&gt; by Shriram
Krishnamurthi discussing his thoughts on how recursion is taught
incorrectly. This prompted Adam Michlin to &lt;a href=&#34;https://blog.ceos.io/2021/01/02/why-you-shouldnt-teach-recursion-yet/&#34;&gt;write about&lt;/a&gt; teaching
recursion later with some commentary on APCS and then finally, Alfred
Thompson added &lt;a href=&#34;https://blog.acthompson.net/2021/01/recursionhow-and-when-to-teach.html&#34;&gt;his thoughts&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;
Much like everything else in education there is no single right way to
do things. To say as an absolute that you should or shouldn&amp;#39;t teach in
a certain way is wrong - too many variable.s In my experience you can
teach recursion early or late but the structure of your program and
your choice of tools can influence how successful you&amp;#39;ll be. If you&amp;#39;re
teaching a programming course in a language like Python or Java and
are teaching control structures first you&amp;#39;re going to have a hard time
doing recursion early. They&amp;#39;ll get looping structures before they know
the constructs that support recursion - either for control or for
representing data. On the other hand, if you teach objects first you
might have more success.&lt;/p&gt;
&lt;p&gt;
On the other hand, if you&amp;#39;re using a language like Scheme where lists
and recursion are right in the forefront you&amp;#39;ll likely have more
success with recursion early rather than late. I wrote a bit about
this &lt;a href=&#34;https://cestlaz.github.io/posts/recursion-early/&#34;&gt;a couple of years ago&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;
I&amp;#39;ll leave the &amp;#34;how important is recursion&amp;#34; question for annother time
but I want to address one more thing here. In yesterday&amp;#39;s posts four
traditional recursion problems received a solid bashing and I don&amp;#39;t
think it was fair. As I said up top, &lt;del&gt;only a Sith deals in absolutes&lt;/del&gt;
in teaching, there are no absolutes. Is factorial a wonderful
motivation for recursion - particularly for a student who knows loops?
Probably not but can it have some value? Let&amp;#39;s see…&lt;/p&gt;
&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-1&#34;&gt;
Factorial
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-3&#34;&gt;
&lt;p&gt;
While this might not be a terrific motivator it does have some
niceties. Most students will know factorial but will only be able
describe it informally - &amp;#34;multiply all the numbers between 1 and n.&amp;#34;
The recursive definition is more, precise, for lack of a better word.&lt;/p&gt;
&lt;p&gt;
Then, there&amp;#39;s a direct translation between the recursive definition
and the code. &lt;/p&gt;
&lt;p&gt;
Finally, it&amp;#39;s about as bare bones as you get - no data structures or
undue complexity. &lt;/p&gt;
&lt;p&gt;
Is this going to motivate a student to learn recursion? No.&lt;/p&gt;
&lt;p&gt;
Can it be used to help paint a more complete picture? Probably.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-2&#34;&gt;
Fibonacci 
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-3&#34;&gt;
&lt;p&gt;
Also got a bad rap in the above linked posts. It shares the benefit of
the recursive definition directly translating to a coded solution with
factorial. &lt;/p&gt;
&lt;p&gt;
Fibonacci is also a problem where they originally learned it via the
recurssive rule &amp;#34;the next Fibonacci number is the sum of the two
previous fibonacci numbers.&amp;#34;&lt;/p&gt;
&lt;p&gt;
It also seems that when students find the Fibonacci number problem
challenging to solve as beginners without recursion. The whole a
becomes b. b becomes c thing can be tricky for beginners. In  my
experience, they find the recursive solution to be more natural. This
is also interesting because they usually don&amp;#39;t find recursive
factorial more natural than a loop (assuming they learned loops
first).&lt;/p&gt;
&lt;p&gt;
Next, the slowness of the solution is feature, not a bug. It&amp;#39;s a
platform to talk about how recursion isn&amp;#39;t always the answer but you
can think about a problem recursively and if the solution isn&amp;#39;t right
it might lead you to a better solution. This comes up later with
dynamic programming. Just last year (he he) during Advent of Code I
ended up solving one of the problems via dynamic programming. How did
I get there? Thinking about the problem recursively. &lt;/p&gt;
&lt;p&gt;
Here you get a great platform for now comparing solutions - iterative,
recursive, tail recursive, memoization - take it as far as you want.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-3&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-3&#34;&gt;
Euclid&amp;#39;s algorithm 
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-3&#34; class=&#34;outline-text-3&#34;&gt;
&lt;p&gt;
I can&amp;#39;t comment on Euclid&amp;#39;s algorithm since I can&amp;#39;t recall ever
teaching it as part of recursion so I&amp;#39;ll substitute Newton&amp;#39;s method
for square root approximation. &lt;/p&gt;
&lt;p&gt;
The thing is that here, the goal isn&amp;#39;t really recursion. It&amp;#39;s just a
problem that can be tackled with either recursion or iteration. The
reason it&amp;#39;s a neat problem is because you can talk about floating
point accuracy issues along with how close of an approximation you
might want or need. &lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-4&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-4&#34;&gt;
Towers of Hanoi
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-4&#34; class=&#34;outline-text-3&#34;&gt;
&lt;p&gt;
Finally we get the Towers of Hanoi. Sure it&amp;#39;s contrived but it can
also be fun and by being a new and different problem students can try
to use any strategies that might lead to a solution, recursive or
otherwise:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;try some small examples&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;see if examples relate to each other&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;base case?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;etc.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The big deal though is that Towers of Hanoi isn&amp;#39;t really about Towers
of Hanoi - it&amp;#39;s really a platform to talk about all sorts of good
stuff. I wrote all about it &lt;a href=&#34;https://cestlaz.github.io/posts/2010-01-10-towers-of-hanoi/&#34;&gt;a decade ago&lt;/a&gt;. &lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-5&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-5&#34;&gt;
Other stuff
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-5&#34; class=&#34;outline-text-3&#34;&gt;
&lt;p&gt;
Now, of course you can introduce recursion in other ways particularly
if you use a language like Scheme. &lt;/p&gt;
&lt;p&gt;
Bottom line is that without taking into considerations lots of other
factors - student backgrounds, teacher comfort. Time, experience,
facilities, goals and desired aoutcomes, and more you can&amp;#39;t really say
one way is right or one way is wrong.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Final thoughts on Advent of Code 2020</title>
      <link>https://cestlaz.github.io/post/advent-2020-final-thoughts/</link>
      <pubDate>Sun, 27 Dec 2020 15:57:22 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/advent-2020-final-thoughts/</guid>
      <description>
&lt;p&gt;
Time for some final thoughts on &lt;a href=&#34;https://adventofcode.com/&#34;&gt;Advent of Code 2020&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;
This was my sixth Advent of Code but the first time I completed all 25
days. Better than last year&amp;#39;s 31 and a whole lot better than my
weakest effort of 11 stars in 2017. I managed to find the time to
finish all but two on the day they were released and finished those
two on Christmas morning. This was also the first year I wrote all my
solutions in Clojure and I also made a bunch of blog posts and videos
(linked on the bottom of this post).&lt;/p&gt;
&lt;p&gt;
From my point of view 2020 was the best AoC to date and I&amp;#39;m not just
saying that because I finished all the problems. Well, maybe I am but
it&amp;#39;s really because the content and release of content lent itself to
my completing all the problems.&lt;/p&gt;
&lt;p&gt;
Before jumping in to my specific commentary I want to remind readers
that anyone&amp;#39;s perceptions of an event like this will be biased. If
there&amp;#39;s an aspect that I particularly liked you can bet there&amp;#39;s
someone else out there who didn&amp;#39;t like it.&lt;/p&gt;
&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
Overall content
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;
As usual a wide range of topics were covered including binary numbers,
pattern matching, simulation, dynamic programming, mathy stuff,
parsing, graph algorithms and more. &lt;/p&gt;
&lt;p&gt;
I didn&amp;#39;t find myself totally lost on any questions. There were some
problems that at least to me seemed to require graph algorithms and
one where dynamic programming or at least memoization was a boon but
for the most part it seemed that problems were indeed
approachable. Even the math day that had a bunch of reddit chatter
over the Chinese Remainder Theorem could be done without knowing about
the CRM. That was good because I had never heard of it (and if any of
the redditors who mentioned that it should  common knowledge, it
shouldn&amp;#39;t - I have an undergrad in CS and a Masters in CS along wit 30
years of teaching and this is the first time I&amp;#39;ve seen it). &lt;/p&gt;
&lt;p&gt;
In past years there always seemed to be a few problems that you needed
some preexisting knowledge to attempt. I had no problem with that - no
need to have  to finish all the problems and there&amp;#39;s nothing wrong
with hitting up reddit, learning something new and then tackling the
problem. This year it seemed that the problems more directly led to
the knowledge. I&amp;#39;ll talk about this more later. &lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
Problem size
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;
For the most part the problems were the perfect size for me. I&amp;#39;d read
the problems when I woke up, work on part 1 after my run and then part
2 later in the day - at least that was the ideal - bugs and life
sometimes got in the way. None of the problems required pages and
pages of code for the solutions which I liked. Problems were clever
and interesting but led to moderately sized solution. &lt;/p&gt;
&lt;p&gt;
In past years, the weekend problems were longer and/or harder. The
logic being that there&amp;#39;s more time to work on them. I never liked
that. AoC is great but it&amp;#39;s an add on. It&amp;#39;s an add on to work during
the week but it&amp;#39;s an add on to family time on the weekend. I liked
that this year the only weekend problem that was much larger and longer
was day 20 - the image reconstruction. &lt;/p&gt;
&lt;p&gt;
This is not to say that some problems didn&amp;#39;t take a good deal of time
but rather that once you had an approach you didn&amp;#39;t sit down and say
&amp;#34;oh man, now I have to write hundreds of lines of code to implement
this.&amp;#34;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-3&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-3&#34;&gt;
particularly nice problems 
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-3&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;
In spite of my not finishing part 2 until the last day, I loved day
20 - Jurassic Jigsaw. It was a little long and I spend more time than
I care to admit on debugging a really silly error but I loved the
problem.&lt;/p&gt;
&lt;p&gt;
Why? &lt;/p&gt;
&lt;p&gt;
First, it had staged difficulty -&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Parse the data into a reasonable representation&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Do a partial edge matching for part 1 (not so hard)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Do the harder / longer matching to reconstruct the image&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Remove the border and solve the problem.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Second, you actually discovered something - you &lt;strong&gt;found&lt;/strong&gt; sea
monsters!!!! You had a problem with an &amp;#34;unknown&amp;#34; solution and you
figured it out. Contrast that with say, day 2 where you just had to
validate passwords. That was also a fun problem but there was no big
reveal. It was really cool to decode your image and actaully find the
hidden monsters. &lt;/p&gt;
&lt;p&gt;
Day 16 and 21 allowed for similar discovery at the end but not quite
as cool. I liked 16 very much but had a hard time getting my head
around the example for 21. Still a cool problem.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-4&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-4&#34;&gt;
Teachable stuff
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-4&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;
As usual, I found a lot that I liked as a teacher in AoC. I love that
many of the problems introduce problem solvers to new things. For me,
the Chinese Remainder Theorem was new even though I only discovered it
via the subreddit. Cellular Automata was prominently featured
this year, binary explicitly mentioned as was recursion. &lt;/p&gt;
&lt;p&gt;
The recursion problem was particularly nice. The setup led to and, if
I recall, explicitly mentioned recursion. It also talks about a key
challenge - data mutability. The question states that after returning
from a &amp;#34;subgame&amp;#34; - the recursion - you have to continue the original
game from where it left off - state management. If you&amp;#39;re language
passes references in your calls this could lead to trouble. I&amp;#39;m
guessing (hoping?) that for people who solved that day who were new to
recursion got a deeper understanding than just through the usual n!
and such.&lt;/p&gt;
&lt;p&gt;
Another thing I liked was the spiraling. That, in teacher talk, is
when you go back to an earlier topic. This year had three questions
based on Cellular Autoamta. The first was the basic, the next took you
to a higher dimension and the third to a different shape. Each one
reviewed and extend fro the earlier problem. I loved it. This might
sound similar to last year&amp;#39;s intcode but the difference is that evne
if you didn&amp;#39;t complete the earlier problems you had a shot at the
latter ones. With Intcode if you had something wrong with your earlier
interpreter you were out of luck.&lt;/p&gt;
&lt;p&gt;
The allergens problem also allowed for the use of the same method you
used to solve the boarding pass problem. &lt;/p&gt;
&lt;p&gt;
Loved the spiraling.&lt;/p&gt;
&lt;p&gt;
I could probably go on but this post is already long enough.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-5&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-5&#34;&gt;
Links
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-5&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;
I&amp;#39;ll finish off with links to my earlier posts on Advent of Code.&lt;/p&gt;
&lt;p&gt;
Already looking forward to next year.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://cestlaz.github.io/post/advent-2020-leadin.&#34;&gt;advent-2020-leadin.&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://cestlaz.github.io/post/advent-2020-day-01&#34;&gt;advent-2020-day-0&lt;/a&gt;1&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://cestlaz.github.io/post/advent-2020-day02&#34;&gt;advent-2020-day02&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://cestlaz.github.io/post/advent-2020-day03&#34;&gt;advent-2020-day03&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://cestlaz.github.io/post/advent-2020-day04&#34;&gt;advent-2020-day04&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://cestlaz.github.io/post/advent-2020-day05&#34;&gt;advent-2020-day05&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://cestlaz.github.io/post/advent-2020-day06&#34;&gt;advent-2020-day06&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://cestlaz.github.io/post/advent-2020-day0708&#34;&gt;advent-2020-day0708&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://cestlaz.github.io/post/advent-2020-day0910&#34;&gt;advent-2020-day0910&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://cestlaz.github.io/post/advent-2020-day11&#34;&gt;advent-2020-day11&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://cestlaz.github.io/post/advent-2020-day14&#34;&gt;advent-2020-day14&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://cestlaz.github.io/post/advent-2020-day16&#34;&gt;advent-2020-day16&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://cestlaz.github.io/post/advent-2020-1718&#34;&gt;advent-2020-1718&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://cestlaz.github.io/post/advent-2020-19-23&#34;&gt;advent-2020-19-23&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://cestlaz.github.io/post/advent-2020-21-24&#34;&gt;advent-2020-21-24&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://cestlaz.github.io/post/advent-2020-final-thoughts&#34;&gt;advent-2020-final-thoughts&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>A Teacher Looks at Advent of Code 2020 - Days 21 and 24</title>
      <link>https://cestlaz.github.io/post/advent-2020-21-24/</link>
      <pubDate>Thu, 24 Dec 2020 11:43:14 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/advent-2020-21-24/</guid>
      <description>
&lt;p&gt;
&lt;a href=&#34;https://adventofcode.com/2020/day/24&#34;&gt;Day 24&lt;/a&gt; didn&amp;#39;t take that much time so I had a chance to go back and
finish &lt;a href=&#34;https://adventofcode.com/2020/day/21&#34;&gt;day 21&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;
As usual, all my code is up &lt;a href=&#34;https://github.com/zamansky/advent2020&#34;&gt;here&lt;/a&gt;. &lt;/p&gt;
&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
Day 21
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;
&lt;a href=&#34;https://adventofcode.com/2020/day/21&#34;&gt;Problem Link&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;
It took me a while to get my head around this example. You have a set
of recipes. Each recipe has a list of ingredients and a list of
allergens. Your job for part 1 was basically to determine which
ingredients don&amp;#39;t contain any allergens. Part 2 had you determining
which ingredient had which allergen.&lt;/p&gt;
&lt;p&gt;
Part of what I think made this hard was that ingredients were just
random strings of letters as opposed to actual ingredients or at least
pronounceable words or letter strings.&lt;/p&gt;
&lt;p&gt;
The key part of the description as that each allergen was present in
&lt;strong&gt;exactly one&lt;/strong&gt; ingredient and each ingredient had &lt;strong&gt;at most&lt;/strong&gt; one
allergen. &lt;/p&gt;
&lt;p&gt;
So, for part 1, the tact was for each allergen, take all the recipes
that had it. In the example, the first and second recipes had
dairy (one indexing). Since only one ingredient can have the dairy
allergen the that ingredient must be in both lists.&lt;/p&gt;
&lt;p&gt;
If you take all the recipes that have the dairy allergen and take each
of their lists of ingredients as a set and find all their
intersections, you&amp;#39;ll be left with all the ingredients that can have
the dairy allergen.&lt;/p&gt;
&lt;p&gt;
Do this with all the allergens and you&amp;#39;ll have all the ingredients
that could contain them. The other igredients are safe and lead to the
answer to part 1.&lt;/p&gt;
&lt;p&gt;
Part 2 had you identifying each ingredient / allergen
pair. Fortunately, the data set we ended up with for part 1 - each
allergen and it&amp;#39;s list of possible ingredients was made to order. One
of them had only one ingredient per allergen. We could identify that
one and then remove that ingredient from the remaining allergen&amp;#39;s
lists. Then repeat to find the next one and then the next. This is
similar to the solution to day 16. Of course this isn&amp;#39;t a general
solution but fortunately the data was all set up for us.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
Day 24
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;
&lt;a href=&#34;https://adventofcode.com/2020/day/24&#34;&gt;Problem Link&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;
Back to Cellular Automata!!!!!! The catch this time is the world is a
hex grid. This means that each cell has six neighbors so using a 2D
array or similar representation seems like an even worse idea than it
was for the 3D and 4D problems earlier this month.&lt;/p&gt;
&lt;p&gt;
Even before representing the world parsing was an issue. Since a given
cell can have neighbors to the east, west, northeast, northwest,
southeast or southwest, instructions are given with a line of &amp;#34;moves&amp;#34;
describing a tile to flip starting from 0,0. &lt;/p&gt;
&lt;p&gt;
For example, the line &amp;#34;EEE&amp;#34; would move three east from the origin and
flip that tile while &amp;#34;ESEE&amp;#34; would move one east, one southest and then
one further east and flipt the tile there.&lt;/p&gt;
&lt;p&gt;
Fortunately, this wasn&amp;#39;t too bad. As we traverse down the line, if we
see an &lt;strong&gt;e&lt;/strong&gt; or a &lt;strong&gt;w&lt;/strong&gt; then the instruction is one character so we add
the instruction to a list of steps an then continue. Otherwise the
instruction is 2 characters so we take 2 and add the instruction adn
then proceed.&lt;/p&gt;
&lt;p&gt;
Next was the data representation. It seemed that a list of live cells
would again be the best solution. I figured on using this mapping: &lt;/p&gt;
&lt;table&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;E&lt;/td&gt;
&lt;td&gt;(-2,0)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;W&lt;/td&gt;
&lt;td&gt;(2,0)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;NE&lt;/td&gt;
&lt;td&gt;(-1,-1)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;NW&lt;/td&gt;
&lt;td&gt;(1,-1)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SE&lt;/td&gt;
&lt;td&gt;(-1,1)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SW&lt;/td&gt;
&lt;td&gt;(1,1)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;
I later found out that this is called &amp;#34;double coordinates.&amp;#34; Since
we&amp;#39;re not storing the full hex grid there&amp;#39;s no waste anyway and I
wasn&amp;#39;t planning on making a visualization so I didn&amp;#39;t worry about how
this would map to an actual screen.&lt;/p&gt;
&lt;p&gt;
Now, finding the coordinate of a tile was pretty easy. In Clojure
it&amp;#39;s: &lt;/p&gt;
&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;;; assume deltas is a lookup dictionary of the above mapping&lt;/span&gt;

  (&lt;span style=&#34;color:#66d9ef&#34;&gt;defn &lt;/span&gt;get-tile-location [steps]
    (reduce (&lt;span style=&#34;color:#66d9ef&#34;&gt;fn &lt;/span&gt;[loc step]
              (map + loc (&lt;span style=&#34;color:#a6e22e&#34;&gt;deltas&lt;/span&gt;  step))
              ) [&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] steps))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;
In Python it would look more like this: &lt;/p&gt;
&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# assume deltas is a dictionary with the above mapping&lt;/span&gt;
  &lt;span style=&#34;color:#75715e&#34;&gt;# and steps is a list of instructions [&amp;#34;e&amp;#34;,&amp;#34;w&amp;#34;,&amp;#34;se&amp;#34;, etc]&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; step &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; steps:
      loc &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [sum(x) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; zip(loc, deltas[step])]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;
We can now convert any input line of instructions to a coordinate. If
we write a routine to flip a tile we can now set up our world and
answer part 1.&lt;/p&gt;
&lt;p&gt;
Part 2 involved basically turning the part 1 world into a cellular
automaton. Fortunately, this was easy given the solution to earlier CA
problems. It as just a matter of updating the get-neighbors routine
and the rule to go from one generation to the next and we&amp;#39;re done.&lt;/p&gt;
&lt;p&gt;
I enjoyed this - it was a nice twist on the earlier CA
questions. First we had a simple CA, then higher dimensions and now
changing the layout of the world but still within 2 dimensions. Once
we had a way of representing a tile and mapping from a tile to its
neighbors we had already solved the problem.&lt;/p&gt;
&lt;p&gt;
One more day to go but it&amp;#39;s been a nice run of problems.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>A Teacher Looks at Advent of Code 2020 - 19 through 23</title>
      <link>https://cestlaz.github.io/post/advent-2020-19-23/</link>
      <pubDate>Wed, 23 Dec 2020 15:09:38 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/advent-2020-19-23/</guid>
      <description>
&lt;p&gt;
A few days have past so it&amp;#39;s time for an update. Two more days to go
and while I haven&amp;#39;t completed all the problems, I have accumulated 43
stars which is a personal best. Given the nature of the problems I&amp;#39;m
missing, I might even go back and do them at some point. Of course, I
may very well also just crash out on the final two days.&lt;/p&gt;
&lt;p&gt;
As usual, all my code is up &lt;a href=&#34;https://github.com/zamansky/advent2020&#34;&gt;here&lt;/a&gt;. &lt;/p&gt;
&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
Day 19
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;
&lt;a href=&#34;https://adventofcode.com/2020/day/19&#34;&gt;Problem Link&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;
Not a whole lot to say about this one. It&amp;#39;s the weekend and AoC has
traditionally had longer / harder problems over the weekends. I was
surprised when the first weekend&amp;#39;s problems - 12 and 13 weren&amp;#39;t
significantly longer than the surrounding days. &lt;/p&gt;
&lt;p&gt;
I read over this and it screamed &lt;strong&gt;parser&lt;/strong&gt; and to be honest, I really
wasn&amp;#39;t up for writing a parser on a Saturday morning. Instead, I
cheaped out.  I looked for a Clojure parser generator and found
&lt;a href=&#34;https://github.com/engelberg/instaparse&#34;&gt;instaparse&lt;/a&gt;. What&amp;#39;s more, instaparse supported input in the form of the
provided AoC data so I literally just had to read the grammar into
instaparse and run it on the data for the answer. Part 2 was pretty
much the same.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
Day 20
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;
&lt;a href=&#34;https://adventofcode.com/2020/day/20&#34;&gt;Problem Link&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;
This was the big one. Basically taking 144 tiles and figuring out how
to form them in an image. &lt;/p&gt;
&lt;p&gt;
I finished part 1. I read in all the tiles and then for each, compared
it&amp;#39;s edges with the edges of the other tiles (and the reverse of the
edges to account for transformations). This told me how many other
tiles each tile connects with. Central tiles each connect to 4 other
ties, edges, to three but corners only to 2. Part 1 just had you find
the corners so it wasn&amp;#39;t too big a deal.&lt;/p&gt;
&lt;p&gt;
Part 2 involves assembling the image and then finding sea monsters. I
haven&amp;#39;t done this yet. Armed with the corner, it should be easy to
find the top row and then build the image going down. &lt;/p&gt;
&lt;p&gt;
I think it&amp;#39;s going to be a bear to code though since each tile has to
be transformed via flipping and/or rotating into the correct
orientation.&lt;/p&gt;
&lt;p&gt;
I&amp;#39;m hoping to get back to it. We&amp;#39;ll see though. &lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-3&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-3&#34;&gt;
Day 21
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-3&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;
&lt;a href=&#34;https://adventofcode.com/2020/day/21&#34;&gt;Problem Link&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;
Haven&amp;#39;t done this one yet. Just couldn&amp;#39;t get my head around the
example on an early Monday morning. &lt;/p&gt;
&lt;p&gt;
I don&amp;#39;t know if I&amp;#39;ll finish question 20 but I do really hope to get
back to give this one a go.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-4&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-4&#34;&gt;
Day 22
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-4&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;
&lt;a href=&#34;https://adventofcode.com/2020/day/22&#34;&gt;Problem Link&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;
Part 1 here was pretty straightforward - you had a few rules:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;if player 1&amp;#39;s deck is empty, player 2 wins&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;if player 2&amp;#39;s deck is empty, player 1 wins&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;otherwise both players draw a card and whoever drew the higher card gets both, they go on the
back of the winners deck and you continue play.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That&amp;#39;s it. Basically just run the simulation.&lt;/p&gt;
&lt;p&gt;
Part 2 added a recursive subgame. Under certain circumstances you
pause the current game and do a little subgame. The catch is that you
have to save the state of the current game and when the subgame or
subgames end, you continue the suspended game from where you left off.&lt;/p&gt;
&lt;p&gt;
This means that if you are representing your decks with arrays or some
other data structure where you can change the elements you have to be
careful. In Clojure, however, where data is immutable by default you
don&amp;#39;t have to worry about that. &lt;/p&gt;
&lt;p&gt;
I was basically able to just rewrite my play routine for the new
rules and whenever we had to go to a subgame, I just made a
traditional recursive call. My guess is that if I had coded this up
originally in Java or C++ I probably would have had a harder time
going from part 1 to part 2. On the other hand, there were some
problems with Java or C++ would have made my part 1 to part 2
transitions easier - depends on the problem. &lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-5&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-5&#34;&gt;
Day 23
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-5&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;
&lt;a href=&#34;https://adventofcode.com/2020/day/23&#34;&gt;Problem Link&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;
This was the fun one - at least from a teacher&amp;#39;s point of view. &lt;/p&gt;
&lt;p&gt;
Like day 22 you had to implement a game. You set up a bunch of
numbered cups in a circle and then: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;remove the three cups right after the current cup&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;find out where they should be reinserted based on the game rules
(see the problem link for details)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;reinsert those three cups at that reinsertion point.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;move from the current cup to the next cup.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I did part 1 using a simple list and list manipulations. I used
Clojure but the python equivalent would be to have a list representing
all the cups, move around ti with mod, and remove cups and add them
using slices.&lt;/p&gt;
&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# given board = [3,8,9,1,2,5,4,6,7&lt;/span&gt;

  &lt;span style=&#34;color:#75715e&#34;&gt;# to get the next board state&lt;/span&gt;
  current &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; board[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]
  to_remove &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; board[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;]
  remaining &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; board[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:]
  idx &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; find_target(board,remove)
  newboard &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; remaining[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:idx] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; to_remove &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; remaining[idx:] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; [current]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;
I might have the indexing a little off and the &lt;code&gt;find_target&lt;/code&gt; routine
isn&amp;#39;t shown adn might have different parameters. As I&amp;#39;ve said, I wrote
my solution in Clojure. This should give the general idea though. &lt;/p&gt;
&lt;p&gt;
You basically had to run through 10 turns to find the answer.&lt;/p&gt;
&lt;p&gt;
Part 2 added a twist - the game board was now &lt;strong&gt;one million&lt;/strong&gt; in size
and you had to run the simulation through &lt;strong&gt;ten million&lt;/strong&gt; turns. No way
was my part 1 solution going to work. &lt;/p&gt;
&lt;p&gt;
The problem called for something that required fewer list traversals
and builds and where it would be quick and easy to find a given
element. &lt;/p&gt;
&lt;p&gt;
My first thought was to build a traditional linked list. That would
help but it would also require a number of linear traversals.&lt;/p&gt;
&lt;p&gt;
Next thought? How about a dictionary? &lt;/p&gt;
&lt;p&gt;
If you set up a dictionary where the keys are the nodes and the values
represent the pointer to the next node you could really quickly and
easily both traverse and manipulate the data set. &lt;/p&gt;
&lt;p&gt;
For example, if your board was [3,8,9,1] then you&amp;#39;d use this
dictionary to represent it - remember the 1 wraps back around to
the 3.
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;  nodes &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; : &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;,
           &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt; : &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;,
           &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt; : &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,
           &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; : &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;
So if you&amp;#39;re current node was represented in a variable &lt;code&gt;current&lt;/code&gt; the
three nodes you&amp;#39;ll remove would be &lt;code&gt;[nodes[current],
noeds[nodes[current]], nodes[nodes[nodes[current]]] ]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;
As an added bonus, the question pointed out that your data set would
have every positive integer represented once. That is, part 1 had a 9
item list with all the values 1 through 9 and the million item one had
values 1 through 1 million. This makes finding the insertion point
both easy and fast.&lt;/p&gt;
&lt;p&gt;
It turns out that I think the dictionary based solution is actually
cleaner than the list one in addition to being faster.&lt;/p&gt;
&lt;p&gt;
This solution was no speed demon - still took ~40 seconds to get an
answer but that&amp;#39;s good enough for me. &lt;/p&gt;
&lt;p&gt;
Of the problems I wrote up today, this one was my favorite. Students
typically think of data structures as what they are - if they have an
array, use it as an array, a linked list is a linked list and a
dictionary or hash table is, well, you know. If you need a linked
list, you need to make a traditional linked list - not so. this is a
great example of using a dictionary as a hash table. There are
conceptual data structures and actual in computer
representations. Often you use the implementation directly - use a
hash table to store data for lookup or use an array to represent a
list. It can be very empowering though when the student sees that
the implementations are just tools in the belt and they can be used in
all sorts of interesting ways.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>A Teacher Looks at Advent of Code 2020 - Days 17 and 18</title>
      <link>https://cestlaz.github.io/post/advent-2020-1718/</link>
      <pubDate>Fri, 18 Dec 2020 12:35:57 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/advent-2020-1718/</guid>
      <description>
&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
Day 17
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;
&lt;a href=&#34;https://adventofcode.com/2020/day/17&#34;&gt;Day 17&lt;/a&gt; brought back Cellular Automata. It was a nice follow up to &lt;a href=&#34;https://cestlaz.github.io/post/advent-2020-day11/&#34;&gt;day
11&lt;/a&gt;. In my &lt;a href=&#34;https://cestlaz.github.io/post/advent-2020-day11/&#34;&gt;writeup&lt;/a&gt; I talked about data representation - how a Cellular
Automoton like Conway&amp;#39;s game of life is a nice 2D array project in a
class like APCS-A but multi dimensional arrays are only one way to
represent a cellular automaton. Day 17 really drove that home. &lt;/p&gt;
&lt;p&gt;
The actual rules were pretty simple - if a cell is active and has 2 or
3 active neighbors it stays active. If it&amp;#39;s inactive and has three
active it becomes active. Otherwise the cell is inactive. &lt;/p&gt;
&lt;p&gt;
The catch for part 1 is that this CS is in three dimensions. Each and
a cell&amp;#39;s neighbors are defined as all coordinates that differ by one
in any of the three dimensions. So, if a cell is at an (x,y,z) location
it&amp;#39;s neighbors will be at (x+1,y,z), (x-1,y,z), (x+1,y+1,z),
(x+1,y-1,z), etc. for 26 neighbors in all. &lt;/p&gt;
&lt;p&gt;
You could use a list  within a list within a list or a three
dimensional array to represent your world but that&amp;#39;s tricky and error
prone. What&amp;#39;s worse, part 2 took the CA into the fourth dimension.&lt;/p&gt;
&lt;p&gt;
Better is to just keep a list or set of active cells. Then the problem
becomes pretty easy. You need to be able to:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Find all of a cell&amp;#39;s neighbors - this is pretty easy because you
can iterate over all the +1 and -1 possibilities for each of the x,
y, and z values.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Find all the potential cells for the next state - this is also
pretty easy because it&amp;#39;s the set of all cells that are currently
active along with all of their neighbors. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Count a given cell&amp;#39;s active neighbors - this is easy once you&amp;#39;ve
done the find neighbors routine. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A way to test if a cell is active which is just checking to see if
it&amp;#39;s in your active cells list or set.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Then, it&amp;#39;s pretty easy to run the CA: 
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# pythonesque pseudocode &lt;/span&gt;
potential_cells &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; find_all_neighbors(current_active_cells)
new_cells &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; cell &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; potential_cells: 
  n &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; count_neighbors(cell)
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; is_active(cell) &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; (n&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; n&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;):
    new_cells&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(cell)
  &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; is_active(cell)) &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; n&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:
    new_cells&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(cell)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;
Then you just have to run generate new states until you get the
answer.&lt;/p&gt;
&lt;p&gt;
Part 2 extended the CA to 4 dimensions. If you had a multidimensional
array this would get super message but with a list of active cells,
the changes are minimal - just add an extra coordinate, update getting
the neighbors and you&amp;#39;re good to go.&lt;/p&gt;
&lt;p&gt;
This is a case of where thinking through your data representation can
be a big win.&lt;/p&gt;
&lt;p&gt;
Clojure code &lt;a href=&#34;https://github.com/zamansky/advent2020/blob/main/src/day17.clj&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
Day 18
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;
&lt;a href=&#34;https://adventofcode.com/2020/day/18&#34;&gt;Day 18&lt;/a&gt; was all about evaluating math expressions. For part 1 you had
parenthesized expressions consisting of numbers * and + that you had
to evaluate but you had to do it by first doing parens then left to
right - multiplication was not a higher precedence.&lt;/p&gt;
&lt;p&gt;
This sounds like a parsing first problem but it turns out I was able
to exploit some of Clojure&amp;#39;s language features. Looking at the
subreddit after solving it seems that a bunch of other languages also
have features that could be exploited.&lt;/p&gt;
&lt;p&gt;
Clojure represents data (and programs) as &lt;a href=&#34;https://en.wikipedia.org/wiki/S-expression&#34;&gt;S-Expressions&lt;/a&gt; - basically
stuff in parens. As a prefix language, instead of writing 10+20, in
Clojure you&amp;#39;d write &lt;code&gt;(+ 10 20)&lt;/code&gt;, that is  run the plus function on 10
and 20. If you have something lie &lt;code&gt;(+ 10 (* 20 3))&lt;/code&gt;, Clojure has to
evaluate the inner S-Expression (sexp) before it can add that to +10
so Clojure can do the parsing for us. We can take an input string and
convert it to an sexp using &lt;code&gt;read-string&lt;/code&gt;  but if we just try to do
&lt;code&gt;(read-string &amp;#34;1 + 2 + 3&amp;#34;)&lt;/code&gt; we&amp;#39;d get an error because &amp;#34;1 + 2 + 3&amp;#34;
isn&amp;#39;t a valid sexp so we just surround it by parens:&lt;/p&gt;
&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;def &lt;/span&gt;equation-sexp (&lt;span style=&#34;color:#a6e22e&#34;&gt;read-string&lt;/span&gt; (str &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;(&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1 + 2 * 3 + (4 * 5 )&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;)&amp;#34;&lt;/span&gt;)))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;
The above would leave us with the sexp (1 + 2 * 3 + (4 * 5 )).&lt;/p&gt;
&lt;p&gt;
Next, forgetting the inner parens, we can write a function that will
evaluate an sexp of the form (1 + 2 * 3 + …) etc. Basically, this can
be done with a reduce. Start with the first value then take the rest
of the list two at a time, the first of each pair is an operator and
the second is an operand so apply the operand to the other number in
the pair and your overall result so far.&lt;/p&gt;
&lt;p&gt;
In Clojure it looks like this: &lt;/p&gt;
&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;defn &lt;/span&gt;part1-eval [f &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; r]
  (reduce (&lt;span style=&#34;color:#66d9ef&#34;&gt;fn &lt;/span&gt;[ans [op next]]
            (apply op [ans next] )) f (&lt;span style=&#34;color:#a6e22e&#34;&gt;partition&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; r)))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;
Next, we insert that function name to the start of each sexp so 
(1 + 2 * 3 + (4 * 5*)) becomes (part1-eval 1 + 2 * 3 + (part1-eval 4 *
5)). Finally we can do a  Clojure &lt;strong&gt;eval&lt;/strong&gt; on this form which will run
part1-eval on the rest of the sexp which will first run part1-eval on
the 4 * 5, that will return the 20 and then the first part1-eval will
finish it&amp;#39;s calculations to give you the answer. &lt;/p&gt;
&lt;p&gt;
Part 2 was similar but there you had to perform addition before
multiplication. All that was necessary was write a part2-eval function
that would stand in for the part1-eval.&lt;/p&gt;
&lt;p&gt;
The idea is to take an sexp like (1 + 2 * 3 + 4 * 5) we first split this
list around the * this gives us (1 + 2) (&lt;strong&gt;) (3 + 4) (&lt;/strong&gt;) (5). We then
filter this to remove the non numbers which gives (1 2) () (3 4) (5)
(). Then we remove the empty lists: (1 2) (3 4) (5). Add the elements
of each list: 3 7 5 and then multiply them together.&lt;/p&gt;
&lt;p&gt;
All the code is &lt;a href=&#34;https://github.com/zamansky/advent2020/blob/main/src/day18.clj&#34;&gt;here&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;
I like day 17 a lot or some variant for students to discuss data
representations but I think 18 is a little more advanced and probably
wouldn&amp;#39;t touch it in an early CS class - it was fun to work through
though :-). &lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>A Teacher Looks at Advent of Code 2020 - day 16</title>
      <link>https://cestlaz.github.io/post/advent-2020-day16/</link>
      <pubDate>Wed, 16 Dec 2020 17:12:56 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/advent-2020-day16/</guid>
      <description>
&lt;p&gt;
Today&amp;#39;s problem was a fun one to solve. Why was it fun? Stay tuned,&lt;/p&gt;
&lt;p&gt;
The basic gist is that you have a plane ticket which is a set of
numbers but you don&amp;#39;t know which number maps to which category - row,
seat, gate, etc. You also know the number ranges for each
category. For example, row might be a number between 6 and 11 or 33
through 44 while a seat might be 13 through 40 or 45 through 50. &lt;/p&gt;
&lt;p&gt;
Finally, you also can see a number of nearby tickets - each also as
tring of numbers. &lt;/p&gt;
&lt;p&gt;
For part 1 you had to determine how many of the nearby tickets are
valid. A ticket is valid if all the numbers on it fall into at least
one category range. &lt;/p&gt;
&lt;p&gt;
See the &lt;a href=&#34;https://adventofcode.com/2020/day/16&#34;&gt;full description&lt;/a&gt; for all the details. &lt;/p&gt;
&lt;p&gt;
First up - parsing - a little cumbersome but not too bad.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Split the input into the three main sections - categories, your
ticket, nearby tickets&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Convert the categories into a usable form&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Convert your ticket into a list of numbers&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Convert the nearby tickets into a list of tickets each one being a
list of numbers.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Taking each step in turn and it&amp;#39;s not too bad - particularly if you&amp;#39;re
comfortable with regular expressions.&lt;/p&gt;
&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
part 1
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;
Representing the categories leads us to our first interesting
decision. How will we test to see if a ticket is valid and based on
that how will we represent the categories?&lt;/p&gt;
&lt;p&gt;
Each category has two ranges connected with an &lt;strong&gt;or&lt;/strong&gt;:&lt;/p&gt;
&lt;pre class=&#34;example&#34;&gt;
row: 6-11 or 33-44
seat: 13-40 or 45-50
&lt;/pre&gt;
&lt;p&gt;
One could make a construct to hold the bounds, loop through the nearby
tickets and for each value, run an if statement with the two ranges
connected by an &lt;strong&gt;or&lt;/strong&gt;. &lt;/p&gt;
&lt;p&gt;
This is where a class can talk about code vs data - a topic I&amp;#39;m really
fond of.&lt;/p&gt;
&lt;p&gt;
Instead of taking the above range and having some test like: &lt;/p&gt;
&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; number &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; ticket:
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (number &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; low1 &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; number &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; high1) &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; \
     (number &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; low2 &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; number &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; high2):
       do something&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;
or specifically for the row example:&lt;/p&gt;
&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; number &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; ticket:
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (number &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; number &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; \
     (number &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;33&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; number &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;44&lt;/span&gt;):
       do something&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;
you could make a set with all the possible seats  and then just test
to see if the seat was in the set: &lt;/p&gt;
&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;r1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; set( range(low1,high&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;))
r2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; set( range(low2,hight2&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;))
valid_seats &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; r1&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;union(r2)

&lt;span style=&#34;color:#75715e&#34;&gt;# then later&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; seat &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; valid_seats:
  do something&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;
I just find this more elegant. &lt;/p&gt;
&lt;p&gt;
For part 1 I just made a big set with all the valid seats and then
checked each ticket to see if each if its numbers were in the valid
seats. &lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
part 2
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;
For part 2 first you had to remove all the invalid tickets from the
nearby tickets. Since you figured out how to identify a valid ticket
in part one this shouldn&amp;#39;t be too ahrd.&lt;/p&gt;
&lt;p&gt;
Then we have to sleuth out which column from the tickets represented
which category. This would make a great group activity in a class,
particularly with an interactive language. This is a great data
exploration and representation problem.&lt;/p&gt;
&lt;p&gt;
To get more data, I thought I&amp;#39;d write a routine to pull all of one
column from the nearby tickets. Then I could see if all the values in
that row were valid for a particular category. For example, are all
the first numbers of all the tickets valid numbers for row. If so,
that column could represent row. Of course it could also represent
something else as well.&lt;/p&gt;
&lt;p&gt;
Now that i could test to see if a column is valid for a category I
decided to build some data. I built a list of all the possible
categories for each row.&lt;/p&gt;
&lt;p&gt;
Part of it looked sort of like this (but in clojure):&lt;/p&gt;
&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;[ [&lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;, [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;wagon&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;arrival-station&amp;#34;&lt;/span&gt;] ],
  [&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;, [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;wagon&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;arrival-station&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;route&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;train&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;row&amp;#34;&lt;/span&gt;]]
&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;
Examining this table, I noticed that one row had only one category,
another had only 2 then one three etc. Great - we can now solve this
by plugging in the row we know, then the next one, then the next etc.&lt;/p&gt;
&lt;p&gt;
The explorations led to an easy answer. I sorted the list and looped
through. At each iteration I: &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Added the current category and its associated row to the solution
set.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Removed that category from the rest of the lines&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;When done we had a dictionary with a mapping from category to
row. From there it was pretty simple to find the part 2 answer.&lt;/p&gt;
&lt;p&gt;
Lots of good stuff here. I love the data explorations and the way it
can lead to a pretty straightforward solution.&lt;/p&gt;
&lt;p&gt;
Full solution in clojure can be found here: &lt;a href=&#34;https://adventofcode.com/2020/day/16&#34;&gt;https://adventofcode.com/2020/day/16&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;
So far I&amp;#39;ve managed to complete each day - 32 stars. That beats my 31
from last year adn my top year of 40 back in 2016. Tomorrow I give my
last exams and grading ca really begin so we&amp;#39;ll see if I can keep
going but so it&amp;#39;s been a fun Advent of Code year so far.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>A teacher looks at Advent of Code day 14</title>
      <link>https://cestlaz.github.io/post/advent-2020-day14/</link>
      <pubDate>Mon, 14 Dec 2020 14:30:47 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/advent-2020-day14/</guid>
      <description>&lt;p&gt;
Time for &lt;a href=&#34;https://adventofcode.com/2020/day/14&#34;&gt;Day 14&lt;/a&gt;!!!&lt;/p&gt;
&lt;p&gt;
I didn&amp;#39;t write up day 12 but here&amp;#39;s a Clojure &lt;a href=&#34;https://www.youtube.com/watch?v=k8fvaAZRtts&amp;amp;feature=youtu.be&#34;&gt;video&lt;/a&gt; runthrough. I also
didn&amp;#39;t write up day 13 mostly because I hacked together my part 2 in
Python and still want to rewrite it in decent clojure. In any event,
all my solutions are up on &lt;a href=&#34;https://github.com/zamansky/advent2020&#34;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;
Day 14 had a few interesting things going on. At its core it&amp;#39;s a small
machine simulator where you have to deal with binary numbers. One of
the rubs is that the numbers are 36 digits which could be a problem if
your language / machine uses 32 bits to represent integers. &lt;/p&gt;
&lt;p&gt;
Right off, assuming you have large enough ints you have an interesting
choice. Do you work with the data them as numbers or do you just do
string manipulations. &lt;/p&gt;
&lt;p&gt;
I decided to do part 1 as numbers which leads to a nice little
exercise of using bitwise logic operations to turn bits on or off. &lt;/p&gt;
&lt;p&gt;
Part 2 was better solved, at least for me using string
manipulations. That part had a nice little recursive subproblem -
mapping wildcard values in the &amp;#34;mask&amp;#34; to all the possible combinations
of zeros and ones.&lt;/p&gt;
&lt;p&gt;
Both problems also had a bit of fun parsing and, at least for me, a
few neat clojure constructs. &lt;/p&gt;
&lt;p&gt;
I think you could turn this problem into a fun set of class
exercises. My code can be found &lt;a href=&#34;https://github.com/zamansky/advent2020/blob/main/src/day14.clj &#34;&gt;here&lt;/a&gt; and even if you don&amp;#39;t do Clojure,
you might want to check out the video runthrough:&lt;/p&gt;
&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/oVVHU7PDHyw&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;
</description>
    </item>
    
    <item>
      <title>A teacher looks at Advent of Code 2020 - Day 11</title>
      <link>https://cestlaz.github.io/post/advent-2020-day11/</link>
      <pubDate>Fri, 11 Dec 2020 15:00:43 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/advent-2020-day11/</guid>
      <description>&lt;p&gt;
Today was &lt;a href=&#34;https://en.wikipedia.org/wiki/Cellular_automaton&#34;&gt;Cellular Automaton&lt;/a&gt; Day at Advent of Code. You have a world
that&amp;#39;s usually represented as a grid of cells. Each cell can be in a
certain state. Given a certain state, the next state is determined by
simple rules like for a given cell how many of it&amp;#39;s neighbors are the
same color. &lt;/p&gt;
&lt;p&gt;
The most popular Cellular Automat is probably &lt;a href=&#34;https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life&#34;&gt;Conway&amp;#39;s Game of Life&lt;/a&gt;
where each cell can be either alive or dead in a given generation and
in the next generation the state will be determined by how many of its
neighbors are currently dead or alive. &lt;/p&gt;
&lt;p&gt;
I&amp;#39;ve always liked teaching with Celluar Automata and explored it
deeply in the intro course I designed at Stuy. NetLogo is perfect for
representing a CA (&lt;a href=&#34;https://cestlaz.github.io/posts/2016-01-15-shift-image/&#34;&gt;old post&lt;/a&gt;) and we even do things like using a CS to
&lt;a href=&#34;https://cestlaz.github.io/posts/2016-01-17-maze-ca/&#34;&gt;solve a maze&lt;/a&gt;. Good stuff.&lt;/p&gt;
&lt;p&gt;
Today&amp;#39;s problem set up a CA where each cell can be one of three
states - floor, occupied chair, unoccupied chair. The floor never
changed but the chairs can change from occupied to unoccupied and back
based on neighbors. I actually really like teh question. It&amp;#39;s posed as
passengers prefer to sit in s eats next to other empty seats which is
true and the overall problem is much more realistic and therefor
accessible than Conway&amp;#39;s game of life. I think I might lead with it if
I do CA again with my students. &lt;/p&gt;
&lt;p&gt;
You can find my Clojure solutions &lt;a href=&#34;https://github.com/zamansky/advent2020/blob/main/src/day11.clj&#34;&gt;here&lt;/a&gt;. They were pretty
straightforward. I spend too much time going down the &amp;#34;learn how to
write a lazy sequence in Clojure&amp;#34; rabbit hole for part 2 before just
writing it in a more traditional way.&lt;/p&gt;
&lt;p&gt;
To me there are a couple of interesting things at play when teaching
CA. The first is state management and synchronization. When beginners
work on a CA they frequently look at a cell, figure out it&amp;#39;s next
generation value and then replace the cell with its new value. Then,
later they look at a neighboring cell and when that cell looks at its
neighbors it gets the changed value not the original one. Clearly a
problem. &lt;/p&gt;
&lt;p&gt;
Writing a CA makes it clear that you have to keep your state clean
while you build a new state for the next generation. That&amp;#39;s an
important lesson to learn.&lt;/p&gt;
&lt;p&gt;
The other interesting teaching point is with data representation. CA
is frequently taught as a 2D array exercise. This makes sense -
simulations like Conway&amp;#39;s Game of Life work perfectly in a 2D array
and if you&amp;#39;re doing graphics with your class you can also get cool
animations through the generations. &lt;/p&gt;
&lt;p&gt;
That said, there are other valid representations that could be
superior at times. You might have a list of living cells or a hash
tabe of cells if you have more than 2 living states. This can be far
superior from a space efficiency point of view if you don&amp;#39;t have a lot
of living cells compared with your world size - say you have a CA with
a theoretically unlimited size. &lt;/p&gt;
&lt;p&gt;
So, there it is - thoughts on today&amp;#39;s problem. As I said, it was
pretty straightforward but I also really like the setup and will
probably use it in class at some point in the future.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>A Teacher looks at Advent of Code 2020 - days 9 and 10</title>
      <link>https://cestlaz.github.io/post/advent-2020-day0910/</link>
      <pubDate>Thu, 10 Dec 2020 16:52:45 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/advent-2020-day0910/</guid>
      <description>&lt;p&gt;
As we get closer to the end of the semester and time becomes scarcer
I&amp;#39;m wondering how many more I&amp;#39;ll finish. Barely had time to do days 9
and 10.&lt;/p&gt;
&lt;p&gt;
Not much to say about &lt;a href=&#34;https://adventofcode.com/2020/day/9&#34;&gt;day 9&lt;/a&gt; Part one was basically a rehash of day 1
part 1 but with a sliding widow. Part 2? I just brute force tried all
the subranges. I meant to go back to try to improve the solution but
didn&amp;#39;t have a chance. &lt;/p&gt;
&lt;p&gt;
Clojure code can be found &lt;a href=&#34;https://github.com/zamansky/advent2020/blob/main/src/day09.clj&#34;&gt;here&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;
&lt;a href=&#34;https://adventofcode.com/2020/day/10&#34;&gt;Day 10&lt;/a&gt; was more interesting. &lt;/p&gt;
&lt;p&gt;
I misread part 1 but ultimately, my solution was to: &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;read in the data&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;sort it&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;prepend a 0&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;append an additional value of the max + 3 to the end&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Then loop through comparing adjacent values and keep track of the
differences which can be 1, 2, or 3. &lt;/p&gt;
&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;data&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;[ int(x) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; open(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;../data/sample10-1.dat&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;readlines()]
data&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sort()
data&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;insert(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
data&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(max(data)&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)

j&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(data)&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;):
    diff&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;data[i&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;data[i]
    j[diff&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;j[diff&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;

print(j)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;
Part 2 was where the fun starts - how many combinations of adapters
will take you from the start to the end.&lt;/p&gt;
&lt;p&gt;
For example, if we had adapters with voltages 1,4,5,6 given the
problem constraints that you can only connect an adapter to another
with a &amp;#34;joltage&amp;#34; of up to three less, you can only use the 1 voltage 1
way (coming from the source of 0).&lt;/p&gt;
&lt;p&gt;
4 can connect to only 1 so it can only be used 1 way.&lt;/p&gt;
&lt;p&gt;
5 can connect to 4 so it too can only be used 1 way.&lt;/p&gt;
&lt;p&gt;
6 is a change, it can connect to 5 or 4 so you could chain either
6–&amp;gt;5–&amp;gt;4–&amp;gt;1 or 6–&amp;gt;4–&amp;gt;1 so you can get to 6 two ways. &lt;/p&gt;
&lt;p&gt;
If a student knows recursion and recursive search it&amp;#39;s easy enough to
code something that tries all the paths but it&amp;#39;s going to get very
slow very fast.&lt;/p&gt;
&lt;p&gt;
With a couple of insights though this can lead to a nice dynamic
programming type solution. &lt;/p&gt;
&lt;p&gt;
First thing to notice is that, similar to day 7, instead of looking at
how many adapters a lower joltage adapter can lead to we can look at how
many lower joltage adapters a given adapter could have come from. &lt;/p&gt;
&lt;p&gt;
To do this, we can look at the adapters as a graph. We can build a
dictionary where the keys are the adapter joltages and the entries are
the lower joltage adapters it can connect with:&lt;/p&gt;
&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;build_reverse_map&lt;/span&gt;(data):
    graph&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;{}
    data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; data[::&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(data)):
        current &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; data[i]
        j&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;i&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (j&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;len(data) &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; data[i] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; data[j] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;):
            j&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;j&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
        graph[current]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;data[i&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:j]
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; graph

rmap &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; build_reverse_map(data)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt; &lt;/p&gt;
&lt;p&gt;
Line 3 reverses the list then for each item in the list, lines 6
through 8 find the adapters it can connect with. &lt;/p&gt;
&lt;p&gt;
The next insight is that instead of calculating all the possibilities
we can build them a step at a time. &lt;/p&gt;
&lt;p&gt;
Consider the first voltage from our above example of 1,4,5,6.&lt;/p&gt;
&lt;p&gt;
1 – it can only go to 0 so 0 is its only &amp;#34;neighbor&amp;#34; in the graph. We
can only get there 1 way so we can store 1 in ways[1].&lt;/p&gt;
&lt;p&gt;
4 – same deal - its only neighbor is 1. You can only get to 1 one way
so you can only get to 4 1 way - store it in ways[4]&lt;/p&gt;
&lt;p&gt;
5 – same deal, ways[5] = 1.&lt;/p&gt;
&lt;p&gt;
6 - now six is different. It has 2 neighbors - 5 and 4. You can get to
5 one way and 4 one way so we can get to 6 two ways (the sum of the
ways to get to each of it&amp;#39;s neighbors). Store that in ways[6]&lt;/p&gt;
&lt;p&gt;
Go through all the nodes and then ways[the last node] will have your
answer:  &lt;/p&gt;
&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;ways&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;{}
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; d &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; data:
    ways[d]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; d &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; data[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:]:
    neighbors &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; rmap[d]
    sum &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; neighbors:
        sum &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sum &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; ways[n]
    ways[d]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;sum&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt; &lt;/p&gt;
&lt;p&gt;
Relatively straightforward and lightning fast. Dynamic programming
can be really hard to teach but I think this problem might be a good
one to do with an advanced data structures class. &lt;/p&gt;
&lt;p&gt;
For comparison, you can find the clojure code &lt;a href=&#34;https://github.com/zamansky/advent2020/blob/main/src/day10.clj&#34;&gt;here&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;
Fun problem today. Looking forward to tomorrow.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>A Teacher looks at Advent of Code 2020 - Days 7 and 8</title>
      <link>https://cestlaz.github.io/post/advent-2020-day0708/</link>
      <pubDate>Tue, 08 Dec 2020 14:47:17 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/advent-2020-day0708/</guid>
      <description>&lt;p&gt;
Today we&amp;#39;ll talk about days &lt;a href=&#34;https://adventofcode.com/2020/day/7&#34;&gt;seven&lt;/a&gt; and &lt;a href=&#34;https://adventofcode.com/2020/day/8&#34;&gt;eight&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;
Let&amp;#39;s start with 7. I teach all morning on Mondays. I woke up and
worked out and then took a look at the problem in the few minutes
before class. It was certainly harder than days one through six but I
felt it was something I knew I could do based on past experience so I
quickly started to throw something together. I tried to finish it in
the between classes but couldn&amp;#39;t get the right answer to part
one. After class I spent more time debugging. I was pretty certain my
algorithm was right and it turns out it was. The problem was in my
parsing.&lt;/p&gt;
&lt;p&gt;
Anyway, to the problem. Read it over if you haven&amp;#39;t yet.&lt;/p&gt;
&lt;p&gt;
If you&amp;#39;ve studied data structures and algorithms you&amp;#39;ll recognize that
this problem can be viewed as a graph problem. Bags are nodes in the
graph and edges tell you what bags each bag can contain.&lt;/p&gt;
&lt;p&gt;
The data is set up to represent a graph like this: &lt;/p&gt;
&lt;img width=&#34;50%&#34; src=&#34;https://cestlaz.github.io/img/advent2020-0708/g1.png&#34;&gt;
&lt;p&gt;
I left out the weights (numbers of bags). This can be represented in
an adjacency list. The video does this in Clojure but in Python, you&amp;#39;d
get something that starts like this:&lt;/p&gt;
&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;lightred&amp;#39;&lt;/span&gt;     : [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;brightwhite&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;mutedyellow&amp;#39;&lt;/span&gt;],
 &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;darkorange&amp;#39;&lt;/span&gt;   : [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;brightwhite&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;mutedyellow&amp;#39;&lt;/span&gt;],
 &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;brightwhite&amp;#39;&lt;/span&gt;  : [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;shinygold&amp;#39;&lt;/span&gt;],
 &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;mutedyellow&amp;#39;&lt;/span&gt;  : [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;shinygold&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;fadedblue&amp;#39;&lt;/span&gt;],
 &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;shinygold&amp;#39;&lt;/span&gt;    :[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;darkolive&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;vibrantplum&amp;#39;&lt;/span&gt;],
 &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;darkolive&amp;#39;&lt;/span&gt;    :[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;fadedblue&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;dottedblack&amp;#39;&lt;/span&gt;],
 &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;vibtrantplum&amp;#39;&lt;/span&gt; :[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;fadedblue&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;dottedblack&amp;#39;&lt;/span&gt;]}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;
The challenge comes when you see that many starting points can lead to
the goal of the shiny gold bag. &lt;/p&gt;
&lt;p&gt;
The insight comes when you notice that you can &amp;#34;reverse the edges.&amp;#34;
For example, when we saw the line that led to the lightred contains
brightwhite and mutedyellow, instead we represent it the other way
making two entries - brightwhite is contained by lightred and also
mutedyellow is contained by lightred. &lt;/p&gt;
&lt;p&gt;
Once we set this up the solution is a breadth or depth first search. &lt;/p&gt;
&lt;p&gt;
The video doesn&amp;#39;t do a complet walk through but goes into more
details. &lt;/p&gt;
&lt;p&gt;
I like this type of problem for classes because students can see that
sometimes changing the data can make the problem much easier. If you
implement the adjacency list as it&amp;#39;s presented the problem seems
hard. Once you see you can go from shinygold out instead of from  all
the bags to shinygold the porblem becomes much easier.&lt;/p&gt;
&lt;p&gt;
The other interesting point is that without fundamental data
structures and algorithms this is a hard problem. With them, it&amp;#39;s
pretty straightforward. Remind your students of this when they ask why
they need data structures and algorithms. This problem might be made
up but graphs represent a lot of things in the real world and graph
traversals and algorithms can solve a lot of real world problems&lt;/p&gt;
&lt;p&gt;
Now to day 8. &lt;/p&gt;
&lt;p&gt;
Day 8 involved a simple machine simulator and leads to a very
straightforward solution - write a program that simulates the computer
stated in the problem. My solution tries to approach the problem in a
functional way and also makes use of a function lookup table to avoid
multiple ifs. The solution and complete walk through is in the video
and in Clojure but a similar solution can be written in Python.&lt;/p&gt;
&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/IEjnnRhUAxg&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;
</description>
    </item>
    
    <item>
      <title>A Teacher looks at Advent of Code 2020 - Day 06</title>
      <link>https://cestlaz.github.io/post/advent-2020-day06/</link>
      <pubDate>Sun, 06 Dec 2020 10:14:03 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/advent-2020-day06/</guid>
      <description>&lt;p&gt;
&lt;a href=&#34;https://adventofcode.com/2020/day/6&#34;&gt;Day 6&lt;/a&gt; turned out to be pretty straightforward. Like day 4 you had to
deal with two consecutive newlines when parsing the data but assuming
you did day 4 that&amp;#39;s no problem. &lt;/p&gt;
&lt;p&gt;
The gist is that a group is formed by consecutive lines and groups are
separated by a blank line. Each line in each group is a string of
letters representing answers to questions. For instance, for this
group: &lt;/p&gt;
&lt;pre class=&#34;example&#34;&gt;
abc
abd
ab
&lt;/pre&gt;
&lt;p&gt;
you have three people. The first answered &amp;#39;yes&amp;#39; to a, b, and c. the
second to a,b, and d and the third to a and b. &lt;/p&gt;
&lt;p&gt;
Your goal was to figure out how many different questions did each
group answer &amp;#39;yes&amp;#39; to and what was the total across the groups. &lt;/p&gt;
&lt;p&gt;
It seemed that the easiest thing to do was to take each group, remove
the newlines and then count the unique characters. &lt;/p&gt;
&lt;p&gt;
In Python, something like this (Clojure in the video and on &lt;a href=&#34;https://github.com/zamansky/advent2020/blob/main/src/day06.clj&#34;&gt;GitHub&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;d&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;abc&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;abd&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;ab&amp;#34;&lt;/span&gt;
d &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; d&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;replace(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;)
s &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; set(d)
ans &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; len(s)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;
So, you just have to do that for each group and add them all up.&lt;/p&gt;
&lt;p&gt;
Part 2 added a small twist. Now you wanted to look at each group and
count the number of answers that everyone in that group answered &amp;#34;yes&amp;#34;
to. For the above example, it would be 2 - everyone answered a and b.&lt;/p&gt;
&lt;p&gt;
Assuming your language supports set operations, you can just use
union.&lt;/p&gt;
&lt;p&gt;
Again in Python: &lt;/p&gt;
&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;d &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;abc&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;abd&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;ab&amp;#34;&lt;/span&gt;
d_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; d&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split()
result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; set(d_list[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;])

&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; item &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; d_list[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:]:
    result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; result &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; set(item)
print(result)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;
Again,  do it for all the groups and add it up.&lt;/p&gt;
&lt;p&gt;
This is a great question to go over set operations!!&lt;/p&gt;
&lt;p&gt;
Check out the Clojure video for that approach where I also talk about
easier ways to complete yesterday&amp;#39;s problem.&lt;/p&gt;
&lt;p&gt;
Enjoy!&lt;/p&gt;
&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/I8dbKJ_315Q&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;
</description>
    </item>
    
    <item>
      <title>A teacher looks at Advent of Code 2020 - Day 5</title>
      <link>https://cestlaz.github.io/post/advent-2020-day05/</link>
      <pubDate>Sat, 05 Dec 2020 11:18:59 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/advent-2020-day05/</guid>
      <description>&lt;p&gt;
&lt;a href=&#34;https://adventofcode.com/2020/day/5&#34;&gt;Day five&amp;#39;s problem&lt;/a&gt; is a nice one for an early CS class. It can be very
much brute forced but it also touches on some nice concepts and can be
solved pretty elegantly. I&amp;#39;ve embedded a walk through in Clojure at
the end but a Python solution would be pretty similar.  &lt;/p&gt;
&lt;p&gt;
Read the problem over if you haven&amp;#39;t. At it&amp;#39;s core you are taking a boarding
pass representing a coded airplane seat number and you&amp;#39;re converting
it to a known seat (row and column). The encoding scheme uses &lt;a href=&#34;https://en.wikipedia.org/wiki/Binary_space_partitioning&#34;&gt;binary
space partitioning&lt;/a&gt;. The &lt;a href=&#34;https://adventofcode.com/2020/day/5&#34;&gt;question statement&lt;/a&gt; goes over the details.&lt;/p&gt;
&lt;p&gt;
One of the first things to notice is that you should separate the pass
into two parts - the row, which consists of the first seven characters
each one being an &lt;strong&gt;F&lt;/strong&gt; or a &lt;strong&gt;B&lt;/strong&gt; and the last three which are the
columns and they are marked with either a &lt;strong&gt;R&lt;/strong&gt; or an &lt;strong&gt;L&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;
So, the sample pass &lt;strong&gt;FBFBBFFRLR&lt;/strong&gt; separates into &lt;strong&gt;FBFBBFF&lt;/strong&gt; for the row
and &lt;strong&gt;RLR&lt;/strong&gt; for the clumn.&lt;/p&gt;
&lt;p&gt;
There are 128 rows numbered 0 through 127 so you start with 127 (the
back of the plane) and then depending on if the next character is an
&lt;strong&gt;F&lt;/strong&gt; or a &lt;strong&gt;B&lt;/strong&gt; you either subtract out half the range size or you
don&amp;#39;t. If the character is an &lt;strong&gt;B&lt;/strong&gt; you don&amp;#39;t since you&amp;#39;re at the back
of the section and the back rows are higher. If it&amp;#39;s a &lt;strong&gt;F&lt;/strong&gt; you do
since you&amp;#39;re at the front and front rows have lower numbers.&lt;/p&gt;
&lt;p&gt;
So, the first &lt;strong&gt;F&lt;/strong&gt; says you&amp;#39;re at the front so you subtract &lt;strong&gt;half&lt;/strong&gt; the
range and now you&amp;#39;re looking at 0-63. The next character is a &lt;strong&gt;B&lt;/strong&gt; so
you don&amp;#39;t subtract anything but you&amp;#39;ll be next looking at 32 through
63 etc. The question has a full walk through.&lt;/p&gt;
&lt;p&gt;
Looking at the  row string, you have &lt;strong&gt;FBFBBFF&lt;/strong&gt;. If we substitute the
amount we subtract for the letters we get &lt;code&gt;64 0 16 0 0 2 1&lt;/code&gt; or the
place values of a binary number &lt;strong&gt;in reverse&lt;/strong&gt;. &lt;/p&gt;
&lt;p&gt;
In my solution, I reversed the string and then converted each &lt;strong&gt;F&lt;/strong&gt; or &lt;strong&gt;B&lt;/strong&gt;
into a number. A &lt;strong&gt;B&lt;/strong&gt; became a 0 and an &lt;strong&gt;F&lt;/strong&gt; became 2^i where &lt;strong&gt;i&lt;/strong&gt; is the
location (index) in the string. For the sample string, once reversed
to &lt;strong&gt;FFBBFBF&lt;/strong&gt; it gives &lt;code&gt;1 2 0 0 16 0 64&lt;/code&gt;. If we sum those up and
subtract from 127 we get our row number.&lt;/p&gt;
&lt;p&gt;
We basically can do the same thing for the column but there you
subtract from 7.&lt;/p&gt;
&lt;p&gt;
Part 1 of the question asks you to map the row and column to a final
number by calcualing &lt;code&gt;row*8+col&lt;/code&gt; and then find the highest seat number
from a give list of boarding passes.&lt;/p&gt;
&lt;p&gt;
Part 2 requires you look through all the boarding passes to determine
your actual seat - the one seat missing from the data set.&lt;/p&gt;
&lt;p&gt;
Lots of good stuff for a class in this question.&lt;/p&gt;
&lt;p&gt;
You&amp;#39;ve got the basic data parsing as usual but I love that this can be
brute forced but by noticing the base 2 nature of the data you can
write up a number of different elegant solutions. &lt;/p&gt;
&lt;p&gt;
Here&amp;#39;s a complete solution coded up in Clojure. You can also check all
my Advent of Code solutions up on GitHub
&lt;a href=&#34;https://github.com/zamansky/advent2020&#34;&gt;https://github.com/zamansky/advent2020&lt;/a&gt;. &lt;/p&gt;
&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/lq5AdWkzyjg&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;
</description>
    </item>
    
  </channel>
</rss>
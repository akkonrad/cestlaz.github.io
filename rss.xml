<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>C&#39;est la Z</title>
    <link>https://cestlaz.github.io/</link>
    <description>C&#39;est la Z</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 20 Apr 2021 08:31:47 -0400</lastBuildDate>
    
    <atom:link href="https://cestlaz.github.io/rss.xml" rel="self" type="application/rss" />
    
    
    <item>
      <title>Teaching Styles</title>
      <link>https://cestlaz.github.io/post/teaching-styles/</link>
      <pubDate>Tue, 20 Apr 2021 08:31:47 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/teaching-styles/</guid>
      <description>&lt;p&gt;
My friend Emmanuel lamented over on Facebook on &amp;#34;Learning Styles,&amp;#34; or
more specifically on how it&amp;#39;s still given credence. We all chimed in
in agreement but not an hour later I saw a Twitter thread where
education thought leaders extolled the virtues of Learning Styles all
over again. I pointed out that it&amp;#39;s a great example as to why so many
teachers scoff at &amp;#34;the research&amp;#34; and &amp;#34;research backed practices.&amp;#34;
We&amp;#39;ve seen it all before. We&amp;#39;re told we have to teach one way or we&amp;#39;re
failures only to be told a few years later that we have to do
something else. It&amp;#39;s not necessarily the research (although I question
a good deal of what I&amp;#39;ve read) but also the interpretations and
implementations. There are just too many factors that are never
considered.
&lt;/p&gt;
&lt;p&gt;
One factor that I&amp;#39;ve rarely seen mentioned but one I think about
frequently, particularly as I work with teachers is &amp;#34;teaching styles.&amp;#34;
I&amp;#39;m not talking about any deep science here but we know that teachers
are people and people have tendencies, strengths, weaknesses, and
preferences. These are factors that are so important to teaching but
rarely considered. It&amp;#39;s always &amp;#34;teach this way&amp;#34; and never what works
for you.
&lt;/p&gt;
&lt;p&gt;
Think about how ridiculous that is. In what other field do we ignore
the individual strengths, tendencies and even comfort level of the
professional. In sports, we know that there are &amp;#34;player&amp;#39;s coaches&amp;#34; and
&amp;#34;disciplinarians&amp;#34; and players and teams might take better to one or
the other. Likewise, a coaches act can grow stale over time as the
team evolves. Similarly a great coach works their system to the
strengths of the players and doesn&amp;#39;t rigidly try to make players
conform to a system where they just don&amp;#39;t fit. Now that doesn&amp;#39;t mean
that a coach won&amp;#39;t try to develop a players weaknesses or try to move
towards their favored system but the greats look at the skills and
personalities of all involved. It also doesn&amp;#39;t mean that you can&amp;#39;t
evolve. Former NY Giants coach Tom Coughlin was a rigid
disciplinarian and almost lost the team and his job prior to their Super Bowl run
in 2007. He evolved - became more of a players coach. He didn&amp;#39;t change
his stripes. He was still a stickler for rules and details but he
brought in a new human dimension to his coaching game. 
&lt;/p&gt;
&lt;p&gt;
Back to teaching. 
&lt;/p&gt;
&lt;p&gt;
While you want teachers to have a large set of tools in the box they
are going to be better with some than with others. Of course you can&amp;#39;t
ignore the students and how they respond but it&amp;#39;s not a one way
street. Take my friend Jim. He&amp;#39;s one of the best two or three natural
teachers I know. I describe him as &amp;#34;the teacher I aspire to be.&amp;#34; He&amp;#39;s
amazing. Stylistically though he&amp;#39;s what I call traditional teacher
dominant. He presents, there are questions comments and answer, seat
work. Pretty old school stuff. He doesn&amp;#39;t fit the constructivist mold
nor the cooperative one but he&amp;#39;s the best. I remember talking to our
principal a number of years ago. They said &amp;#34;I can&amp;#39;t bring
superintendents and DOE officials to Jim&amp;#39;s class when they visit and
want to see what we&amp;#39;re doing. He&amp;#39;s great but they just wouldn&amp;#39;t
understand and we&amp;#39;d get a lower school rating.&amp;#34; He&amp;#39;s the best but he
doesn&amp;#39;t fit Danielson. Now before you give me the &amp;#34;but it doesn&amp;#39;t
count, he teaches at Stuy&amp;#34; I&amp;#39;ll share that prior to teaching at Stuy
he taught at an overall low performing neighborhood school and
experience notwithstanding, he was the best then too.
&lt;/p&gt;
&lt;p&gt;
What makes Jim the best? He has his preferred style and he adjusts to
what his students need. He&amp;#39;ll take an assortment of tools out of his
belt - some discovery stuff here, some group work there but he&amp;#39;ll work
it in to augment his strengths rather than being something he&amp;#39;s not
and as a result being inauthentic.
&lt;/p&gt;
&lt;p&gt;
For my part I too am traditional teacher dominant. I&amp;#39;m not anywhere
close to Jim&amp;#39;s level. I consider myself an above average in class
teacher who brings other things to the table and makes up for it with
honesty, sincerity, and loyalty. I&amp;#39;m 100% &lt;strong&gt;not&lt;/strong&gt; a Danielson teacher
nor am I a cooperative learning one which was all the rage when I
started my career. I&amp;#39;ll try to get new ideas and learn new techniques
and pick and choose and overall it&amp;#39;s worked pretty well.
&lt;/p&gt;
&lt;p&gt;
All of this is to say that when teaching teachers or coaching them,
don&amp;#39;t try to turn them into you or into John Keating, Jaime Escalante,
or what have you (note to self, write up teacher movie rant some
day). Help them to look at who they are and what they bring to the
table. Mix that with the needs of their students and the cosntraints
of their teaching situation and help them to be the best they cab be.
&lt;/p&gt;
&lt;p&gt;
Teaching styles, for lack of a better name is too frequently missing
from the education equation. It&amp;#39;s totally removed by those who want
scripted curricula and cookie cutter instruction and barely mentioned
anywhere else but teaching styles are an important component of great
teaching and I wish more people acknowledged this.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>New York City has Certified CS Teachers</title>
      <link>https://cestlaz.github.io/post/certified-teachers/</link>
      <pubDate>Tue, 23 Mar 2021 19:35:57 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/certified-teachers/</guid>
      <description>&lt;p&gt;
I&amp;#39;m super proud to say that New York City now has state certified
Computer Science Teachers!!!!!!
&lt;/p&gt;
&lt;p&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://cestlaz.github.io/img/cs-cert.png&#34; width=&#34;500px&#34;/&gt; 
&lt;/figure&gt;

&lt;/p&gt;
&lt;p&gt;
It&amp;#39;s been a long road - really long if you consider I got started on
my CS Ed journey decades ago and there&amp;#39;s a long road ahead but we hit
a major milestone. 
&lt;/p&gt;
&lt;p&gt;
I started at Hunter a little over five years ago and creating teacher
certification programs was one of the goals. Back then, the state had
neither CS certification nor CS standards. The certification area was
created a year or so ago and the standards were just adopted this past
December. Hunter&amp;#39;s programs were approved December 2019 and we started
our first advanced certificate cohort last summer. 
&lt;/p&gt;
&lt;p&gt;
Twenty one working teachers, all certified in another subject
area. They spent a big chunk of their summer with us all day every day
and continued on with classes and field work in the Fall. Many
finished last December while a few needed one more course which
they&amp;#39;re taking now. Earlier today on our Slack, teachers from that
cohort started sharing that they either received their state
certificates in the mail or that they looked themselves up on the
NYSED web site and confirmed that they were now certified to teach
computer science in the state of NY.
&lt;/p&gt;
&lt;p&gt;
This is big news.
&lt;/p&gt;
&lt;p&gt;
The entire cohort came in as strong teachers and they all grew
tremendously in terms of CS knowledge and their ability to teach
it. Now they represent the first of a growing group of certified CS
teachers - education leaders to provide a core of expertise in terms of
both CS content and how to teach it.
&lt;/p&gt;
&lt;p&gt;
I&amp;#39;m super proud of the cohort and super proud to be part of this. One
of the best parts for me have been meeting and working with these
great teachers and having this new learning network form - hopefully
we can keep it growing for years to come. Another is being able to get
the band back together - I was able to bring in my old partners in
crime JonAlf and Topher to teach and anyone who&amp;#39;s seen them teach know
that they&amp;#39;re the best. I couldn&amp;#39;t include our other co-conspirator,
Sam, because he was on sabbatical and couldn&amp;#39;t work but hopefully that
will change next time around. Not having a team at Hunter has been
really one of the few downsides so being able to work with my &amp;#34;go to
guys&amp;#34; again was a blast.
&lt;/p&gt;
&lt;p&gt;
We also have our Masters program well underway so the pipeline of CS
teachers is starting to form. 
&lt;/p&gt;
&lt;p&gt;
This is exciting news for New York City, Hunter and for me
personally. Long road ahead but as of today, a bunch of students in
NYC are being taught by state certified computer science teachers and
there will be more to come.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Quick Sort over Zoom</title>
      <link>https://cestlaz.github.io/post/qsort-over-zoom/</link>
      <pubDate>Thu, 18 Mar 2021 12:10:53 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/qsort-over-zoom/</guid>
      <description>&lt;p&gt;
I haven&amp;#39;t been blogging much this year. Not sure why - probably pandemic
fatigue. It&amp;#39;s also affected my blog reading - more scanning, less deep
reading. I&amp;#39;ve also been trying to spend mode time off screen learning
how to paint (with,let&amp;#39;s say  mixed results :-) ) leaving less time
and energy to blog. Hopefully I&amp;#39;ll pick up on both ends as more people
get vaccinated and we can get to a more normal life. 
&lt;/p&gt;
&lt;p&gt;
In any event, I tried a new motivation for Quicksort today so I
thought I&amp;#39;d share.
&lt;/p&gt;
&lt;p&gt;
I&amp;#39;ve approached teaching the Quicksort in a variety of ways (&lt;a href=&#34;https://cestlaz.github.io/post/try-something-new/&#34;&gt;here&lt;/a&gt;,
&lt;a href=&#34;https://cestlaz.github.io/posts/quick-sort-starting/&#34;&gt;here&lt;/a&gt;, &lt;a href=&#34;https://cestlaz.github.io/posts/2010-03-14-sorting-from-top-and-from-bottom/&#34;&gt;here&lt;/a&gt;, &lt;a href=&#34;https://cestlaz.github.io/posts/2014-03-12-select-to-sort/&#34;&gt;here&lt;/a&gt;) but never had a great lead in activity. Merge sort
was easy in person since you can &amp;#34;Tom Sawyer&amp;#34; &lt;a href=&#34;https://cestlaz.github.io/posts/2014-02-27-dumbass/&#34;&gt;shuffling a deck of
cards&lt;/a&gt; in class. We adapted this activity pretty well to &lt;a href=&#34;https://cestlaz.github.io/post/merge-over-zoom/&#34;&gt;work over Zoom&lt;/a&gt;
this past summer in our teacher certification program. Quicksort
however, haven&amp;#39;t found a good one. 
&lt;/p&gt;
&lt;p&gt;
Thinking about how to leverage remote, I had an idea to try - use
polls. I use &lt;a href=&#34;https://zulip.com/&#34;&gt;Zulip&lt;/a&gt; for class discussions. It&amp;#39;s like Slack but is open
source, can be self hosted, you can post from email,  and has much
better threading. I wrote a small bot to quickly create emoji
polls. 
&lt;/p&gt;
&lt;p&gt;
First I asked for the students to share their birtdays - just month
and day in the form MMDD so if you were born on March 12th you would
write 0312 in the chat. 
&lt;/p&gt;
&lt;p&gt;
Then, I picked one birthday at random, let&amp;#39;s say 0515. 
&lt;/p&gt;
&lt;p&gt;
I then created a poll: 
&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;
🐶 My birthday is earlier in the year than 0515
&lt;/p&gt;
&lt;p&gt;
🐱 My birthday is later in the year than 0515
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
The bot tags the post with the emoji and the class can click on their
choice. 
&lt;/p&gt;
&lt;p&gt;
We then talk about what we now know - 
&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;
We now know the exact location of 0515 with respect to all the
dates
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
The data set is now partially ordered (everything less than 0515 to
the left, greater to the right).
&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;
I also drew out some diagrams showing what was happening 
&lt;/p&gt;
&lt;p&gt;
This is also one iteration of the Quicksort. 
&lt;/p&gt;
&lt;p&gt;
We do this again on one side and continue to discuss. 
&lt;/p&gt;
&lt;p&gt;
From here we finish developing the algorithm and we&amp;#39;re off to the
races.
&lt;/p&gt;
&lt;p&gt;
As usual, I won&amp;#39;t know for a while how well this worked or if it did
at all but the students seemed to be engaged and so far I think it
helped get a good feel for how the algorithm worked. 
&lt;/p&gt;
&lt;p&gt;
Using Zulip or other chat polls in this case made the motivating
activity easy and seamless. I&amp;#39;m not sure that this particular activity
would be as easy to implement in person unless you used some
technology like clickers. 
&lt;/p&gt;
&lt;p&gt;
We finished off the class discussing how we should test our
implementations. They&amp;#39;re going to test the sorts on a variety of data
sets including sets where all values are the same or are already
sorted. Given our naive pivot selection this should lead to some
pretty bad runtimes – fodder to motivate the next class.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Teaching and Pedagogy - words and music</title>
      <link>https://cestlaz.github.io/post/teach-pedagogy/</link>
      <pubDate>Mon, 08 Feb 2021 20:12:43 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/teach-pedagogy/</guid>
      <description>&lt;p&gt;
I wanted to give a little more context on &lt;a href=&#34;https://cestlaz.github.io/post/teacher-creds/&#34;&gt;yesterday&amp;#39;s post&lt;/a&gt;. 
&lt;/p&gt;
&lt;p&gt;
In reading over the various comments on social media related to the
topic of required and desired CS teacher knowledge there are those
that fall on the content is king and pedagogy not so important and
others who think you don&amp;#39;t really need a deep knowledge of CS. I think
you need both and think current teachers need to be given a
reasonable but finite amount of time to get there.
&lt;/p&gt;
&lt;p&gt;
Whenever the topic comes up I think of &lt;a href=&#34;https://en.wikipedia.org/wiki/Eddie_and_the_Cruisers&#34;&gt;Eddie and the Cruisers&lt;/a&gt;. Tom
Berringer is playing a song - &amp;#34;On the Dark Side&amp;#34; for the band as the
band ridicules him. Eddie (Michael Pare) says &amp;#34;Not bad&amp;#34; to which a
band mate says - &amp;#34;he can&amp;#39;t sing, he can&amp;#39;t play and he can&amp;#39;t
write. What&amp;#39;s not bad?&amp;#34; to which Eddie replies &amp;#34;he&amp;#39;s got something we
need, words and music.&amp;#34; 
&lt;/p&gt;
&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/Ds-MR9OPiNU&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;p&gt;
Words and music - teaching and pedagogy. One isn&amp;#39;t enough - you need
both. You need the content but you also have to do something to bring
value to the kids beyond just dumping the content on the desk - it&amp;#39;s
why I&amp;#39;m so against scripted curricula.
&lt;/p&gt;
&lt;p&gt;
Why do I think both sides are so important? I probably got here from
teaching at Stuyvesant for over 20 years. On top of that, I&amp;#39;m a Stuy
grad (&amp;#39;84), Stuy husband (Devorah, also &amp;#39;84), Stuy brother, and two
time Stuy parent. While Stuy has and had some good teachers, I got to
see a bunch of bad ones. I saw teachers who didn&amp;#39;t know their subject
areas and teachers who didn&amp;#39;t know how to teach. The rub is that at a
school like Stuy the kids will figure out what they need on their
own. You can put an unripe avocado on the teachers desk and the kids
will still pass all the exams. Sure, the kids pass but every kid
deserves a teacher that adds value to their lives. 
&lt;/p&gt;
&lt;p&gt;
Some of the worst at Stuy were teachers for whom Stuy was their first
(and only) gig - they never really had to learn how to teach but for a
variety of reasons - all the kids pass the AP or in the case of
teachers that know content but not teaching, the &amp;#34;smart kids&amp;#34; like the
teacher because they &amp;#34;know stuff&amp;#34; - they think they&amp;#39;re good teachers. 
&lt;/p&gt;
&lt;p&gt;
Sorry, you have to add value.
&lt;/p&gt;
&lt;p&gt;
The best thing that happened to me when I started was when Stuy&amp;#39;s
chairman didn&amp;#39;t hire me. I ended up at Seward Park and that&amp;#39;s where I
started to learn my craft. Once at Stuy, I had to be careful not to
fall into the trap - you can become a good or even a great teacher at
a specialized school but, just like anywhere else, you have to work
for it. You have to really look at what and how you&amp;#39;re doing. 
&lt;/p&gt;
&lt;p&gt;
All of this is to say that to add value to your students you really
have to know both the content and you have to know how to teach - you
have to add value. If you can be replaced by an avocado, you&amp;#39;re not
earning your paycheck.
&lt;/p&gt;
&lt;p&gt;
Now, I&amp;#39;m not saying that the teachers who don&amp;#39;t know CS and are taking
on this new challenge shouldn&amp;#39;t be given time to learn the subject or
that raw teachers who know their subject shouldn&amp;#39;t be given time to
learn how to teach but you eventually have to get there.
&lt;/p&gt;
&lt;p&gt;
If we&amp;#39;re okay with teachers who have to follow scripts for either
content or pedagogy for the long term then we&amp;#39;re devaluing our
profession. I&amp;#39;d like to think we add more.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Physics Teacher Wanted - must NOT know Physics</title>
      <link>https://cestlaz.github.io/post/teacher-creds/</link>
      <pubDate>Sun, 07 Feb 2021 19:00:53 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/teacher-creds/</guid>
      <description>&lt;p&gt;
There were a few posts over on Facebook this weekend about teacher
certification. It started with a question - should teacher
certification be based on an exam like APCS-A with the teacher
correctly answering 85% or greater. A lively discussion
followed. There was agreement and disagreement with responses ranging
from:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
good idea
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
it&amp;#39;s too hard
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
it&amp;#39;s not hard enough
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
There was also a discussion of the importance of content knowledge vs
knowing how to teach in general.
&lt;/p&gt;
&lt;p&gt;
Since there was a lot going on in the thread I thought I&amp;#39;d pull my own
thoughts out into this post.
&lt;/p&gt;
&lt;p&gt;
Let&amp;#39;s first look at the test. There are a number of states that have
a content test for computer science. For some states, I think it&amp;#39;s the
only requirement. In terms of content, at least the Praxis exam is
something like APCS-A on steroids. This is not a good thing. Don&amp;#39;t get
me wrong, I think a qualified CS teacher should know more than APCS-A
on steroids but a single day test is not how you measure deep content
knowledge. I know plenty of students who&amp;#39;ve passed standardized
exams - be they regents, AP, or other but they were no way qualified
to teach the course. They knew the formulas, recognized the patterns,
but didn&amp;#39;t really know the material. Is this what we want of our CS
teachers? I certainly don&amp;#39;t. I&amp;#39;m not hugely opposed to an exam
covering somethign like college CS1 content other than my general
anti-testing beliefs - it would help to curtail some of the problems
that will invariably arise with weak certification programs but it
should no way be the actual bar to teach - if it exists, it should be
just one standard measure along the way.
&lt;/p&gt;
&lt;p&gt;
Now to that content vs pedagogy thing. What current teachers and in
fact most people in the CS Ed space forget is that states move slowly
and that we&amp;#39;re playing the long game. Right now most CS teachers are
converts from other disciplines and relatively few have strong CS
backgrounds but over time this will change. As CS becomes more
established we&amp;#39;ll have young teachers entering the filed with the
intent of becoming a CS teacher. If states and teacher prep programs
set the content bar low that&amp;#39;ll be what we&amp;#39;re stuck with for a LONG
time.  We wouldn&amp;#39;t dream of creating a science teacher credential
where the teacher hardly knows any science - no way should we do it
for CS or any other subject.
&lt;/p&gt;
&lt;p&gt;
The truth is that we need teacher prep programs that ensure that new
CS teachers know both the content and how to teach it and that content
should not be tied in to any specific curriculum. I wrote more about
all of this &lt;a href=&#34;https://cestlaz.github.io/post/teachers-prep-big-pic/&#34;&gt;here&lt;/a&gt;. 
&lt;/p&gt;
&lt;p&gt;
So what do do with current teachers and current needs? Easy - give
them time. Back when I started teaching I was a career changer. I
never took an education course, never student taught, nothing. Turns
out that Math was a shortage area so I had an option - as long as I
had enough math credits I&amp;#39;d get a temporary license  and start
teaching. Instead of teaching 5 classes, I&amp;#39;d teach 4 and get a
mentor. I then had to get a certain number of education credits within
a certain period of time. Since I already had the subject credits it
was just about learning how to teach. Truth is, I barely survived that
first year but things did get better.
&lt;/p&gt;
&lt;p&gt;
New York and other states probably couldn&amp;#39;t do the exact same
thing. First off, current and potential teachers might not know the
content so it wouldn&amp;#39;t just be ed courses and second, certification
rules have changed big time since NCLB. Still, they could do something
similar - approve certification programs like the one I created at
Hunter - ones designed for current non-CS teachers and give teachers a
period of time to complete it. For career changers, create CS version
of programs like the NY Teaching Fellows. 
&lt;/p&gt;
&lt;p&gt;
What isn&amp;#39;t acceptable is saying that CS teachers don&amp;#39;t have to know CS
and that career changers who know CS don&amp;#39;t have to learn how to
teach. Create the programs and give people time. We&amp;#39;re playing the
long game and the only way we lose is if we cut corners for
convenience at the expense of the kids.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Censorship, TOS, and a slippery slope</title>
      <link>https://cestlaz.github.io/post/censorship/</link>
      <pubDate>Thu, 14 Jan 2021 14:14:14 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/censorship/</guid>
      <description>
&lt;p&gt;
Lots of chatter with Donald Trump being kicked off
platforms left and right. On the one hand we&amp;#39;re getting a lot of &amp;#34;it&amp;#39;s
censorship, it&amp;#39;s unust&amp;#34; and on the other side we have &amp;#34;it&amp;#39;s about
time.&amp;#34; I&amp;#39;m of course in the &amp;#34;it&amp;#39;s about time&amp;#34; category but even so,
there&amp;#39;s a cause for concern and a lot of meat for a discussion on tech
policies.
&lt;/p&gt;
&lt;p&gt;
What makes this interesting discussion fodder is that Trump was
removed from different levels of the internet. First you&amp;#39;ve got actual
applications like Twitter and Facebook. Next you&amp;#39;ve got the Play and
Apple stores and finally, you&amp;#39;ve got AWS which provided cloud services
to Parler. At each level the removal of Trump and others inciting hate
and violence have different ramifications and nuances.
&lt;/p&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
Facebook and Twitter
&lt;/h2&gt;
&lt;p&gt;
First let&amp;#39;s look at Facebook and Twitter. On the one hand this is an
easy one. They&amp;#39;re not government agencies - they&amp;#39;re private
companies so the first amendment doesn&amp;#39;t apply. Next, were they
denying service to Trump? No - he had an account on both
services. What did happen is that he violated terms of service. While
I&amp;#39;d never follow Trump, I did follow an account that tweeted his
tweets. The account was set up to see if it would be suspended - guess
what, it was - more than once. This isn&amp;#39;t discrimination or
censorship, this is bouncing the unruly patron at the bar or, dare I
say removing the person who refuses to wear a mask from your store. 
&lt;/p&gt;
&lt;p&gt;
If you&amp;#39;re one of those free market regulation bad people I don&amp;#39;t want
to hear it. In this case, the market did indeed decide. 
&lt;/p&gt;
&lt;p&gt;
There is, however, a big problem and that&amp;#39;s the fact that Twitter,
Facebook and a few other players have so much power. You could argue
they&amp;#39;re de facto monopolies. For years they willingly amiplified
Trump&amp;#39;s lies and now overnight removed him. That&amp;#39;s a huge amount of
power for a company to have. People like me have felt that for years,
Facebook and Twitter have been behaving irresponsibly and as of last
week people on the right feel that way and Dorsey and Zuck can&amp;#39;t be
voted out of office. One can of course argue &amp;#34;The Market&amp;#34; but it&amp;#39;s not
that simple with the market being dominated by a small number of
players. 
&lt;/p&gt;
&lt;p&gt;
I&amp;#39;m doubting that calls to split up the tech giants will be helpful. I
don&amp;#39;t know if we&amp;#39;re better off now as opposed to before AT&amp;amp;T split and
I&amp;#39;m not sure that strongarm regulation is the answer. 
&lt;/p&gt;
&lt;p&gt;
Enforcing open proticols, APIs and standards would probably help a
great deal but in any event, we do have a problem with big tech but
it&amp;#39;s not what the right is crying about now.
&lt;/p&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
The stores and AWS
&lt;/h2&gt;
&lt;p&gt;
Next we have the app stores removing Parler. I&amp;#39;m guessing this is also
a violation of TOS issue but there&amp;#39;s another issue here which is
liability. Is Google or Apple liable or responsible for something on
an application they distribute. 
&lt;/p&gt;
&lt;p&gt;
Related but different is AWS - are they responsible for things that
occur on their servers even though it&amp;#39;s Parler or whomever creates and
runs the applications running on the Amazon Cloud?
&lt;/p&gt;
&lt;p&gt;
Napster enters the chat.
&lt;/p&gt;
&lt;p&gt;
Not exactly the same, but similar. For you youngsters, Napster was one
of the early file sharing services. It was basically an IRC based
setup to locate mp3 files in order to facilitate their
transfer. Napster never hosted any of the files in question but the
music industry went hard after them. 
&lt;/p&gt;
&lt;p&gt;
Even earlier you had alt.pictures.binaries. Back in the day they said
that people came to the internet for email but stayed for &lt;a href=&#34;https://en.wikipedia.org/wiki/Usenet&#34;&gt;Usenet&lt;/a&gt;
news. Basically, they were forums or chatrooms on just about any
topic. I of course subscribed to comp.lang.c,
alt.sports.basketball.nyknicks and a bunch of others. You connected to
your news server to retrieve and post messages and messages were
transferred periodically between servers. Originally using UUCP which
had computers dialing each other up on set schedules but later over
the internet. The servers didn&amp;#39;t own or even know what was in the
messages. They just stored and forwarded.
&lt;/p&gt;
&lt;p&gt;
The question came up with binary groups - alt.pictures.binaries in
particular. Groups like alt.pictures.binaries would contain messages
with encoded images. A single image wouldn&amp;#39;t fit into a message and
messages were ascii so binary data couldn&amp;#39;t be directly sent. Images
were encode using a program called &lt;a href=&#34;https://en.wikipedia.org/wiki/Uuencoding&#34;&gt;uuencode&lt;/a&gt; and split into a bunch of
messages. 
&lt;/p&gt;
&lt;p&gt;
As one might expect, the binary groups ended up a place to traffic
adult and/or illegal material. 
&lt;/p&gt;
&lt;p&gt;
The question was were the server&amp;#39;s owners responsible? They didn&amp;#39;t
create or own the posted material. They probably weren&amp;#39;t even aware it
was on their servers. 
&lt;/p&gt;
&lt;p&gt;
This is a question cloud hosts like AWS have to consider on top of
public perception and just doing what&amp;#39;s right (whatever that is).
&lt;/p&gt;
&lt;p&gt;
A final note on this is that Net Neutrality, while maybe not applying
in this specific instance harps on the same questions - with net
neutrality, ISPS must treat all network traffic the same. Without it
they are free to do what they want - they could slow down or block
services they don&amp;#39;t want to support. Not the same since cloud servers
are not ISPs but certainly similar. 
&lt;/p&gt;
&lt;p&gt;
Lots of meat here and there&amp;#39;s no clear cut right thing to do. Should
the market decide? Is regulation needed? If so how much. Should it
just be at the application level or how about the cloud? The Net
Neutrality issue isn&amp;#39;t that old but when it came up nobody was talking
about the cloud and app stores as gatekeepers didn&amp;#39;t exist. Add to
that the fact that our elected officials are, let us say, not the most
up on modern tech and tech issues. 
&lt;/p&gt;
&lt;p&gt;
I can see a lot of rich discussion coming out of this.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>On Teaching Recursion</title>
      <link>https://cestlaz.github.io/post/recursion/</link>
      <pubDate>Sun, 03 Jan 2021 13:49:00 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/recursion/</guid>
      <description>
&lt;p&gt;
Yesterday I read three posts on teaching recursion. &lt;a href=&#34;https://parentheticallyspeaking.org/articles/how-not-to-teach-recursion/&#34;&gt;First&lt;/a&gt; by Shriram
Krishnamurthi discussing his thoughts on how recursion is taught
incorrectly. This prompted Adam Michlin to &lt;a href=&#34;https://blog.ceos.io/2021/01/02/why-you-shouldnt-teach-recursion-yet/&#34;&gt;write about&lt;/a&gt; teaching
recursion later with some commentary on APCS and then finally, Alfred
Thompson added &lt;a href=&#34;https://blog.acthompson.net/2021/01/recursionhow-and-when-to-teach.html&#34;&gt;his thoughts&lt;/a&gt;. 
&lt;/p&gt;
&lt;p&gt;
Much like everything else in education there is no single right way to
do things. To say as an absolute that you should or shouldn&amp;#39;t teach in
a certain way is wrong - too many variable.s In my experience you can
teach recursion early or late but the structure of your program and
your choice of tools can influence how successful you&amp;#39;ll be. If you&amp;#39;re
teaching a programming course in a language like Python or Java and
are teaching control structures first you&amp;#39;re going to have a hard time
doing recursion early. They&amp;#39;ll get looping structures before they know
the constructs that support recursion - either for control or for
representing data. On the other hand, if you teach objects first you
might have more success.
&lt;/p&gt;
&lt;p&gt;
On the other hand, if you&amp;#39;re using a language like Scheme where lists
and recursion are right in the forefront you&amp;#39;ll likely have more
success with recursion early rather than late. I wrote a bit about
this &lt;a href=&#34;https://cestlaz.github.io/posts/recursion-early/&#34;&gt;a couple of years ago&lt;/a&gt;. 
&lt;/p&gt;
&lt;p&gt;
I&amp;#39;ll leave the &amp;#34;how important is recursion&amp;#34; question for annother time
but I want to address one more thing here. In yesterday&amp;#39;s posts four
traditional recursion problems received a solid bashing and I don&amp;#39;t
think it was fair. As I said up top, &lt;del&gt;only a Sith deals in absolutes&lt;/del&gt;
in teaching, there are no absolutes. Is factorial a wonderful
motivation for recursion - particularly for a student who knows loops?
Probably not but can it have some value? Let&amp;#39;s see…
&lt;/p&gt;
&lt;h3 id=&#34;headline-1&#34;&gt;
Factorial
&lt;/h3&gt;
&lt;p&gt;
While this might not be a terrific motivator it does have some
niceties. Most students will know factorial but will only be able
describe it informally - &amp;#34;multiply all the numbers between 1 and n.&amp;#34;
The recursive definition is more, precise, for lack of a better word.
&lt;/p&gt;
&lt;p&gt;
Then, there&amp;#39;s a direct translation between the recursive definition
and the code. 
&lt;/p&gt;
&lt;p&gt;
Finally, it&amp;#39;s about as bare bones as you get - no data structures or
undue complexity. 
&lt;/p&gt;
&lt;p&gt;
Is this going to motivate a student to learn recursion? No.
&lt;/p&gt;
&lt;p&gt;
Can it be used to help paint a more complete picture? Probably.
&lt;/p&gt;
&lt;h3 id=&#34;headline-2&#34;&gt;
Fibonacci 
&lt;/h3&gt;
&lt;p&gt;
Also got a bad rap in the above linked posts. It shares the benefit of
the recursive definition directly translating to a coded solution with
factorial. 
&lt;/p&gt;
&lt;p&gt;
Fibonacci is also a problem where they originally learned it via the
recurssive rule &amp;#34;the next Fibonacci number is the sum of the two
previous fibonacci numbers.&amp;#34;
&lt;/p&gt;
&lt;p&gt;
It also seems that when students find the Fibonacci number problem
challenging to solve as beginners without recursion. The whole a
becomes b. b becomes c thing can be tricky for beginners. In  my
experience, they find the recursive solution to be more natural. This
is also interesting because they usually don&amp;#39;t find recursive
factorial more natural than a loop (assuming they learned loops
first).
&lt;/p&gt;
&lt;p&gt;
Next, the slowness of the solution is feature, not a bug. It&amp;#39;s a
platform to talk about how recursion isn&amp;#39;t always the answer but you
can think about a problem recursively and if the solution isn&amp;#39;t right
it might lead you to a better solution. This comes up later with
dynamic programming. Just last year (he he) during Advent of Code I
ended up solving one of the problems via dynamic programming. How did
I get there? Thinking about the problem recursively. 
&lt;/p&gt;
&lt;p&gt;
Here you get a great platform for now comparing solutions - iterative,
recursive, tail recursive, memoization - take it as far as you want.
&lt;/p&gt;
&lt;h3 id=&#34;headline-3&#34;&gt;
Euclid&amp;#39;s algorithm 
&lt;/h3&gt;
&lt;p&gt;
I can&amp;#39;t comment on Euclid&amp;#39;s algorithm since I can&amp;#39;t recall ever
teaching it as part of recursion so I&amp;#39;ll substitute Newton&amp;#39;s method
for square root approximation. 
&lt;/p&gt;
&lt;p&gt;
The thing is that here, the goal isn&amp;#39;t really recursion. It&amp;#39;s just a
problem that can be tackled with either recursion or iteration. The
reason it&amp;#39;s a neat problem is because you can talk about floating
point accuracy issues along with how close of an approximation you
might want or need. 
&lt;/p&gt;
&lt;h3 id=&#34;headline-4&#34;&gt;
Towers of Hanoi
&lt;/h3&gt;
&lt;p&gt;
Finally we get the Towers of Hanoi. Sure it&amp;#39;s contrived but it can
also be fun and by being a new and different problem students can try
to use any strategies that might lead to a solution, recursive or
otherwise:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
try some small examples
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
see if examples relate to each other
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
base case?
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
etc.
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
The big deal though is that Towers of Hanoi isn&amp;#39;t really about Towers
of Hanoi - it&amp;#39;s really a platform to talk about all sorts of good
stuff. I wrote all about it &lt;a href=&#34;https://cestlaz.github.io/posts/2010-01-10-towers-of-hanoi/&#34;&gt;a decade ago&lt;/a&gt;. 
&lt;/p&gt;
&lt;h3 id=&#34;headline-5&#34;&gt;
Other stuff
&lt;/h3&gt;
&lt;p&gt;
Now, of course you can introduce recursion in other ways particularly
if you use a language like Scheme. 
&lt;/p&gt;
&lt;p&gt;
Bottom line is that without taking into considerations lots of other
factors - student backgrounds, teacher comfort. Time, experience,
facilities, goals and desired aoutcomes, and more you can&amp;#39;t really say
one way is right or one way is wrong.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Final thoughts on Advent of Code 2020</title>
      <link>https://cestlaz.github.io/post/advent-2020-final-thoughts/</link>
      <pubDate>Sun, 27 Dec 2020 15:57:22 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/advent-2020-final-thoughts/</guid>
      <description>
&lt;p&gt;
Time for some final thoughts on &lt;a href=&#34;https://adventofcode.com/&#34;&gt;Advent of Code 2020&lt;/a&gt;. 
&lt;/p&gt;
&lt;p&gt;
This was my sixth Advent of Code but the first time I completed all 25
days. Better than last year&amp;#39;s 31 and a whole lot better than my
weakest effort of 11 stars in 2017. I managed to find the time to
finish all but two on the day they were released and finished those
two on Christmas morning. This was also the first year I wrote all my
solutions in Clojure and I also made a bunch of blog posts and videos
(linked on the bottom of this post).
&lt;/p&gt;
&lt;p&gt;
From my point of view 2020 was the best AoC to date and I&amp;#39;m not just
saying that because I finished all the problems. Well, maybe I am but
it&amp;#39;s really because the content and release of content lent itself to
my completing all the problems.
&lt;/p&gt;
&lt;p&gt;
Before jumping in to my specific commentary I want to remind readers
that anyone&amp;#39;s perceptions of an event like this will be biased. If
there&amp;#39;s an aspect that I particularly liked you can bet there&amp;#39;s
someone else out there who didn&amp;#39;t like it.
&lt;/p&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
Overall content
&lt;/h2&gt;
&lt;p&gt;
As usual a wide range of topics were covered including binary numbers,
pattern matching, simulation, dynamic programming, mathy stuff,
parsing, graph algorithms and more. 
&lt;/p&gt;
&lt;p&gt;
I didn&amp;#39;t find myself totally lost on any questions. There were some
problems that at least to me seemed to require graph algorithms and
one where dynamic programming or at least memoization was a boon but
for the most part it seemed that problems were indeed
approachable. Even the math day that had a bunch of reddit chatter
over the Chinese Remainder Theorem could be done without knowing about
the CRM. That was good because I had never heard of it (and if any of
the redditors who mentioned that it should  common knowledge, it
shouldn&amp;#39;t - I have an undergrad in CS and a Masters in CS along wit 30
years of teaching and this is the first time I&amp;#39;ve seen it). 
&lt;/p&gt;
&lt;p&gt;
In past years there always seemed to be a few problems that you needed
some preexisting knowledge to attempt. I had no problem with that - no
need to have  to finish all the problems and there&amp;#39;s nothing wrong
with hitting up reddit, learning something new and then tackling the
problem. This year it seemed that the problems more directly led to
the knowledge. I&amp;#39;ll talk about this more later. 
&lt;/p&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
Problem size
&lt;/h2&gt;
&lt;p&gt;
For the most part the problems were the perfect size for me. I&amp;#39;d read
the problems when I woke up, work on part 1 after my run and then part
2 later in the day - at least that was the ideal - bugs and life
sometimes got in the way. None of the problems required pages and
pages of code for the solutions which I liked. Problems were clever
and interesting but led to moderately sized solution. 
&lt;/p&gt;
&lt;p&gt;
In past years, the weekend problems were longer and/or harder. The
logic being that there&amp;#39;s more time to work on them. I never liked
that. AoC is great but it&amp;#39;s an add on. It&amp;#39;s an add on to work during
the week but it&amp;#39;s an add on to family time on the weekend. I liked
that this year the only weekend problem that was much larger and longer
was day 20 - the image reconstruction. 
&lt;/p&gt;
&lt;p&gt;
This is not to say that some problems didn&amp;#39;t take a good deal of time
but rather that once you had an approach you didn&amp;#39;t sit down and say
&amp;#34;oh man, now I have to write hundreds of lines of code to implement
this.&amp;#34;
&lt;/p&gt;
&lt;h2 id=&#34;headline-3&#34;&gt;
particularly nice problems 
&lt;/h2&gt;
&lt;p&gt;
In spite of my not finishing part 2 until the last day, I loved day
20 - Jurassic Jigsaw. It was a little long and I spend more time than
I care to admit on debugging a really silly error but I loved the
problem.
&lt;/p&gt;
&lt;p&gt;
Why? 
&lt;/p&gt;
&lt;p&gt;
First, it had staged difficulty -
&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;
Parse the data into a reasonable representation
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Do a partial edge matching for part 1 (not so hard)
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Do the harder / longer matching to reconstruct the image
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Remove the border and solve the problem.
&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;
Second, you actually discovered something - you &lt;strong&gt;found&lt;/strong&gt; sea
monsters!!!! You had a problem with an &amp;#34;unknown&amp;#34; solution and you
figured it out. Contrast that with say, day 2 where you just had to
validate passwords. That was also a fun problem but there was no big
reveal. It was really cool to decode your image and actaully find the
hidden monsters. 
&lt;/p&gt;
&lt;p&gt;
Day 16 and 21 allowed for similar discovery at the end but not quite
as cool. I liked 16 very much but had a hard time getting my head
around the example for 21. Still a cool problem.
&lt;/p&gt;
&lt;h2 id=&#34;headline-4&#34;&gt;
Teachable stuff
&lt;/h2&gt;
&lt;p&gt;
As usual, I found a lot that I liked as a teacher in AoC. I love that
many of the problems introduce problem solvers to new things. For me,
the Chinese Remainder Theorem was new even though I only discovered it
via the subreddit. Cellular Automata was prominently featured
this year, binary explicitly mentioned as was recursion. 
&lt;/p&gt;
&lt;p&gt;
The recursion problem was particularly nice. The setup led to and, if
I recall, explicitly mentioned recursion. It also talks about a key
challenge - data mutability. The question states that after returning
from a &amp;#34;subgame&amp;#34; - the recursion - you have to continue the original
game from where it left off - state management. If you&amp;#39;re language
passes references in your calls this could lead to trouble. I&amp;#39;m
guessing (hoping?) that for people who solved that day who were new to
recursion got a deeper understanding than just through the usual n!
and such.
&lt;/p&gt;
&lt;p&gt;
Another thing I liked was the spiraling. That, in teacher talk, is
when you go back to an earlier topic. This year had three questions
based on Cellular Autoamta. The first was the basic, the next took you
to a higher dimension and the third to a different shape. Each one
reviewed and extend fro the earlier problem. I loved it. This might
sound similar to last year&amp;#39;s intcode but the difference is that evne
if you didn&amp;#39;t complete the earlier problems you had a shot at the
latter ones. With Intcode if you had something wrong with your earlier
interpreter you were out of luck.
&lt;/p&gt;
&lt;p&gt;
The allergens problem also allowed for the use of the same method you
used to solve the boarding pass problem. 
&lt;/p&gt;
&lt;p&gt;
Loved the spiraling.
&lt;/p&gt;
&lt;p&gt;
I could probably go on but this post is already long enough.
&lt;/p&gt;
&lt;h2 id=&#34;headline-5&#34;&gt;
Links
&lt;/h2&gt;
&lt;p&gt;
I&amp;#39;ll finish off with links to my earlier posts on Advent of Code.
&lt;/p&gt;
&lt;p&gt;
Already looking forward to next year.
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://cestlaz.github.io/post/advent-2020-leadin.&#34;&gt;advent-2020-leadin.&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://cestlaz.github.io/post/advent-2020-day-01&#34;&gt;advent-2020-day-0&lt;/a&gt;1
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://cestlaz.github.io/post/advent-2020-day02&#34;&gt;advent-2020-day02&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://cestlaz.github.io/post/advent-2020-day03&#34;&gt;advent-2020-day03&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://cestlaz.github.io/post/advent-2020-day04&#34;&gt;advent-2020-day04&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://cestlaz.github.io/post/advent-2020-day05&#34;&gt;advent-2020-day05&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://cestlaz.github.io/post/advent-2020-day06&#34;&gt;advent-2020-day06&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://cestlaz.github.io/post/advent-2020-day0708&#34;&gt;advent-2020-day0708&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://cestlaz.github.io/post/advent-2020-day0910&#34;&gt;advent-2020-day0910&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://cestlaz.github.io/post/advent-2020-day11&#34;&gt;advent-2020-day11&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://cestlaz.github.io/post/advent-2020-day14&#34;&gt;advent-2020-day14&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://cestlaz.github.io/post/advent-2020-day16&#34;&gt;advent-2020-day16&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://cestlaz.github.io/post/advent-2020-1718&#34;&gt;advent-2020-1718&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://cestlaz.github.io/post/advent-2020-19-23&#34;&gt;advent-2020-19-23&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://cestlaz.github.io/post/advent-2020-21-24&#34;&gt;advent-2020-21-24&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://cestlaz.github.io/post/advent-2020-final-thoughts&#34;&gt;advent-2020-final-thoughts&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>A Teacher Looks at Advent of Code 2020 - Days 21 and 24</title>
      <link>https://cestlaz.github.io/post/advent-2020-21-24/</link>
      <pubDate>Thu, 24 Dec 2020 11:43:14 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/advent-2020-21-24/</guid>
      <description>
&lt;p&gt;
&lt;a href=&#34;https://adventofcode.com/2020/day/24&#34;&gt;Day 24&lt;/a&gt; didn&amp;#39;t take that much time so I had a chance to go back and
finish &lt;a href=&#34;https://adventofcode.com/2020/day/21&#34;&gt;day 21&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
As usual, all my code is up &lt;a href=&#34;https://github.com/zamansky/advent2020&#34;&gt;here&lt;/a&gt;. 
&lt;/p&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
Day 21
&lt;/h2&gt;
&lt;p&gt;
&lt;a href=&#34;https://adventofcode.com/2020/day/21&#34;&gt;Problem Link&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
It took me a while to get my head around this example. You have a set
of recipes. Each recipe has a list of ingredients and a list of
allergens. Your job for part 1 was basically to determine which
ingredients don&amp;#39;t contain any allergens. Part 2 had you determining
which ingredient had which allergen.
&lt;/p&gt;
&lt;p&gt;
Part of what I think made this hard was that ingredients were just
random strings of letters as opposed to actual ingredients or at least
pronounceable words or letter strings.
&lt;/p&gt;
&lt;p&gt;
The key part of the description as that each allergen was present in
&lt;strong&gt;exactly one&lt;/strong&gt; ingredient and each ingredient had &lt;strong&gt;at most&lt;/strong&gt; one
allergen. 
&lt;/p&gt;
&lt;p&gt;
So, for part 1, the tact was for each allergen, take all the recipes
that had it. In the example, the first and second recipes had
dairy (one indexing). Since only one ingredient can have the dairy
allergen the that ingredient must be in both lists.
&lt;/p&gt;
&lt;p&gt;
If you take all the recipes that have the dairy allergen and take each
of their lists of ingredients as a set and find all their
intersections, you&amp;#39;ll be left with all the ingredients that can have
the dairy allergen.
&lt;/p&gt;
&lt;p&gt;
Do this with all the allergens and you&amp;#39;ll have all the ingredients
that could contain them. The other igredients are safe and lead to the
answer to part 1.
&lt;/p&gt;
&lt;p&gt;
Part 2 had you identifying each ingredient / allergen
pair. Fortunately, the data set we ended up with for part 1 - each
allergen and it&amp;#39;s list of possible ingredients was made to order. One
of them had only one ingredient per allergen. We could identify that
one and then remove that ingredient from the remaining allergen&amp;#39;s
lists. Then repeat to find the next one and then the next. This is
similar to the solution to day 16. Of course this isn&amp;#39;t a general
solution but fortunately the data was all set up for us.
&lt;/p&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
Day 24
&lt;/h2&gt;
&lt;p&gt;
&lt;a href=&#34;https://adventofcode.com/2020/day/24&#34;&gt;Problem Link&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
Back to Cellular Automata!!!!!! The catch this time is the world is a
hex grid. This means that each cell has six neighbors so using a 2D
array or similar representation seems like an even worse idea than it
was for the 3D and 4D problems earlier this month.
&lt;/p&gt;
&lt;p&gt;
Even before representing the world parsing was an issue. Since a given
cell can have neighbors to the east, west, northeast, northwest,
southeast or southwest, instructions are given with a line of &amp;#34;moves&amp;#34;
describing a tile to flip starting from 0,0. 
&lt;/p&gt;
&lt;p&gt;
For example, the line &amp;#34;EEE&amp;#34; would move three east from the origin and
flip that tile while &amp;#34;ESEE&amp;#34; would move one east, one southest and then
one further east and flipt the tile there.
&lt;/p&gt;
&lt;p&gt;
Fortunately, this wasn&amp;#39;t too bad. As we traverse down the line, if we
see an &lt;strong&gt;e&lt;/strong&gt; or a &lt;strong&gt;w&lt;/strong&gt; then the instruction is one character so we add
the instruction to a list of steps an then continue. Otherwise the
instruction is 2 characters so we take 2 and add the instruction adn
then proceed.
&lt;/p&gt;
&lt;p&gt;
Next was the data representation. It seemed that a list of live cells
would again be the best solution. I figured on using this mapping: 
&lt;/p&gt;
&lt;table&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;E&lt;/td&gt;
&lt;td&gt;(-2,0)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;W&lt;/td&gt;
&lt;td&gt;(2,0)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;NE&lt;/td&gt;
&lt;td&gt;(-1,-1)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;NW&lt;/td&gt;
&lt;td&gt;(1,-1)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SE&lt;/td&gt;
&lt;td&gt;(-1,1)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SW&lt;/td&gt;
&lt;td&gt;(1,1)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;
I later found out that this is called &amp;#34;double coordinates.&amp;#34; Since
we&amp;#39;re not storing the full hex grid there&amp;#39;s no waste anyway and I
wasn&amp;#39;t planning on making a visualization so I didn&amp;#39;t worry about how
this would map to an actual screen.
&lt;/p&gt;
&lt;p&gt;
Now, finding the coordinate of a tile was pretty easy. In Clojure
it&amp;#39;s: 
&lt;/p&gt;
&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;;; assume deltas is a lookup dictionary of the above mapping&lt;/span&gt;

  (&lt;span style=&#34;color:#66d9ef&#34;&gt;defn &lt;/span&gt;get-tile-location [steps]
    (reduce (&lt;span style=&#34;color:#66d9ef&#34;&gt;fn &lt;/span&gt;[loc step]
              (map + loc (&lt;span style=&#34;color:#a6e22e&#34;&gt;deltas&lt;/span&gt;  step))
              ) [&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] steps))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;
In Python it would look more like this: 
&lt;/p&gt;
&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# assume deltas is a dictionary with the above mapping&lt;/span&gt;
  &lt;span style=&#34;color:#75715e&#34;&gt;# and steps is a list of instructions [&amp;#34;e&amp;#34;,&amp;#34;w&amp;#34;,&amp;#34;se&amp;#34;, etc]&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; step &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; steps:
      loc &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [sum(x) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; zip(loc, deltas[step])]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;
We can now convert any input line of instructions to a coordinate. If
we write a routine to flip a tile we can now set up our world and
answer part 1.
&lt;/p&gt;
&lt;p&gt;
Part 2 involved basically turning the part 1 world into a cellular
automaton. Fortunately, this was easy given the solution to earlier CA
problems. It as just a matter of updating the get-neighbors routine
and the rule to go from one generation to the next and we&amp;#39;re done.
&lt;/p&gt;
&lt;p&gt;
I enjoyed this - it was a nice twist on the earlier CA
questions. First we had a simple CA, then higher dimensions and now
changing the layout of the world but still within 2 dimensions. Once
we had a way of representing a tile and mapping from a tile to its
neighbors we had already solved the problem.
&lt;/p&gt;
&lt;p&gt;
One more day to go but it&amp;#39;s been a nice run of problems.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>A Teacher Looks at Advent of Code 2020 - 19 through 23</title>
      <link>https://cestlaz.github.io/post/advent-2020-19-23/</link>
      <pubDate>Wed, 23 Dec 2020 15:09:38 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/advent-2020-19-23/</guid>
      <description>
&lt;p&gt;
A few days have past so it&amp;#39;s time for an update. Two more days to go
and while I haven&amp;#39;t completed all the problems, I have accumulated 43
stars which is a personal best. Given the nature of the problems I&amp;#39;m
missing, I might even go back and do them at some point. Of course, I
may very well also just crash out on the final two days.
&lt;/p&gt;
&lt;p&gt;
As usual, all my code is up &lt;a href=&#34;https://github.com/zamansky/advent2020&#34;&gt;here&lt;/a&gt;. 
&lt;/p&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
Day 19
&lt;/h2&gt;
&lt;p&gt;
&lt;a href=&#34;https://adventofcode.com/2020/day/19&#34;&gt;Problem Link&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
Not a whole lot to say about this one. It&amp;#39;s the weekend and AoC has
traditionally had longer / harder problems over the weekends. I was
surprised when the first weekend&amp;#39;s problems - 12 and 13 weren&amp;#39;t
significantly longer than the surrounding days. 
&lt;/p&gt;
&lt;p&gt;
I read over this and it screamed &lt;strong&gt;parser&lt;/strong&gt; and to be honest, I really
wasn&amp;#39;t up for writing a parser on a Saturday morning. Instead, I
cheaped out.  I looked for a Clojure parser generator and found
&lt;a href=&#34;https://github.com/engelberg/instaparse&#34;&gt;instaparse&lt;/a&gt;. What&amp;#39;s more, instaparse supported input in the form of the
provided AoC data so I literally just had to read the grammar into
instaparse and run it on the data for the answer. Part 2 was pretty
much the same.
&lt;/p&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
Day 20
&lt;/h2&gt;
&lt;p&gt;
&lt;a href=&#34;https://adventofcode.com/2020/day/20&#34;&gt;Problem Link&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
This was the big one. Basically taking 144 tiles and figuring out how
to form them in an image. 
&lt;/p&gt;
&lt;p&gt;
I finished part 1. I read in all the tiles and then for each, compared
it&amp;#39;s edges with the edges of the other tiles (and the reverse of the
edges to account for transformations). This told me how many other
tiles each tile connects with. Central tiles each connect to 4 other
ties, edges, to three but corners only to 2. Part 1 just had you find
the corners so it wasn&amp;#39;t too big a deal.
&lt;/p&gt;
&lt;p&gt;
Part 2 involves assembling the image and then finding sea monsters. I
haven&amp;#39;t done this yet. Armed with the corner, it should be easy to
find the top row and then build the image going down. 
&lt;/p&gt;
&lt;p&gt;
I think it&amp;#39;s going to be a bear to code though since each tile has to
be transformed via flipping and/or rotating into the correct
orientation.
&lt;/p&gt;
&lt;p&gt;
I&amp;#39;m hoping to get back to it. We&amp;#39;ll see though. 
&lt;/p&gt;
&lt;h2 id=&#34;headline-3&#34;&gt;
Day 21
&lt;/h2&gt;
&lt;p&gt;
&lt;a href=&#34;https://adventofcode.com/2020/day/21&#34;&gt;Problem Link&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
Haven&amp;#39;t done this one yet. Just couldn&amp;#39;t get my head around the
example on an early Monday morning. 
&lt;/p&gt;
&lt;p&gt;
I don&amp;#39;t know if I&amp;#39;ll finish question 20 but I do really hope to get
back to give this one a go.
&lt;/p&gt;
&lt;h2 id=&#34;headline-4&#34;&gt;
Day 22
&lt;/h2&gt;
&lt;p&gt;
&lt;a href=&#34;https://adventofcode.com/2020/day/22&#34;&gt;Problem Link&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
Part 1 here was pretty straightforward - you had a few rules:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
if player 1&amp;#39;s deck is empty, player 2 wins
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
if player 2&amp;#39;s deck is empty, player 1 wins
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
otherwise both players draw a card and whoever drew the higher card gets both, they go on the
back of the winners deck and you continue play.
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
That&amp;#39;s it. Basically just run the simulation.
&lt;/p&gt;
&lt;p&gt;
Part 2 added a recursive subgame. Under certain circumstances you
pause the current game and do a little subgame. The catch is that you
have to save the state of the current game and when the subgame or
subgames end, you continue the suspended game from where you left off.
&lt;/p&gt;
&lt;p&gt;
This means that if you are representing your decks with arrays or some
other data structure where you can change the elements you have to be
careful. In Clojure, however, where data is immutable by default you
don&amp;#39;t have to worry about that. 
&lt;/p&gt;
&lt;p&gt;
I was basically able to just rewrite my play routine for the new
rules and whenever we had to go to a subgame, I just made a
traditional recursive call. My guess is that if I had coded this up
originally in Java or C++ I probably would have had a harder time
going from part 1 to part 2. On the other hand, there were some
problems with Java or C++ would have made my part 1 to part 2
transitions easier - depends on the problem. 
&lt;/p&gt;
&lt;h2 id=&#34;headline-5&#34;&gt;
Day 23
&lt;/h2&gt;
&lt;p&gt;
&lt;a href=&#34;https://adventofcode.com/2020/day/23&#34;&gt;Problem Link&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
This was the fun one - at least from a teacher&amp;#39;s point of view. 
&lt;/p&gt;
&lt;p&gt;
Like day 22 you had to implement a game. You set up a bunch of
numbered cups in a circle and then: 
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
remove the three cups right after the current cup
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
find out where they should be reinserted based on the game rules
(see the problem link for details)
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
reinsert those three cups at that reinsertion point.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
move from the current cup to the next cup.
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
I did part 1 using a simple list and list manipulations. I used
Clojure but the python equivalent would be to have a list representing
all the cups, move around ti with mod, and remove cups and add them
using slices.
&lt;/p&gt;
&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# given board = [3,8,9,1,2,5,4,6,7&lt;/span&gt;

  &lt;span style=&#34;color:#75715e&#34;&gt;# to get the next board state&lt;/span&gt;
  current &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; board[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]
  to_remove &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; board[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;]
  remaining &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; board[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:]
  idx &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; find_target(board,remove)
  newboard &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; remaining[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:idx] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; to_remove &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; remaining[idx:] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; [current]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;
I might have the indexing a little off and the &lt;code&gt;find_target&lt;/code&gt; routine
isn&amp;#39;t shown adn might have different parameters. As I&amp;#39;ve said, I wrote
my solution in Clojure. This should give the general idea though. 
&lt;/p&gt;
&lt;p&gt;
You basically had to run through 10 turns to find the answer.
&lt;/p&gt;
&lt;p&gt;
Part 2 added a twist - the game board was now &lt;strong&gt;one million&lt;/strong&gt; in size
and you had to run the simulation through &lt;strong&gt;ten million&lt;/strong&gt; turns. No way
was my part 1 solution going to work. 
&lt;/p&gt;
&lt;p&gt;
The problem called for something that required fewer list traversals
and builds and where it would be quick and easy to find a given
element. 
&lt;/p&gt;
&lt;p&gt;
My first thought was to build a traditional linked list. That would
help but it would also require a number of linear traversals.
&lt;/p&gt;
&lt;p&gt;
Next thought? How about a dictionary? 
&lt;/p&gt;
&lt;p&gt;
If you set up a dictionary where the keys are the nodes and the values
represent the pointer to the next node you could really quickly and
easily both traverse and manipulate the data set. 
&lt;/p&gt;
&lt;p&gt;
For example, if your board was [3,8,9,1] then you&amp;#39;d use this
dictionary to represent it - remember the 1 wraps back around to
the 3.
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;  nodes &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; : &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;,
           &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt; : &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;,
           &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt; : &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,
           &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; : &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;
So if you&amp;#39;re current node was represented in a variable &lt;code&gt;current&lt;/code&gt; the
three nodes you&amp;#39;ll remove would be &lt;code&gt;[nodes[current],
noeds[nodes[current]], nodes[nodes[nodes[current]]] ]&lt;/code&gt;
&lt;/p&gt;
&lt;p&gt;
As an added bonus, the question pointed out that your data set would
have every positive integer represented once. That is, part 1 had a 9
item list with all the values 1 through 9 and the million item one had
values 1 through 1 million. This makes finding the insertion point
both easy and fast.
&lt;/p&gt;
&lt;p&gt;
It turns out that I think the dictionary based solution is actually
cleaner than the list one in addition to being faster.
&lt;/p&gt;
&lt;p&gt;
This solution was no speed demon - still took ~40 seconds to get an
answer but that&amp;#39;s good enough for me. 
&lt;/p&gt;
&lt;p&gt;
Of the problems I wrote up today, this one was my favorite. Students
typically think of data structures as what they are - if they have an
array, use it as an array, a linked list is a linked list and a
dictionary or hash table is, well, you know. If you need a linked
list, you need to make a traditional linked list - not so. this is a
great example of using a dictionary as a hash table. There are
conceptual data structures and actual in computer
representations. Often you use the implementation directly - use a
hash table to store data for lookup or use an array to represent a
list. It can be very empowering though when the student sees that
the implementations are just tools in the belt and they can be used in
all sorts of interesting ways.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>A Teacher Looks at Advent of Code 2020 - Days 17 and 18</title>
      <link>https://cestlaz.github.io/post/advent-2020-1718/</link>
      <pubDate>Fri, 18 Dec 2020 12:35:57 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/advent-2020-1718/</guid>
      <description>
&lt;h2 id=&#34;headline-1&#34;&gt;
Day 17
&lt;/h2&gt;
&lt;p&gt;
&lt;a href=&#34;https://adventofcode.com/2020/day/17&#34;&gt;Day 17&lt;/a&gt; brought back Cellular Automata. It was a nice follow up to &lt;a href=&#34;https://cestlaz.github.io/post/advent-2020-day11/&#34;&gt;day
11&lt;/a&gt;. In my &lt;a href=&#34;https://cestlaz.github.io/post/advent-2020-day11/&#34;&gt;writeup&lt;/a&gt; I talked about data representation - how a Cellular
Automoton like Conway&amp;#39;s game of life is a nice 2D array project in a
class like APCS-A but multi dimensional arrays are only one way to
represent a cellular automaton. Day 17 really drove that home. 
&lt;/p&gt;
&lt;p&gt;
The actual rules were pretty simple - if a cell is active and has 2 or
3 active neighbors it stays active. If it&amp;#39;s inactive and has three
active it becomes active. Otherwise the cell is inactive. 
&lt;/p&gt;
&lt;p&gt;
The catch for part 1 is that this CS is in three dimensions. Each and
a cell&amp;#39;s neighbors are defined as all coordinates that differ by one
in any of the three dimensions. So, if a cell is at an (x,y,z) location
it&amp;#39;s neighbors will be at (x+1,y,z), (x-1,y,z), (x+1,y+1,z),
(x+1,y-1,z), etc. for 26 neighbors in all. 
&lt;/p&gt;
&lt;p&gt;
You could use a list  within a list within a list or a three
dimensional array to represent your world but that&amp;#39;s tricky and error
prone. What&amp;#39;s worse, part 2 took the CA into the fourth dimension.
&lt;/p&gt;
&lt;p&gt;
Better is to just keep a list or set of active cells. Then the problem
becomes pretty easy. You need to be able to:
&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;
Find all of a cell&amp;#39;s neighbors - this is pretty easy because you
can iterate over all the +1 and -1 possibilities for each of the x,
y, and z values.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Find all the potential cells for the next state - this is also
pretty easy because it&amp;#39;s the set of all cells that are currently
active along with all of their neighbors. 
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Count a given cell&amp;#39;s active neighbors - this is easy once you&amp;#39;ve
done the find neighbors routine. 
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
A way to test if a cell is active which is just checking to see if
it&amp;#39;s in your active cells list or set.
&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;
Then, it&amp;#39;s pretty easy to run the CA: 
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# pythonesque pseudocode &lt;/span&gt;
potential_cells &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; find_all_neighbors(current_active_cells)
new_cells &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; cell &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; potential_cells: 
  n &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; count_neighbors(cell)
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; is_active(cell) &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; (n&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; n&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;):
    new_cells&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(cell)
  &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; is_active(cell)) &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; n&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:
    new_cells&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(cell)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;
Then you just have to run generate new states until you get the
answer.
&lt;/p&gt;
&lt;p&gt;
Part 2 extended the CA to 4 dimensions. If you had a multidimensional
array this would get super message but with a list of active cells,
the changes are minimal - just add an extra coordinate, update getting
the neighbors and you&amp;#39;re good to go.
&lt;/p&gt;
&lt;p&gt;
This is a case of where thinking through your data representation can
be a big win.
&lt;/p&gt;
&lt;p&gt;
Clojure code &lt;a href=&#34;https://github.com/zamansky/advent2020/blob/main/src/day17.clj&#34;&gt;here&lt;/a&gt;.
&lt;/p&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
Day 18
&lt;/h2&gt;
&lt;p&gt;
&lt;a href=&#34;https://adventofcode.com/2020/day/18&#34;&gt;Day 18&lt;/a&gt; was all about evaluating math expressions. For part 1 you had
parenthesized expressions consisting of numbers * and + that you had
to evaluate but you had to do it by first doing parens then left to
right - multiplication was not a higher precedence.
&lt;/p&gt;
&lt;p&gt;
This sounds like a parsing first problem but it turns out I was able
to exploit some of Clojure&amp;#39;s language features. Looking at the
subreddit after solving it seems that a bunch of other languages also
have features that could be exploited.
&lt;/p&gt;
&lt;p&gt;
Clojure represents data (and programs) as &lt;a href=&#34;https://en.wikipedia.org/wiki/S-expression&#34;&gt;S-Expressions&lt;/a&gt; - basically
stuff in parens. As a prefix language, instead of writing 10+20, in
Clojure you&amp;#39;d write &lt;code&gt;(+ 10 20)&lt;/code&gt;, that is  run the plus function on 10
and 20. If you have something lie &lt;code&gt;(+ 10 (* 20 3))&lt;/code&gt;, Clojure has to
evaluate the inner S-Expression (sexp) before it can add that to +10
so Clojure can do the parsing for us. We can take an input string and
convert it to an sexp using &lt;code&gt;read-string&lt;/code&gt;  but if we just try to do
&lt;code&gt;(read-string &amp;#34;1 + 2 + 3&amp;#34;)&lt;/code&gt; we&amp;#39;d get an error because &amp;#34;1 + 2 + 3&amp;#34;
isn&amp;#39;t a valid sexp so we just surround it by parens:
&lt;/p&gt;
&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;def &lt;/span&gt;equation-sexp (&lt;span style=&#34;color:#a6e22e&#34;&gt;read-string&lt;/span&gt; (str &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;(&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1 + 2 * 3 + (4 * 5 )&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;)&amp;#34;&lt;/span&gt;)))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;
The above would leave us with the sexp (1 + 2 * 3 + (4 * 5 )).
&lt;/p&gt;
&lt;p&gt;
Next, forgetting the inner parens, we can write a function that will
evaluate an sexp of the form (1 + 2 * 3 + …) etc. Basically, this can
be done with a reduce. Start with the first value then take the rest
of the list two at a time, the first of each pair is an operator and
the second is an operand so apply the operand to the other number in
the pair and your overall result so far.
&lt;/p&gt;
&lt;p&gt;
In Clojure it looks like this: 
&lt;/p&gt;
&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;defn &lt;/span&gt;part1-eval [f &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; r]
  (reduce (&lt;span style=&#34;color:#66d9ef&#34;&gt;fn &lt;/span&gt;[ans [op next]]
            (apply op [ans next] )) f (&lt;span style=&#34;color:#a6e22e&#34;&gt;partition&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; r)))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;
Next, we insert that function name to the start of each sexp so 
(1 + 2 * 3 + (4 * 5*)) becomes (part1-eval 1 + 2 * 3 + (part1-eval 4 *
5)). Finally we can do a  Clojure &lt;strong&gt;eval&lt;/strong&gt; on this form which will run
part1-eval on the rest of the sexp which will first run part1-eval on
the 4 * 5, that will return the 20 and then the first part1-eval will
finish it&amp;#39;s calculations to give you the answer. 
&lt;/p&gt;
&lt;p&gt;
Part 2 was similar but there you had to perform addition before
multiplication. All that was necessary was write a part2-eval function
that would stand in for the part1-eval.
&lt;/p&gt;
&lt;p&gt;
The idea is to take an sexp like (1 + 2 * 3 + 4 * 5) we first split this
list around the * this gives us (1 + 2) (&lt;strong&gt;) (3 + 4) (&lt;/strong&gt;) (5). We then
filter this to remove the non numbers which gives (1 2) () (3 4) (5)
(). Then we remove the empty lists: (1 2) (3 4) (5). Add the elements
of each list: 3 7 5 and then multiply them together.
&lt;/p&gt;
&lt;p&gt;
All the code is &lt;a href=&#34;https://github.com/zamansky/advent2020/blob/main/src/day18.clj&#34;&gt;here&lt;/a&gt;. 
&lt;/p&gt;
&lt;p&gt;
I like day 17 a lot or some variant for students to discuss data
representations but I think 18 is a little more advanced and probably
wouldn&amp;#39;t touch it in an early CS class - it was fun to work through
though :-). 
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>A Teacher Looks at Advent of Code 2020 - day 16</title>
      <link>https://cestlaz.github.io/post/advent-2020-day16/</link>
      <pubDate>Wed, 16 Dec 2020 17:12:56 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/advent-2020-day16/</guid>
      <description>
&lt;p&gt;
Today&amp;#39;s problem was a fun one to solve. Why was it fun? Stay tuned,
&lt;/p&gt;
&lt;p&gt;
The basic gist is that you have a plane ticket which is a set of
numbers but you don&amp;#39;t know which number maps to which category - row,
seat, gate, etc. You also know the number ranges for each
category. For example, row might be a number between 6 and 11 or 33
through 44 while a seat might be 13 through 40 or 45 through 50. 
&lt;/p&gt;
&lt;p&gt;
Finally, you also can see a number of nearby tickets - each also as
tring of numbers. 
&lt;/p&gt;
&lt;p&gt;
For part 1 you had to determine how many of the nearby tickets are
valid. A ticket is valid if all the numbers on it fall into at least
one category range. 
&lt;/p&gt;
&lt;p&gt;
See the &lt;a href=&#34;https://adventofcode.com/2020/day/16&#34;&gt;full description&lt;/a&gt; for all the details. 
&lt;/p&gt;
&lt;p&gt;
First up - parsing - a little cumbersome but not too bad.
&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;
Split the input into the three main sections - categories, your
ticket, nearby tickets
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Convert the categories into a usable form
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Convert your ticket into a list of numbers
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Convert the nearby tickets into a list of tickets each one being a
list of numbers.
&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;
Taking each step in turn and it&amp;#39;s not too bad - particularly if you&amp;#39;re
comfortable with regular expressions.
&lt;/p&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
part 1
&lt;/h2&gt;
&lt;p&gt;
Representing the categories leads us to our first interesting
decision. How will we test to see if a ticket is valid and based on
that how will we represent the categories?
&lt;/p&gt;
&lt;p&gt;
Each category has two ranges connected with an &lt;strong&gt;or&lt;/strong&gt;:
&lt;/p&gt;
&lt;pre class=&#34;example&#34;&gt;
row: 6-11 or 33-44
seat: 13-40 or 45-50
&lt;/pre&gt;
&lt;p&gt;
One could make a construct to hold the bounds, loop through the nearby
tickets and for each value, run an if statement with the two ranges
connected by an &lt;strong&gt;or&lt;/strong&gt;. 
&lt;/p&gt;
&lt;p&gt;
This is where a class can talk about code vs data - a topic I&amp;#39;m really
fond of.
&lt;/p&gt;
&lt;p&gt;
Instead of taking the above range and having some test like: 
&lt;/p&gt;
&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; number &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; ticket:
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (number &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; low1 &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; number &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; high1) &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; \
     (number &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; low2 &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; number &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; high2):
       do something&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;
or specifically for the row example:
&lt;/p&gt;
&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; number &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; ticket:
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (number &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; number &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; \
     (number &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;33&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; number &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;44&lt;/span&gt;):
       do something&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;
you could make a set with all the possible seats  and then just test
to see if the seat was in the set: 
&lt;/p&gt;
&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;r1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; set( range(low1,high&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;))
r2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; set( range(low2,hight2&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;))
valid_seats &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; r1&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;union(r2)

&lt;span style=&#34;color:#75715e&#34;&gt;# then later&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; seat &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; valid_seats:
  do something&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;
I just find this more elegant. 
&lt;/p&gt;
&lt;p&gt;
For part 1 I just made a big set with all the valid seats and then
checked each ticket to see if each if its numbers were in the valid
seats. 
&lt;/p&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
part 2
&lt;/h2&gt;
&lt;p&gt;
For part 2 first you had to remove all the invalid tickets from the
nearby tickets. Since you figured out how to identify a valid ticket
in part one this shouldn&amp;#39;t be too ahrd.
&lt;/p&gt;
&lt;p&gt;
Then we have to sleuth out which column from the tickets represented
which category. This would make a great group activity in a class,
particularly with an interactive language. This is a great data
exploration and representation problem.
&lt;/p&gt;
&lt;p&gt;
To get more data, I thought I&amp;#39;d write a routine to pull all of one
column from the nearby tickets. Then I could see if all the values in
that row were valid for a particular category. For example, are all
the first numbers of all the tickets valid numbers for row. If so,
that column could represent row. Of course it could also represent
something else as well.
&lt;/p&gt;
&lt;p&gt;
Now that i could test to see if a column is valid for a category I
decided to build some data. I built a list of all the possible
categories for each row.
&lt;/p&gt;
&lt;p&gt;
Part of it looked sort of like this (but in clojure):
&lt;/p&gt;
&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;[ [&lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;, [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;wagon&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;arrival-station&amp;#34;&lt;/span&gt;] ],
  [&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;, [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;wagon&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;arrival-station&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;route&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;train&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;row&amp;#34;&lt;/span&gt;]]
&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;
Examining this table, I noticed that one row had only one category,
another had only 2 then one three etc. Great - we can now solve this
by plugging in the row we know, then the next one, then the next etc.
&lt;/p&gt;
&lt;p&gt;
The explorations led to an easy answer. I sorted the list and looped
through. At each iteration I: 
&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;
Added the current category and its associated row to the solution
set.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Removed that category from the rest of the lines
&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;
When done we had a dictionary with a mapping from category to
row. From there it was pretty simple to find the part 2 answer.
&lt;/p&gt;
&lt;p&gt;
Lots of good stuff here. I love the data explorations and the way it
can lead to a pretty straightforward solution.
&lt;/p&gt;
&lt;p&gt;
Full solution in clojure can be found here: &lt;a href=&#34;https://adventofcode.com/2020/day/16&#34;&gt;https://adventofcode.com/2020/day/16&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
So far I&amp;#39;ve managed to complete each day - 32 stars. That beats my 31
from last year adn my top year of 40 back in 2016. Tomorrow I give my
last exams and grading ca really begin so we&amp;#39;ll see if I can keep
going but so it&amp;#39;s been a fun Advent of Code year so far.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>A teacher looks at Advent of Code day 14</title>
      <link>https://cestlaz.github.io/post/advent-2020-day14/</link>
      <pubDate>Mon, 14 Dec 2020 14:30:47 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/advent-2020-day14/</guid>
      <description>&lt;p&gt;
Time for &lt;a href=&#34;https://adventofcode.com/2020/day/14&#34;&gt;Day 14&lt;/a&gt;!!!
&lt;/p&gt;
&lt;p&gt;
I didn&amp;#39;t write up day 12 but here&amp;#39;s a Clojure &lt;a href=&#34;https://www.youtube.com/watch?v=k8fvaAZRtts&amp;amp;feature=youtu.be&#34;&gt;video&lt;/a&gt; runthrough. I also
didn&amp;#39;t write up day 13 mostly because I hacked together my part 2 in
Python and still want to rewrite it in decent clojure. In any event,
all my solutions are up on &lt;a href=&#34;https://github.com/zamansky/advent2020&#34;&gt;GitHub&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
Day 14 had a few interesting things going on. At its core it&amp;#39;s a small
machine simulator where you have to deal with binary numbers. One of
the rubs is that the numbers are 36 digits which could be a problem if
your language / machine uses 32 bits to represent integers. 
&lt;/p&gt;
&lt;p&gt;
Right off, assuming you have large enough ints you have an interesting
choice. Do you work with the data them as numbers or do you just do
string manipulations. 
&lt;/p&gt;
&lt;p&gt;
I decided to do part 1 as numbers which leads to a nice little
exercise of using bitwise logic operations to turn bits on or off. 
&lt;/p&gt;
&lt;p&gt;
Part 2 was better solved, at least for me using string
manipulations. That part had a nice little recursive subproblem -
mapping wildcard values in the &amp;#34;mask&amp;#34; to all the possible combinations
of zeros and ones.
&lt;/p&gt;
&lt;p&gt;
Both problems also had a bit of fun parsing and, at least for me, a
few neat clojure constructs. 
&lt;/p&gt;
&lt;p&gt;
I think you could turn this problem into a fun set of class
exercises. My code can be found &lt;a href=&#34;https://github.com/zamansky/advent2020/blob/main/src/day14.clj &#34;&gt;here&lt;/a&gt; and even if you don&amp;#39;t do Clojure,
you might want to check out the video runthrough:
&lt;/p&gt;
&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/oVVHU7PDHyw&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;
</description>
    </item>
    
    <item>
      <title>A teacher looks at Advent of Code 2020 - Day 11</title>
      <link>https://cestlaz.github.io/post/advent-2020-day11/</link>
      <pubDate>Fri, 11 Dec 2020 15:00:43 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/advent-2020-day11/</guid>
      <description>&lt;p&gt;
Today was &lt;a href=&#34;https://en.wikipedia.org/wiki/Cellular_automaton&#34;&gt;Cellular Automaton&lt;/a&gt; Day at Advent of Code. You have a world
that&amp;#39;s usually represented as a grid of cells. Each cell can be in a
certain state. Given a certain state, the next state is determined by
simple rules like for a given cell how many of it&amp;#39;s neighbors are the
same color. 
&lt;/p&gt;
&lt;p&gt;
The most popular Cellular Automat is probably &lt;a href=&#34;https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life&#34;&gt;Conway&amp;#39;s Game of Life&lt;/a&gt;
where each cell can be either alive or dead in a given generation and
in the next generation the state will be determined by how many of its
neighbors are currently dead or alive. 
&lt;/p&gt;
&lt;p&gt;
I&amp;#39;ve always liked teaching with Celluar Automata and explored it
deeply in the intro course I designed at Stuy. NetLogo is perfect for
representing a CA (&lt;a href=&#34;https://cestlaz.github.io/posts/2016-01-15-shift-image/&#34;&gt;old post&lt;/a&gt;) and we even do things like using a CS to
&lt;a href=&#34;https://cestlaz.github.io/posts/2016-01-17-maze-ca/&#34;&gt;solve a maze&lt;/a&gt;. Good stuff.
&lt;/p&gt;
&lt;p&gt;
Today&amp;#39;s problem set up a CA where each cell can be one of three
states - floor, occupied chair, unoccupied chair. The floor never
changed but the chairs can change from occupied to unoccupied and back
based on neighbors. I actually really like teh question. It&amp;#39;s posed as
passengers prefer to sit in s eats next to other empty seats which is
true and the overall problem is much more realistic and therefor
accessible than Conway&amp;#39;s game of life. I think I might lead with it if
I do CA again with my students. 
&lt;/p&gt;
&lt;p&gt;
You can find my Clojure solutions &lt;a href=&#34;https://github.com/zamansky/advent2020/blob/main/src/day11.clj&#34;&gt;here&lt;/a&gt;. They were pretty
straightforward. I spend too much time going down the &amp;#34;learn how to
write a lazy sequence in Clojure&amp;#34; rabbit hole for part 2 before just
writing it in a more traditional way.
&lt;/p&gt;
&lt;p&gt;
To me there are a couple of interesting things at play when teaching
CA. The first is state management and synchronization. When beginners
work on a CA they frequently look at a cell, figure out it&amp;#39;s next
generation value and then replace the cell with its new value. Then,
later they look at a neighboring cell and when that cell looks at its
neighbors it gets the changed value not the original one. Clearly a
problem. 
&lt;/p&gt;
&lt;p&gt;
Writing a CA makes it clear that you have to keep your state clean
while you build a new state for the next generation. That&amp;#39;s an
important lesson to learn.
&lt;/p&gt;
&lt;p&gt;
The other interesting teaching point is with data representation. CA
is frequently taught as a 2D array exercise. This makes sense -
simulations like Conway&amp;#39;s Game of Life work perfectly in a 2D array
and if you&amp;#39;re doing graphics with your class you can also get cool
animations through the generations. 
&lt;/p&gt;
&lt;p&gt;
That said, there are other valid representations that could be
superior at times. You might have a list of living cells or a hash
tabe of cells if you have more than 2 living states. This can be far
superior from a space efficiency point of view if you don&amp;#39;t have a lot
of living cells compared with your world size - say you have a CA with
a theoretically unlimited size. 
&lt;/p&gt;
&lt;p&gt;
So, there it is - thoughts on today&amp;#39;s problem. As I said, it was
pretty straightforward but I also really like the setup and will
probably use it in class at some point in the future.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>A Teacher looks at Advent of Code 2020 - days 9 and 10</title>
      <link>https://cestlaz.github.io/post/advent-2020-day0910/</link>
      <pubDate>Thu, 10 Dec 2020 16:52:45 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/advent-2020-day0910/</guid>
      <description>&lt;p&gt;
As we get closer to the end of the semester and time becomes scarcer
I&amp;#39;m wondering how many more I&amp;#39;ll finish. Barely had time to do days 9
and 10.
&lt;/p&gt;
&lt;p&gt;
Not much to say about &lt;a href=&#34;https://adventofcode.com/2020/day/9&#34;&gt;day 9&lt;/a&gt; Part one was basically a rehash of day 1
part 1 but with a sliding widow. Part 2? I just brute force tried all
the subranges. I meant to go back to try to improve the solution but
didn&amp;#39;t have a chance. 
&lt;/p&gt;
&lt;p&gt;
Clojure code can be found &lt;a href=&#34;https://github.com/zamansky/advent2020/blob/main/src/day09.clj&#34;&gt;here&lt;/a&gt;. 
&lt;/p&gt;
&lt;p&gt;
&lt;a href=&#34;https://adventofcode.com/2020/day/10&#34;&gt;Day 10&lt;/a&gt; was more interesting. 
&lt;/p&gt;
&lt;p&gt;
I misread part 1 but ultimately, my solution was to: 
&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;
read in the data
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
sort it
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
prepend a 0
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
append an additional value of the max + 3 to the end
&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;
Then loop through comparing adjacent values and keep track of the
differences which can be 1, 2, or 3. 
&lt;/p&gt;
&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;data&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;[ int(x) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; open(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;../data/sample10-1.dat&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;readlines()]
data&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sort()
data&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;insert(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
data&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(max(data)&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)

j&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(data)&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;):
    diff&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;data[i&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;data[i]
    j[diff&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;j[diff&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(j)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;
Part 2 was where the fun starts - how many combinations of adapters
will take you from the start to the end.
&lt;/p&gt;
&lt;p&gt;
For example, if we had adapters with voltages 1,4,5,6 given the
problem constraints that you can only connect an adapter to another
with a &amp;#34;joltage&amp;#34; of up to three less, you can only use the 1 voltage 1
way (coming from the source of 0).
&lt;/p&gt;
&lt;p&gt;
4 can connect to only 1 so it can only be used 1 way.
&lt;/p&gt;
&lt;p&gt;
5 can connect to 4 so it too can only be used 1 way.
&lt;/p&gt;
&lt;p&gt;
6 is a change, it can connect to 5 or 4 so you could chain either
6–&amp;gt;5–&amp;gt;4–&amp;gt;1 or 6–&amp;gt;4–&amp;gt;1 so you can get to 6 two ways. 
&lt;/p&gt;
&lt;p&gt;
If a student knows recursion and recursive search it&amp;#39;s easy enough to
code something that tries all the paths but it&amp;#39;s going to get very
slow very fast.
&lt;/p&gt;
&lt;p&gt;
With a couple of insights though this can lead to a nice dynamic
programming type solution. 
&lt;/p&gt;
&lt;p&gt;
First thing to notice is that, similar to day 7, instead of looking at
how many adapters a lower joltage adapter can lead to we can look at how
many lower joltage adapters a given adapter could have come from. 
&lt;/p&gt;
&lt;p&gt;
To do this, we can look at the adapters as a graph. We can build a
dictionary where the keys are the adapter joltages and the entries are
the lower joltage adapters it can connect with:
&lt;/p&gt;
&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;build_reverse_map&lt;/span&gt;(data):
    graph&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;{}
    data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; data[::&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(data)):
        current &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; data[i]
        j&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;i&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (j&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;len(data) &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; data[i] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; data[j] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;):
            j&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;j&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
        graph[current]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;data[i&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:j]
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; graph

rmap &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; build_reverse_map(data)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt; 
&lt;/p&gt;
&lt;p&gt;
Line 3 reverses the list then for each item in the list, lines 6
through 8 find the adapters it can connect with. 
&lt;/p&gt;
&lt;p&gt;
The next insight is that instead of calculating all the possibilities
we can build them a step at a time. 
&lt;/p&gt;
&lt;p&gt;
Consider the first voltage from our above example of 1,4,5,6.
&lt;/p&gt;
&lt;p&gt;
1 – it can only go to 0 so 0 is its only &amp;#34;neighbor&amp;#34; in the graph. We
can only get there 1 way so we can store 1 in ways[1].
&lt;/p&gt;
&lt;p&gt;
4 – same deal - its only neighbor is 1. You can only get to 1 one way
so you can only get to 4 1 way - store it in ways[4]
&lt;/p&gt;
&lt;p&gt;
5 – same deal, ways[5] = 1.
&lt;/p&gt;
&lt;p&gt;
6 - now six is different. It has 2 neighbors - 5 and 4. You can get to
5 one way and 4 one way so we can get to 6 two ways (the sum of the
ways to get to each of it&amp;#39;s neighbors). Store that in ways[6]
&lt;/p&gt;
&lt;p&gt;
Go through all the nodes and then ways[the last node] will have your
answer:  
&lt;/p&gt;
&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;ways&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;{}
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; d &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; data:
    ways[d]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; d &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; data[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:]:
    neighbors &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; rmap[d]
    sum &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; neighbors:
        sum &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sum &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; ways[n]
    ways[d]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;sum&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt; 
&lt;/p&gt;
&lt;p&gt;
Relatively straightforward and lightning fast. Dynamic programming
can be really hard to teach but I think this problem might be a good
one to do with an advanced data structures class. 
&lt;/p&gt;
&lt;p&gt;
For comparison, you can find the clojure code &lt;a href=&#34;https://github.com/zamansky/advent2020/blob/main/src/day10.clj&#34;&gt;here&lt;/a&gt;. 
&lt;/p&gt;
&lt;p&gt;
Fun problem today. Looking forward to tomorrow.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>A Teacher looks at Advent of Code 2020 - Days 7 and 8</title>
      <link>https://cestlaz.github.io/post/advent-2020-day0708/</link>
      <pubDate>Tue, 08 Dec 2020 14:47:17 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/advent-2020-day0708/</guid>
      <description>&lt;p&gt;
Today we&amp;#39;ll talk about days &lt;a href=&#34;https://adventofcode.com/2020/day/7&#34;&gt;seven&lt;/a&gt; and &lt;a href=&#34;https://adventofcode.com/2020/day/8&#34;&gt;eight&lt;/a&gt;. 
&lt;/p&gt;
&lt;p&gt;
Let&amp;#39;s start with 7. I teach all morning on Mondays. I woke up and
worked out and then took a look at the problem in the few minutes
before class. It was certainly harder than days one through six but I
felt it was something I knew I could do based on past experience so I
quickly started to throw something together. I tried to finish it in
the between classes but couldn&amp;#39;t get the right answer to part
one. After class I spent more time debugging. I was pretty certain my
algorithm was right and it turns out it was. The problem was in my
parsing.
&lt;/p&gt;
&lt;p&gt;
Anyway, to the problem. Read it over if you haven&amp;#39;t yet.
&lt;/p&gt;
&lt;p&gt;
If you&amp;#39;ve studied data structures and algorithms you&amp;#39;ll recognize that
this problem can be viewed as a graph problem. Bags are nodes in the
graph and edges tell you what bags each bag can contain.
&lt;/p&gt;
&lt;p&gt;
The data is set up to represent a graph like this: 
&lt;/p&gt;
&lt;img width=&#34;50%&#34; src=&#34;https://cestlaz.github.io/img/advent2020-0708/g1.png&#34;&gt;
&lt;p&gt;
I left out the weights (numbers of bags). This can be represented in
an adjacency list. The video does this in Clojure but in Python, you&amp;#39;d
get something that starts like this:
&lt;/p&gt;
&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;lightred&amp;#39;&lt;/span&gt;     : [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;brightwhite&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;mutedyellow&amp;#39;&lt;/span&gt;],
 &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;darkorange&amp;#39;&lt;/span&gt;   : [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;brightwhite&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;mutedyellow&amp;#39;&lt;/span&gt;],
 &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;brightwhite&amp;#39;&lt;/span&gt;  : [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;shinygold&amp;#39;&lt;/span&gt;],
 &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;mutedyellow&amp;#39;&lt;/span&gt;  : [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;shinygold&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;fadedblue&amp;#39;&lt;/span&gt;],
 &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;shinygold&amp;#39;&lt;/span&gt;    :[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;darkolive&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;vibrantplum&amp;#39;&lt;/span&gt;],
 &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;darkolive&amp;#39;&lt;/span&gt;    :[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;fadedblue&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;dottedblack&amp;#39;&lt;/span&gt;],
 &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;vibtrantplum&amp;#39;&lt;/span&gt; :[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;fadedblue&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;dottedblack&amp;#39;&lt;/span&gt;]}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;
The challenge comes when you see that many starting points can lead to
the goal of the shiny gold bag. 
&lt;/p&gt;
&lt;p&gt;
The insight comes when you notice that you can &amp;#34;reverse the edges.&amp;#34;
For example, when we saw the line that led to the lightred contains
brightwhite and mutedyellow, instead we represent it the other way
making two entries - brightwhite is contained by lightred and also
mutedyellow is contained by lightred. 
&lt;/p&gt;
&lt;p&gt;
Once we set this up the solution is a breadth or depth first search. 
&lt;/p&gt;
&lt;p&gt;
The video doesn&amp;#39;t do a complet walk through but goes into more
details. 
&lt;/p&gt;
&lt;p&gt;
I like this type of problem for classes because students can see that
sometimes changing the data can make the problem much easier. If you
implement the adjacency list as it&amp;#39;s presented the problem seems
hard. Once you see you can go from shinygold out instead of from  all
the bags to shinygold the porblem becomes much easier.
&lt;/p&gt;
&lt;p&gt;
The other interesting point is that without fundamental data
structures and algorithms this is a hard problem. With them, it&amp;#39;s
pretty straightforward. Remind your students of this when they ask why
they need data structures and algorithms. This problem might be made
up but graphs represent a lot of things in the real world and graph
traversals and algorithms can solve a lot of real world problems
&lt;/p&gt;
&lt;p&gt;
Now to day 8. 
&lt;/p&gt;
&lt;p&gt;
Day 8 involved a simple machine simulator and leads to a very
straightforward solution - write a program that simulates the computer
stated in the problem. My solution tries to approach the problem in a
functional way and also makes use of a function lookup table to avoid
multiple ifs. The solution and complete walk through is in the video
and in Clojure but a similar solution can be written in Python.
&lt;/p&gt;
&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/IEjnnRhUAxg&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;
</description>
    </item>
    
    <item>
      <title>A Teacher looks at Advent of Code 2020 - Day 06</title>
      <link>https://cestlaz.github.io/post/advent-2020-day06/</link>
      <pubDate>Sun, 06 Dec 2020 10:14:03 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/advent-2020-day06/</guid>
      <description>&lt;p&gt;
&lt;a href=&#34;https://adventofcode.com/2020/day/6&#34;&gt;Day 6&lt;/a&gt; turned out to be pretty straightforward. Like day 4 you had to
deal with two consecutive newlines when parsing the data but assuming
you did day 4 that&amp;#39;s no problem. 
&lt;/p&gt;
&lt;p&gt;
The gist is that a group is formed by consecutive lines and groups are
separated by a blank line. Each line in each group is a string of
letters representing answers to questions. For instance, for this
group: 
&lt;/p&gt;
&lt;pre class=&#34;example&#34;&gt;
abc
abd
ab
&lt;/pre&gt;
&lt;p&gt;
you have three people. The first answered &amp;#39;yes&amp;#39; to a, b, and c. the
second to a,b, and d and the third to a and b. 
&lt;/p&gt;
&lt;p&gt;
Your goal was to figure out how many different questions did each
group answer &amp;#39;yes&amp;#39; to and what was the total across the groups. 
&lt;/p&gt;
&lt;p&gt;
It seemed that the easiest thing to do was to take each group, remove
the newlines and then count the unique characters. 
&lt;/p&gt;
&lt;p&gt;
In Python, something like this (Clojure in the video and on &lt;a href=&#34;https://github.com/zamansky/advent2020/blob/main/src/day06.clj&#34;&gt;GitHub&lt;/a&gt;)
&lt;/p&gt;
&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;d&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;abc&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;abd&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;ab&amp;#34;&lt;/span&gt;
d &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; d&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;replace(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;)
s &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; set(d)
ans &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; len(s)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;
So, you just have to do that for each group and add them all up.
&lt;/p&gt;
&lt;p&gt;
Part 2 added a small twist. Now you wanted to look at each group and
count the number of answers that everyone in that group answered &amp;#34;yes&amp;#34;
to. For the above example, it would be 2 - everyone answered a and b.
&lt;/p&gt;
&lt;p&gt;
Assuming your language supports set operations, you can just use
union.
&lt;/p&gt;
&lt;p&gt;
Again in Python: 
&lt;/p&gt;
&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;d &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;abc&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;abd&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;ab&amp;#34;&lt;/span&gt;
d_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; d&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split()
result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; set(d_list[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;])

&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; item &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; d_list[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:]:
    result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; result &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; set(item)
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(result)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;
Again,  do it for all the groups and add it up.
&lt;/p&gt;
&lt;p&gt;
This is a great question to go over set operations!!
&lt;/p&gt;
&lt;p&gt;
Check out the Clojure video for that approach where I also talk about
easier ways to complete yesterday&amp;#39;s problem.
&lt;/p&gt;
&lt;p&gt;
Enjoy!
&lt;/p&gt;
&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/I8dbKJ_315Q&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;
</description>
    </item>
    
    <item>
      <title>A teacher looks at Advent of Code 2020 - Day 5</title>
      <link>https://cestlaz.github.io/post/advent-2020-day05/</link>
      <pubDate>Sat, 05 Dec 2020 11:18:59 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/advent-2020-day05/</guid>
      <description>&lt;p&gt;
&lt;a href=&#34;https://adventofcode.com/2020/day/5&#34;&gt;Day five&amp;#39;s problem&lt;/a&gt; is a nice one for an early CS class. It can be very
much brute forced but it also touches on some nice concepts and can be
solved pretty elegantly. I&amp;#39;ve embedded a walk through in Clojure at
the end but a Python solution would be pretty similar.  
&lt;/p&gt;
&lt;p&gt;
Read the problem over if you haven&amp;#39;t. At it&amp;#39;s core you are taking a boarding
pass representing a coded airplane seat number and you&amp;#39;re converting
it to a known seat (row and column). The encoding scheme uses &lt;a href=&#34;https://en.wikipedia.org/wiki/Binary_space_partitioning&#34;&gt;binary
space partitioning&lt;/a&gt;. The &lt;a href=&#34;https://adventofcode.com/2020/day/5&#34;&gt;question statement&lt;/a&gt; goes over the details.
&lt;/p&gt;
&lt;p&gt;
One of the first things to notice is that you should separate the pass
into two parts - the row, which consists of the first seven characters
each one being an &lt;strong&gt;F&lt;/strong&gt; or a &lt;strong&gt;B&lt;/strong&gt; and the last three which are the
columns and they are marked with either a &lt;strong&gt;R&lt;/strong&gt; or an &lt;strong&gt;L&lt;/strong&gt;.
&lt;/p&gt;
&lt;p&gt;
So, the sample pass &lt;strong&gt;FBFBBFFRLR&lt;/strong&gt; separates into &lt;strong&gt;FBFBBFF&lt;/strong&gt; for the row
and &lt;strong&gt;RLR&lt;/strong&gt; for the clumn.
&lt;/p&gt;
&lt;p&gt;
There are 128 rows numbered 0 through 127 so you start with 127 (the
back of the plane) and then depending on if the next character is an
&lt;strong&gt;F&lt;/strong&gt; or a &lt;strong&gt;B&lt;/strong&gt; you either subtract out half the range size or you
don&amp;#39;t. If the character is an &lt;strong&gt;B&lt;/strong&gt; you don&amp;#39;t since you&amp;#39;re at the back
of the section and the back rows are higher. If it&amp;#39;s a &lt;strong&gt;F&lt;/strong&gt; you do
since you&amp;#39;re at the front and front rows have lower numbers.
&lt;/p&gt;
&lt;p&gt;
So, the first &lt;strong&gt;F&lt;/strong&gt; says you&amp;#39;re at the front so you subtract &lt;strong&gt;half&lt;/strong&gt; the
range and now you&amp;#39;re looking at 0-63. The next character is a &lt;strong&gt;B&lt;/strong&gt; so
you don&amp;#39;t subtract anything but you&amp;#39;ll be next looking at 32 through
63 etc. The question has a full walk through.
&lt;/p&gt;
&lt;p&gt;
Looking at the  row string, you have &lt;strong&gt;FBFBBFF&lt;/strong&gt;. If we substitute the
amount we subtract for the letters we get &lt;code&gt;64 0 16 0 0 2 1&lt;/code&gt; or the
place values of a binary number &lt;strong&gt;in reverse&lt;/strong&gt;. 
&lt;/p&gt;
&lt;p&gt;
In my solution, I reversed the string and then converted each &lt;strong&gt;F&lt;/strong&gt; or &lt;strong&gt;B&lt;/strong&gt;
into a number. A &lt;strong&gt;B&lt;/strong&gt; became a 0 and an &lt;strong&gt;F&lt;/strong&gt; became 2^i where &lt;strong&gt;i&lt;/strong&gt; is the
location (index) in the string. For the sample string, once reversed
to &lt;strong&gt;FFBBFBF&lt;/strong&gt; it gives &lt;code&gt;1 2 0 0 16 0 64&lt;/code&gt;. If we sum those up and
subtract from 127 we get our row number.
&lt;/p&gt;
&lt;p&gt;
We basically can do the same thing for the column but there you
subtract from 7.
&lt;/p&gt;
&lt;p&gt;
Part 1 of the question asks you to map the row and column to a final
number by calcualing &lt;code&gt;row*8+col&lt;/code&gt; and then find the highest seat number
from a give list of boarding passes.
&lt;/p&gt;
&lt;p&gt;
Part 2 requires you look through all the boarding passes to determine
your actual seat - the one seat missing from the data set.
&lt;/p&gt;
&lt;p&gt;
Lots of good stuff for a class in this question.
&lt;/p&gt;
&lt;p&gt;
You&amp;#39;ve got the basic data parsing as usual but I love that this can be
brute forced but by noticing the base 2 nature of the data you can
write up a number of different elegant solutions. 
&lt;/p&gt;
&lt;p&gt;
Here&amp;#39;s a complete solution coded up in Clojure. You can also check all
my Advent of Code solutions up on GitHub
&lt;a href=&#34;https://github.com/zamansky/advent2020&#34;&gt;https://github.com/zamansky/advent2020&lt;/a&gt;. 
&lt;/p&gt;
&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/lq5AdWkzyjg&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;
</description>
    </item>
    
    <item>
      <title>A Teacher Looks at Advent of Code 2020 - Day 4</title>
      <link>https://cestlaz.github.io/post/advent-2020-day04/</link>
      <pubDate>Fri, 04 Dec 2020 17:31:06 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/advent-2020-day04/</guid>
      <description>&lt;p&gt;
One of the nice things about Advent of Code is that it gets me to
explore language features I haven&amp;#39;t used yet. Today&amp;#39;s problem got me
to explore Clojure Spec which is a very cool validation
library. There&amp;#39;s a complete run through of the solution in Clojure in
the video but here I&amp;#39;ll talk about the problem in Python (mostly). 
&lt;/p&gt;
&lt;p&gt;
Today&amp;#39;s &lt;a href=&#34;https://adventofcode.com/2020/day/4&#34;&gt;problem&lt;/a&gt; is about validating passports. You start with a text
file consisting of passport information. Each passport is one or more
lines with each line having a bunch of key value pairs. For example,
these two lines represent a passport for someone who&amp;#39;s eye color (ecl)
is gray (gry) and who was born (byr) in 1937:
&lt;/p&gt;
&lt;pre class=&#34;example&#34;&gt;
ecl:gry pid:860033327 eyr:2020 hcl:#fffffd
byr:1937 iyr:2017 cid:147 hgt:183cm
&lt;/pre&gt;
&lt;p&gt;
The catch is that one passport can span multiple lines and that
passports are separated by two consecutive newlines in the file.
&lt;/p&gt;
&lt;p&gt;
A passport has 8 field types with one, Country of Origin (cid) being
optional.
&lt;/p&gt;
&lt;p&gt;
For part 1, a valid passport is one that contains all 7 required
fields. 
&lt;/p&gt;
&lt;p&gt;
The video goes over a Clojure solution which, I think is cleaner but
the idea is the same as the Python I&amp;#39;ll talk about here.
&lt;/p&gt;
&lt;p&gt;
Splitting the data into a list of potential passports is easy because
you can split the string on two newlines: 
&lt;/p&gt;
&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; open(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;../data/sample04.dat&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read()
data&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;data&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;
Now we have a list of string. 
&lt;/p&gt;
&lt;p&gt;
Next, we can split each string on whitespace so that each string in
each sublist is a string in the form &lt;strong&gt;k:v&lt;/strong&gt;: 
&lt;/p&gt;
&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;data_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; d &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; data:
    data_list&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append([item &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; item &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; d&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split()])&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;
So, for example, data_list[0] might look like this: 
&lt;/p&gt;
&lt;pre class=&#34;example&#34;&gt;
[&amp;#39;ecl:gry&amp;#39;, &amp;#39;pid:860033327&amp;#39;, &amp;#39;eyr:2020&amp;#39;, &amp;#39;hcl:#fffffd&amp;#39;, &amp;#39;byr:1937&amp;#39;, &amp;#39;iyr:2017&amp;#39;, &amp;#39;cid:147&amp;#39;, &amp;#39;hgt:183cm&amp;#39;]
&lt;/pre&gt;
&lt;p&gt;
Finally, we can convert each passport into a dictionary: 
&lt;/p&gt;
&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;data_dicts&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;[]
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; d &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; data_list:
    temp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; { item&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;:&amp;#34;&lt;/span&gt;)[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]:item&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;:&amp;#34;&lt;/span&gt;)[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; item &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; d} 
    temp&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pop(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;cid&amp;#39;&lt;/span&gt;,None)
    data_dicts&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(temp)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;
The easiest way I came up with to check if a passport was valid was to
make a set out of a list of required field names, make a set out of
each potential passports field names (they&amp;#39;re dictionary keys) and see
if they&amp;#39;re equal: 
&lt;/p&gt;
&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;fields &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; set([&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;byr&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;iyr&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;eyr&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hgt&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hcl&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ecl&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pid&amp;#34;&lt;/span&gt;])
valid_passports &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;  [set(x&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;keys()) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; fields &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; data_dicts]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;
I think the Clojure code is cleaner but it&amp;#39;s much the same.
&lt;/p&gt;
&lt;p&gt;
Part two added a twist - you now have to not only see if the required
fields are there but you had to make sure they had valid data. For
example, height had to start with a positive integer followed by
either &lt;strong&gt;cm&lt;/strong&gt; or &lt;strong&gt;in&lt;/strong&gt;. If it was &lt;strong&gt;cm&lt;/strong&gt;, the number had to be in a certain
range and if it was &lt;strong&gt;in&lt;/strong&gt; it had to be within a different range. 
&lt;/p&gt;
&lt;p&gt;
This didn&amp;#39;t sound hard but could get tricky. For each field type you
could write a function that took in the value and returned true or
false depending on its validity - lots of ad hoc code. You could then
loop over all the passports and test to see if all the conditions were
met. 
&lt;/p&gt;
&lt;p&gt;
It turns out that Clojure has a really cool library - Clojure Spec
that does just that. You set up validators for each field type and
then one for an entire passport. Here&amp;#39;s the code: 
&lt;/p&gt;
&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;s/def&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;::byr&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;s/and&lt;/span&gt; string? &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;(&amp;gt;= (&lt;span style=&#34;color:#a6e22e&#34;&gt;u/parse-int&lt;/span&gt; %) &lt;span style=&#34;color:#ae81ff&#34;&gt;1920&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;(&amp;lt;= (&lt;span style=&#34;color:#a6e22e&#34;&gt;u/parse-int&lt;/span&gt; %) &lt;span style=&#34;color:#ae81ff&#34;&gt;2002&lt;/span&gt;)))
(&lt;span style=&#34;color:#a6e22e&#34;&gt;s/def&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;::iyr&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;s/and&lt;/span&gt; string? &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;(&amp;gt;= (&lt;span style=&#34;color:#a6e22e&#34;&gt;u/parse-int&lt;/span&gt; %) &lt;span style=&#34;color:#ae81ff&#34;&gt;2010&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;(&amp;lt;= (&lt;span style=&#34;color:#a6e22e&#34;&gt;u/parse-int&lt;/span&gt; %) &lt;span style=&#34;color:#ae81ff&#34;&gt;2020&lt;/span&gt;)))
(&lt;span style=&#34;color:#a6e22e&#34;&gt;s/def&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;::eyr&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;s/and&lt;/span&gt; string? &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;(&amp;gt;= (&lt;span style=&#34;color:#a6e22e&#34;&gt;u/parse-int&lt;/span&gt; %) &lt;span style=&#34;color:#ae81ff&#34;&gt;2020&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;(&amp;lt;= (&lt;span style=&#34;color:#a6e22e&#34;&gt;u/parse-int&lt;/span&gt; %) &lt;span style=&#34;color:#ae81ff&#34;&gt;2030&lt;/span&gt;)))
(&lt;span style=&#34;color:#a6e22e&#34;&gt;s/def&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;::hgt&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;s/and&lt;/span&gt; string? hgt-test))
(&lt;span style=&#34;color:#a6e22e&#34;&gt;s/def&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;::hcl&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;s/and&lt;/span&gt; string? &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;(re-find &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;#[0-9a-f]{6}&amp;#34;&lt;/span&gt; %)))
(&lt;span style=&#34;color:#a6e22e&#34;&gt;s/def&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;::ecl&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;s/and&lt;/span&gt; string? &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;(re-find &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;amb|blu|brn|gry|grn|hzl|oth&amp;#34;&lt;/span&gt; %)))
(&lt;span style=&#34;color:#a6e22e&#34;&gt;s/def&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;::pid&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;s/and&lt;/span&gt; string? &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;(re-find &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;^[0-9]{9}$&amp;#34;&lt;/span&gt; % )))
(&lt;span style=&#34;color:#a6e22e&#34;&gt;s/def&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;::cid&lt;/span&gt; string?)
(&lt;span style=&#34;color:#a6e22e&#34;&gt;s/def&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;::passport&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;s/keys&lt;/span&gt;
                   &lt;span style=&#34;color:#e6db74&#34;&gt;:req&lt;/span&gt; [&lt;span style=&#34;color:#e6db74&#34;&gt;::byr&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;::iyr&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;::eyr&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;::hgt&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;::hcl&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;::ecl&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;::pid&lt;/span&gt;]
                   &lt;span style=&#34;color:#e6db74&#34;&gt;:opt&lt;/span&gt; [&lt;span style=&#34;color:#e6db74&#34;&gt;::cid&lt;/span&gt;]))

(&lt;span style=&#34;color:#a6e22e&#34;&gt;s/valid?&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;::passport&lt;/span&gt; test-passport)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;
The last line would test to see if &lt;strong&gt;test-passport&lt;/strong&gt; was valid. It&amp;#39;s all
covered in detail in the video.
&lt;/p&gt;
&lt;p&gt;
Clojure spec wasn&amp;#39;t required for this problem but I&amp;#39;ve been meaning to
play with it for a while and it led to a clean and elegant way of
testing passports. 
&lt;/p&gt;
&lt;p&gt;
Not sure if I&amp;#39;ll get to more posts or even solve more problems - I&amp;#39;m
trying to limit my own screen time over the weekends but we&amp;#39;ll see.
&lt;/p&gt;
&lt;p&gt;
If you want to check out all the Clojure goodness here it is: Enjoy!
&lt;/p&gt;
&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/QzdCrJgXsww&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;
</description>
    </item>
    
    <item>
      <title>A Teacher Looks at Advent of Code 2020 - Day 3</title>
      <link>https://cestlaz.github.io/post/advent-2020-day03/</link>
      <pubDate>Thu, 03 Dec 2020 14:27:02 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/advent-2020-day03/</guid>
      <description>&lt;p&gt;
I thought I&amp;#39;d do a video for today. No particular reason. Mostly why
not.
&lt;/p&gt;
&lt;p&gt;
I&amp;#39;ll talk about day 3&amp;#39;s problem and code up a solution in Clojure. If
you haven&amp;#39;t ever used Clojure, hopefully this will give a bit of the
flavor. This video also serves double duty as being my next Using
Emacs video since it demos Emacs&amp;#39;s Clojure tools. Mostly Cider which
even with a few quirks is the best development environment I&amp;#39;ve ever
used. 
&lt;/p&gt;
&lt;p&gt;
I don&amp;#39;t know if I&amp;#39;ll do any more videos or blog posts on AOC this
year. I hope to but I&amp;#39;m going to have to get to end of semester
obligations soon so you never know.
&lt;/p&gt;
&lt;p&gt;
Enjoy!
&lt;/p&gt;
&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/ecJ1TJGWrfs&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;
</description>
    </item>
    
    <item>
      <title>A Teacher Looks at Advent of Code 2020 - Day 2</title>
      <link>https://cestlaz.github.io/post/advent-2020-day02/</link>
      <pubDate>Wed, 02 Dec 2020 12:27:27 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/advent-2020-day02/</guid>
      <description>&lt;p&gt;
Day two introduced some staples of staples of not only Advent of Code but
also of programming problems in general. The first is input
parsing. For this problem you get lines of input like this:
&lt;/p&gt;
&lt;pre class=&#34;example&#34;&gt;
1-3 a: abcde
1-3 b: cdefg
2-9 c: cccccccc
&lt;/pre&gt;
&lt;p&gt;
or in general
&lt;/p&gt;
&lt;p&gt;
&lt;strong&gt;number_1&lt;/strong&gt;-&lt;strong&gt;number_2&lt;/strong&gt; &lt;strong&gt;Letter&lt;/strong&gt;: &lt;strong&gt;String&lt;/strong&gt; 
&lt;/p&gt;
&lt;p&gt;
There are a few ways to handle this. One is to brute force it. In
Python maybe something like: 
&lt;/p&gt;
&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;sample_line&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;4-15 f: abcdefg&amp;#34;&lt;/span&gt;
sample_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sample_line&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split()
numbers&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;sample_list[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]
letter&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;sample_list[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]
string&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;sample_list[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;]

number_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; numbers&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;-&amp;#39;&lt;/span&gt;)
num1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; int(number_list[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;])
num2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; int(number_list[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;])

letter &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; letter[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]

&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(num1, num2, letter, string)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;
or more concisely: 
&lt;/p&gt;
&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;sample_line&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;4-15 f: abcdefg&amp;#34;&lt;/span&gt;

(numbers,letter,string) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sample_line&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split()

(num1,num2) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [int(x) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; numbers&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;-&amp;#39;&lt;/span&gt;)]

letter &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; letter[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]

&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(num1, num2, letter, string)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;
If you&amp;#39;re working in a language like C, tools like &lt;code&gt;scanf&lt;/code&gt; can make
things easier. I generally turn to &lt;a href=&#34;https://blog.usejournal.com/regular-expressions-a-complete-beginners-tutorial-c7327b9fd8eb&#34;&gt;Regular Expressions&lt;/a&gt; and if you&amp;#39;re
doing some AOC with your classes this is a great time to introduce
regex. Basically, you set up a pattern with special symbols to
represent things like sequences of digits and then the regex matcher
does the hard work.
&lt;/p&gt;
&lt;p&gt;
Here&amp;#39;s the code to 
&lt;/p&gt;
&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;8
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;parser_expression&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;(\d+)-(\d+) ([a-z]): ([a-z]*)&amp;#34;&lt;/span&gt;
data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; line &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; open(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;../data/day02.dat&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;readlines():
    x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; re&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;search(parser_expression,line)
    (mini,maxi,letter,password) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;groups()
    mini &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; int(mini)
    maxi &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; int(maxi)
    data&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append([mini,maxi,letter,password])&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;
The &lt;code&gt;parser_expression&lt;/code&gt; in line 1 is the regular expression. Each
section in parentheses is a &amp;#34;group&amp;#34; or a pattern that will be
extracted. The &lt;strong&gt;\d&lt;/strong&gt; for instance means a digit and the &lt;strong&gt;+&lt;/strong&gt; adger it
means 1 or more digits so basically that will match any positive
integer. The &lt;strong&gt;[a-z]&lt;/strong&gt; matches a single character and the *after the
final character match means zero or more of them. Once you know
regular expressions, parsing lines like this becomes very easy. The
only thing that made the above code messy at all was that I wanted to
convert the two numbers into integers rather than leave them as
strings. 
&lt;/p&gt;
&lt;p&gt;
There are a couple of things worth thinking about here. First is know
your libraries. If you know regex the parsing is basically all
done. If not, you have a bit of work. On the other hand, you&amp;#39;re
probably not going to ever have to parse input exactly like this again
so it doesn&amp;#39;t make sense writing a super robust set of  parsing
functions tied in with this data specification. That&amp;#39;s the second
thing. Learning what to leave as building blocks and what to write
into libraries of your own. It&amp;#39;s most definitely worth writing a set
of routines that can be reused. Maybe something to parse dates in a
standard format would be an example. On the other hand, it&amp;#39;s also
worth knowing when you probably won&amp;#39;t be able to reuse things or when
generalizing to a library or set of functions you have to spend too
much time on a hundred options to make in general purpose.
&lt;/p&gt;
&lt;p&gt;
Now, part 1 of the problem itself is nice because there are a lot of
ways to do it. You could loop through the password and count the
number of times a letter occurs: 
&lt;/p&gt;
&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;count &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
subpassword &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; password[mini&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,maxi]
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; letter &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; subpassword:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; letter &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; what_im_looking_for:
        count &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; count &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;
or with a list comprehension &lt;code&gt;count = [x for x in password if x ==
waht_im_looking_for ]&lt;/code&gt;.
&lt;/p&gt;
&lt;p&gt;
You could be more general and build a hash table of counts and then
pull what you want: 
&lt;/p&gt;
&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;frequencies&lt;/span&gt;(word):
    d&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;{}
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; letter &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; word:
        d&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;setdefault(letter,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
        d[letter]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;d[letter]&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; d&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;
This is admittedly overkill for the problem but one might need this
for part 2. I coded my original solution in Clojure and Clojure has a
function that does this in one shot: &lt;code&gt;frequencies&lt;/code&gt; so I just used that
and pulled the letter I needed.
&lt;/p&gt;
&lt;p&gt;
Once you have the count, it&amp;#39;s simple enough to see if it&amp;#39;s in the
range.
&lt;/p&gt;
&lt;p&gt;
Part 2 should have been easy but for me it was a lesson in
reading. You had to pull characters from the password at two specific
indices and see if one or the other, but not both were the letter in
question. Basically an xor. The first mistake one could make has to do
with the indexing and the second in using a regular or which students
will be more familiar with. 
&lt;/p&gt;
&lt;p&gt;
My mistake is that I misread the question as requiring that you have
one instance of the letter within the &lt;strong&gt;range&lt;/strong&gt; from the low index to
the high index not one instance at either of those two points Needless
to say, lots of wasted time and feeling silly. 
&lt;/p&gt;
&lt;p&gt;
So that&amp;#39;s day 2. The question is very approachable for APCS-A  and I&amp;#39;d
say even CS0 students. The interesting part to teach would be dealing
with the input, regular expressions, and how much to generalize into
utility functions when writing code over time.
&lt;/p&gt;
&lt;p&gt;
Hope to have time to solve and write up more of these but getting to
crunch time in the semester.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>A Teacher Looks at Advent of Code 2020 - Day 1</title>
      <link>https://cestlaz.github.io/post/advent-2020-day-01/</link>
      <pubDate>Tue, 01 Dec 2020 09:03:39 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/advent-2020-day-01/</guid>
      <description>&lt;p&gt;
So, yesterday I was chatting with my daughter. She was talking with
her team and for some reason one of them pulled out an interview
question from their company&amp;#39;s question bank. Turns out it was today&amp;#39;s
Advent of Code problem. 
&lt;/p&gt;
&lt;p&gt;
As with past years, I&amp;#39;m going to try to solve the problems in Clojure
but if I can will talk Python when I talk about solutions. 
&lt;/p&gt;
&lt;p&gt;
Part 1 of the problem basically asks for you to find a pair of numbers
in an array that sum to a specific value. In this case 2020. Figuring
that this was day 1 I didn&amp;#39;t expect a crazy large data set or any
other tricks or weirdness - a straightforward solution should
suffice. Simply a loop within a loop and sum up all the pairs: 
&lt;/p&gt;
&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; data:
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; y &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; data:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; x&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;y &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2020&lt;/span&gt;:
      &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(x&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;y)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;
Nothing fancy but it gets the job done. It does print out the answer
twice since x and y both go through all the indices but that&amp;#39;s no big
deal.
&lt;/p&gt;
&lt;p&gt;
The part 2 twist was that now you were looking for a set of three
entries that added up to 220. Once again, not a big deal: 
&lt;/p&gt;
&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; data:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; y &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; data:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; z &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; data:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; x&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;y&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;z &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2020&lt;/span&gt;:
                &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(x&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;y&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;z)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;
As before, you&amp;#39;ll get multiple answers but no big deal.
&lt;/p&gt;
&lt;p&gt;
What I like about this one is that you can think about this as a
looping exercise as above but you can also think about it as a list
processing exercise, that is, by thinking about it with more of a
functional programming bent. 
&lt;/p&gt;
&lt;p&gt;
The key insight here is that the question was clear in that there will
only be one pair in part 1 that satisfies the problem and likewise
only one pair in part 2. 
&lt;/p&gt;
&lt;p&gt;
If we look at each item in our data set, it&amp;#39;s part of the answer if
and only if there&amp;#39;s another number in the set equal to 2020 minus that
item. This leads to a list comprehension
&lt;/p&gt;
&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;part1_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [x &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; data &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2020&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; data]&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;
Now, part1_list should contain the two items we need. The first value &lt;code&gt;x&lt;/code&gt;
was found when the comprehension saw that &lt;code&gt;2020 - x&lt;/code&gt; was in the list
and &lt;code&gt;2020-x&lt;/code&gt; which is the second value was confirmed when the for part
of the comprehension gets to it and finds that the first item is in
the list. Then, it&amp;#39;s a simple matter of just multiplying the two
numbers together for the answer.
&lt;/p&gt;
&lt;p&gt;
Part 2 is similar but you can use a list comprehension to iterate over
all pairs of elements and then you calculate the third:
&lt;/p&gt;
&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;part2_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [x &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; data &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; y &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; data &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2020&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;(x&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;y) &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; data]&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;
Of course you could have put &lt;code&gt;y&lt;/code&gt; or &lt;code&gt;2020-(x+y)&lt;/code&gt; in place of that
first &lt;code&gt;x&lt;/code&gt;. 
&lt;/p&gt;
&lt;p&gt;
Part 2 has an additional subtlety in that you&amp;#39;ll get the solution
multiple times which makes sense you&amp;#39;re hitting each triple multiple
times. To fix that, turn it into a set: 
&lt;/p&gt;
&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;part2_set &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; set(part2_list)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;
and then calculate the product.
&lt;/p&gt;
&lt;p&gt;
At the core, both of these solutions are really the same but you get
to them by thinking very differently. The first one is all about the
loops - thinking about data[i] at a very low discrete level. The
second approach is thinking about the data as a list and processing
that list at a much higher level. This could be an ice problem to
transition between the two approaches.
&lt;/p&gt;
&lt;p&gt;
Looking forward to what tomorrow&amp;#39;s problem brings.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Advent of Code 2020</title>
      <link>https://cestlaz.github.io/post/advent-2020-leadin/</link>
      <pubDate>Mon, 30 Nov 2020 14:21:17 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/advent-2020-leadin/</guid>
      <description>&lt;p&gt;
Tomorrow, or more practically, tonight at Midnight,  &lt;a href=&#34;https://twitter.com/ericwastl&#34;&gt;Eric Wastl&lt;/a&gt; will
once again launch the &lt;a href=&#34;https://adventofcode.com&#34;&gt;Advent of Code&lt;/a&gt;. As I&amp;#39;ve written before, it&amp;#39;s a
month long event where each day a new programming problem is
released. The problems range in difficulty and complexity. Some are
very approachable to beginners and some are crazy challenging. I&amp;#39;ve
written a bunch about AOC in past years:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://cestlaz.github.io/post/solve-a-to-solve-b/&#34;&gt;Solve A to Solve B&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://cestlaz.github.io/post/aoc-data-structures-hidden-complexity/&#34;&gt;Data structures and Hidden Complexity&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://cestlaz.github.io/posts/advent-2017-4-6/&#34;&gt;Tools can shape- how we think&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://cestlaz.github.io/post/advent-2019-day1/&#34;&gt;2019 day 1&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://cestlaz.github.io/post/advent-2019-day2/&#34;&gt;2019 day 2&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://cestlaz.github.io/post/advent-2019-day3/&#34;&gt;2019 day 3&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://cestlaz.github.io/post/advent-2019-day4/&#34;&gt;2019 day 4&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://cestlaz.github.io/post/advent-2019-day8/&#34;&gt;2019 day 8&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://cestlaz.github.io/post/advent-2019-day8-part2/&#34;&gt;2019 day 8 addendum&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
and a few more not listed.
&lt;/p&gt;
&lt;p&gt;
If you haven&amp;#39;t heard of AOC, at the stroke of midnight (Eastern), a
new problem is released. From there you can read the problem, get the
input and figure out a solution, usually by writing a program. You
then type in your answer and if it&amp;#39;s correct you get part 2 - usually
a creative spin on part one. Usually you&amp;#39;ll write a program to solve
the problems but sometimes you&amp;#39;ll write code just to explore and come
up with an answer. 
&lt;/p&gt;
&lt;p&gt;
Even though there&amp;#39;s a leader board and people can set up their own
private leader boards, I describe AOC as an event not as a
competition. I&amp;#39;ve had former students up near the top but a getting
there requires a lot more than just problem solving. First, you have
to be up when the problem is released, then you have to shortcut scan
what the question is asking. Having a library of pre-written utility
routines is a big help as is using a language that has a lot of
interactive scripty functionality like Python. It also assumes that
even if you do all that is needed, that life doesn&amp;#39;t get in the
way. This means that to get to the top of the leader board, like in
most competitions you have to train and prepare to do just that and
training for that doesn&amp;#39;t really translate to the rest of life&amp;#39;s
challenges.
&lt;/p&gt;
&lt;p&gt;
Solving the problems, though, can translate to other challenges you
might face so I look at AOC as an opportunity to explore some
interesting problems. 
&lt;/p&gt;
&lt;p&gt;
I&amp;#39;ve never finished all of them and that&amp;#39;s okay. Here&amp;#39;s my star count
for each of the years. You get one star for each part of each question
so that&amp;#39;s 50 total.
&lt;/p&gt;
&lt;table&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Year:&lt;/strong&gt;&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;2015&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;2016&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;2017&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;2018&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;2019&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Stars:&lt;/strong&gt;&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;26&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;40&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;11&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;23&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;31&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;
I&amp;#39;ve never gotten more than 40. I typically wake up and read the
question and see if I can solve it either then or over the course of
the day. Sometimes I&amp;#39;ll come back to a problem but usually not. Last
year, many problems were based on earlier ones. I had an issue in one
of those earlier solutions so never completed the later ones. 
&lt;/p&gt;
&lt;p&gt;
Maybe I&amp;#39;ll go back and finish more, maybe I won&amp;#39;t.
&lt;/p&gt;
&lt;p&gt;
None of this matters. 
&lt;/p&gt;
&lt;p&gt;
I had fun, learned a lot and as an added bonus, each problem gives me
an opportunity to reflect on how I might teach it or teach concepts
related to it.
&lt;/p&gt;
&lt;p&gt;
It all starts in a few hours so if you&amp;#39;re already planning on
participating, have a blast. If you haven&amp;#39;t, check it out.
&lt;/p&gt;
&lt;p&gt;
Advent of code can be found here: &lt;a href=&#34;https://adventofcode.com&#34;&gt;https://adventofcode.com&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
And, the AOC subreddit, which is great for problem discussions can be
found here: &lt;a href=&#34;https://www.reddit.com/r/adventofcode/&#34;&gt;https://www.reddit.com/r/adventofcode/&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
Enjoy. 
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>CS Teacher Prep - the big picture and the long game.</title>
      <link>https://cestlaz.github.io/post/teachers-prep-big-pic/</link>
      <pubDate>Wed, 25 Nov 2020 15:05:31 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/teachers-prep-big-pic/</guid>
      <description>&lt;p&gt;
Time to follow up on my &lt;a href=&#34;https://cestlaz.github.io/post/teachers-can-learn-cs/&#34;&gt;last post&lt;/a&gt; and all the surrounding
discussion. To be honest, I was a bit surprised at first to see that
many posters were all for what I consider a weak program. I think all
of us agreed that you want and need a gentle entry - you have to be
accessible to teachers with little or even no prior computer science
experience but I was taken back by the number of teachers who thought
it was fine to have a graduate level program where the teachers end up
with no more knowledge than a high school student taking APCS-A.
&lt;/p&gt;
&lt;p&gt;
Some teachers stated that they &amp;#34;were able to learn it all on their
own.&amp;#34; Others thought it was &amp;#34;enough for what I teach.&amp;#34; Many lamented
that if it&amp;#39;s too hard nobody would become CS teachers - something I
addressed in my last post.
&lt;/p&gt;
&lt;p&gt;
I realized that many were viewing this from a very narrow lense - the
lens of their own experiences and not looking at the big picture or
the long game.
&lt;/p&gt;
&lt;p&gt;
First thing to realize is that once a college creates a program it&amp;#39;s
unlikely to change it whole hog. If a college has starts with a
strong, rigorous certification program it will likely stay strong. A
weak one will stay weak. My go to example, although not for a program
is the old CISCO curriculum. The plan was to start teachers with basic
training and they&amp;#39;d mind the store while students took computer based
triaining models. I kept hearing that they&amp;#39;d ramp up the teacher
training later. It never happened. Some teachers knew real networking
already and some did indeed learn it on their own but too many were
just long term babysitters. Once programs are in place, they don&amp;#39;t
instantly morph into stronger programs. You&amp;#39;ll get some tweaks here
and there - I&amp;#39;ve already put in for some changes to my program but you
won&amp;#39;t see wholesale change.
&lt;/p&gt;
&lt;p&gt;
if our weak CS program is enrolling teachers and you don&amp;#39;t hear crazy
complaints you can bet it&amp;#39;s not going to get stronger and teachers
with the best of intentions to learn more will frequently find that
life gets in the way.
&lt;/p&gt;
&lt;p&gt;
The second thing to look at is the fact that this is a long game and
current non-CS teachers teaching CS is a temporary state. I&amp;#39;m
currently running a cohort of 21 teachers with experience ranging from
around 5 to 20 years. They&amp;#39;re not going to be teaching forever. In my
opinion, right now they fill a critical need - build a cadre of super
knowledgeable  amazing teachers in NYC who can host student teachers,
run workshops etc but the truth is, future generations of teachers
won&amp;#39;t come from other subject areas. They&amp;#39;ll come from preservice
programs - people who explicitly have decided to become CS teachers
from the start.
&lt;/p&gt;
&lt;p&gt;
That&amp;#39;s the long game and the big picture and those teachers need
quality programs. If our colleges create weak programs we&amp;#39;ll be left
with an eternity of under prepared teachers. If we have strong ones,
as teaching CS becomes a career path similar to teaching math or
science we&amp;#39;ll have well prepared teachers.
&lt;/p&gt;
&lt;p&gt;
This is the crossroads we&amp;#39;re at in many states. Will we do it right?
I&amp;#39;m not particularly optimistic. My feeling is that just like in other
subject areas there will be some strong programs out there and plenty
of jokes. All I can do is worry about my little corner of the world so
I&amp;#39;ll do what I can to make sure teacher candidates at Hunter have the
best possible experience and are as well prepared as they can possibly
be.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Teachers Can Learn CS and CS people will go into teaching</title>
      <link>https://cestlaz.github.io/post/teachers-can-learn-cs/</link>
      <pubDate>Fri, 20 Nov 2020 12:24:52 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/teachers-can-learn-cs/</guid>
      <description>&lt;p&gt;
A friend&amp;#39;s post brought my attention to a new graduate CS Education Certificate
program. It&amp;#39;s not a New York State program so isn&amp;#39;t in competition
with what I do but it&amp;#39;s the type of program that I was afraid of. The
type that will hurt CS education more than it will help. There was
enough discussion following the Facebook post that I thought I&amp;#39;d write
about it here.
&lt;/p&gt;
&lt;p&gt;
Before talking about the program itself, one issue that came up
multiple times in the Facebook thread is that old red herring - we
can&amp;#39;t teach teachers real CS because if they know the real deal
they&amp;#39;ll all go into industry. I mean, who would want to teach with all
those high paying tech jobs.
&lt;/p&gt;
&lt;p&gt;
I call BS on this.
&lt;/p&gt;
&lt;p&gt;
First, let&amp;#39;s look at math and science. While it&amp;#39;s true that since no
child left behind, teacher certificate has been greatly
neutered. Today you can be a math teacher and know math or you can be
a math teacher who took only &amp;#34;math-ed&amp;#34; classes and barely know high
school math. Back in the day you &lt;strong&gt;had to know math&lt;/strong&gt; or whatever your
field was. 
&lt;/p&gt;
&lt;p&gt;
New York&amp;#39;s always been the financial capital of the world and somebody
with a decent math background could always get a better than teacher
paying job on the street. Beyond that there have always been plenty of
other better paying options yet we have math teachers. Same for
science. We&amp;#39;ve got big pharma over in New Jersey yet we have science
teachers. Sure, math and science teachers are harder to find than say
English teachers but somehow they seem to be out there.
&lt;/p&gt;
&lt;p&gt;
The same will be true for CS teachers as long as there&amp;#39;s a path
towards a career. Up until recently there were very few CS teaching
positions and no certification programs so if you were a CS minded
person and wanted to teach you had two options - get a certification
in another area like math and try to teach CS anyway or go into
another field. Now that pathways into the profession are starting to
exist and one can forge a career teaching CS those CS minded teachers
to be can indeed enter the field. This will take time but it will
happen.
&lt;/p&gt;
&lt;p&gt;
Related is the old &amp;#34;you can&amp;#39;t be it if you can&amp;#39;t see it.&amp;#34; Up until
recently most schools didn&amp;#39;t offer CS so while students could see and
be inspired by say a history or math teacher and then follow in their
career footsteps the possibility of being a CS teacher never
existed. Now it does. True, we&amp;#39;re offering CS in far too few schools
and even in those schools we aren&amp;#39;t reaching all the kids but it&amp;#39;s a
long road and we&amp;#39;re just starting the trek.
&lt;/p&gt;
&lt;p&gt;
This journey will take years if not decades but at least we&amp;#39;ve started
the journey.
&lt;/p&gt;
&lt;p&gt;
A critical piece will be the graduate preparation programs which
brings us back to the certification program I mentioned at the start.
&lt;/p&gt;
&lt;p&gt;
Professional development and workshop models have been an important
first step to expose large numbers of existing teachers to CS and to
kickstart CS around the country but it isn&amp;#39;t sufficient. PD is
invariably tied tightly to a product and is for the most part mass
training. It&amp;#39;s not a model that can truly build top flight
teachers. It&amp;#39;s an important part of phase 1 but we have to go beyond
it. 
&lt;/p&gt;
&lt;p&gt;
That&amp;#39;s where the schools of education come in. They&amp;#39;re the ones
preparing new teachers and ultimately they will have to prepare CS
teachers as well. No matter what, well resourced schools will find
knowledgeable teachers but under resourced schools will, as usual,
have to take what they can get. Strong programs will create strong
teachers for these schools. Weak ones will leave our under resourced
schools further behind and this is why I go nuts when I see a bad
program that purports to prepare K12 CS teachers.
&lt;/p&gt;
&lt;p&gt;
The program in question requires the following courses:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
Computer Science Principles (3 credits)
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Java Programming (4 credits)
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Computational Thinking in K-12 Classrooms (3 credits)
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Equity in Computer Science Education (2 credits)
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Methods of Inclusive Computer Science Teaching (3 credits)
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
So to start you&amp;#39;re taking 7 &lt;strong&gt;graduate&lt;/strong&gt; credits in APCS Principles and
APCS-A and that&amp;#39;s basically it for CS content. It&amp;#39;s the quintessential
you take it you teach it. Heck, you might as well offer APCS-P to 10th
graders then just choose an eleventh grader to teach it the following
year. These are &lt;strong&gt;not&lt;/strong&gt; graduate level classes. Now, I get it, you have
to start somewhere and you want to be able to take in candidates with
no prior CS experience. That&amp;#39;s fine - you can start with a basic
programming course but this program both begins and ends there.
&lt;/p&gt;
&lt;p&gt;
It also offers a 3 credit class in Computational Thinking. I find this
interesting. I&amp;#39;m guessing it&amp;#39;s focused on teaching the younger
grades and as aside, this whole program looks like it would be pretty
good for an elementary school teacher. It just loses credibility as a
K12 program that includes high school. Based on course number it looks
that it&amp;#39;s classified as a Teaching and Learning course not a Computer
Science course so I really question what it&amp;#39;s all about anyway. It
also got me thinking - CS programs as far as I can tell don&amp;#39;t have
their students take a class in computational thinking. Between the CS
and other requirements we learn it but might not even use the label. 
&lt;/p&gt;
&lt;p&gt;
There are also two other teaching and learning courses - Methods and
Equity in CS. They could be fine but given what the overall design of
the program is, who knows.
&lt;/p&gt;
&lt;p&gt;
As I said before, this sounds like a great program for an elementary
school teacher but I certainly wouldn&amp;#39;t my kids taught in High School
by a teacher prepared in this way. I want my math teachers to know
math, history teachers to know history, and yes, CS teachers to know
CS. 
&lt;/p&gt;
&lt;p&gt;
I get it - we need to start from 0 but when you&amp;#39;re creating a
&lt;strong&gt;graduate&lt;/strong&gt; program the end product has to be a truly prepared teacher
or you&amp;#39;re doing a disservice to the teacher candidate, their students
and to the field as a whole.
&lt;/p&gt;
&lt;p&gt;
The thing is that you can do it right. I think our program at Hunter
does and the early results from our first cohort are confirming this. 
&lt;/p&gt;
&lt;p&gt;
Our first course is essentially a APCS-A alike because we know you
have to start form the floor. We expect our teachers to come in with
at least a little programming experience but given all the tutorials,
MOOCs, and standalone courses available I don&amp;#39;t think it&amp;#39;s
unreasonable to expect a teacher candidate to do a little pre-work to
get ready. We also point potential students to resources where they
can get up to speed.
&lt;/p&gt;
&lt;p&gt;
From there we go to data structures and also a topics course - depth
and breadth and as a fourth CS course we have an ethics course that
includes a strong programming component rather than just reading case
studies and articles. We complement the CS with a methods course and a
curriculum design course and also fieldwork which is reuquired by NY
State. 
&lt;/p&gt;
&lt;p&gt;
We talk about APCS-A and APCS-P in our CS Ed classes but don&amp;#39;t design
our program around them. A teacher should not only be able to work
with a provide curriculum but also be able to design their own.
&lt;/p&gt;
&lt;p&gt;
I think we&amp;#39;re getting it right and I think the reason for this is that
it&amp;#39;s designed by teachers who both know CS and have been teaching it
successfully for a long time and it&amp;#39;s designed to  prepare the types of
teachers we want to work with. 
&lt;/p&gt;
&lt;p&gt;
Yes, you have to start at nothing but you don&amp;#39;t want to end there and
the more good programs launch the more good teachers we&amp;#39;ll produce.
&lt;/p&gt;
&lt;p&gt;
If we build them, they will come.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Getting Supplies</title>
      <link>https://cestlaz.github.io/stories/painting/supplies/</link>
      <pubDate>Sat, 14 Nov 2020 20:24:10 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/stories/painting/supplies/</guid>
      <description>&lt;p&gt;
Where do I get my supplies? If this were six or more years ago I&amp;#39;d
head down to Pearl Paint on Canal Street just a stones throw from Sum
Dum Goy&amp;#39;s Fortune Cookie Factory.
&lt;/p&gt;

&lt;img width=&#34;250px&#34; src=&#34;https://external-content.duckduckgo.com/iu/?u=http%3A%2F%2Fmedia.timeout.com%2Fimages%2FresizeBestFit%2F100533181%2F660%2F370%2Fimage.jpg&amp;f=1&amp;nofb=1&#34;&gt;
&lt;p&gt;
Alas that magical store is long gone so what to do? 
&lt;/p&gt;
&lt;p&gt;
It seems that most of the instructional videos I find on YouTube have
links to supplies but they&amp;#39;re all to Amazon and, all things being
equal, I&amp;#39;d just as soon give someone else my business. On the other
hand, I&amp;#39;m not in a financial place that I want to pay a huge premium
out of principal.
&lt;/p&gt;
&lt;p&gt;
Fortunately, I&amp;#39;ve found two great supplies.
&lt;/p&gt;
&lt;p&gt;
&lt;a href=&#34;https://www.jerrysartarama.com/&#34;&gt;Jerry&amp;#39;s Artorama&lt;/a&gt; and &lt;a href=&#34;https://www.dickblick.com/&#34;&gt;Blick&lt;/a&gt;. 
&lt;/p&gt;
&lt;p&gt;
Both have huge inventories, mostly overlapping but not quite the
same. Both also seem to have an eternal sale going on. Navigation of
both sites takes getting used to but they both operate the same.
&lt;/p&gt;
&lt;p&gt;
Both seem to have very competitive prices. 
&lt;/p&gt;
&lt;p&gt;
Jerry&amp;#39;s has free shipping on orders over $45 and I generally get my
stuff in a couple of days. Blick seems to take longer and while there
frequently seems to be a free shipping discount code for orders over
$45 I don&amp;#39;t know if it&amp;#39;s always there.
&lt;/p&gt;
&lt;p&gt;
On the other hand, I get a teacher&amp;#39;s discount at Blick and there are
multiple brick and mortar Blick stores near my apartment so I can
support a local store and get things right away.
&lt;/p&gt;
&lt;p&gt;
I&amp;#39;ll also sometimes use Michael&amp;#39;s for Canvases but I&amp;#39;ll talk about
that in the canvas post.
&lt;/p&gt;
&lt;p&gt;
While neither of these are small businesses, both grew out of small
local businesses so I&amp;#39;d rather patronize them than Amazon. If I&amp;#39;m
missing any other great suppliers, please let me know. 
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Language choices for APCS</title>
      <link>https://cestlaz.github.io/post/apcs-languages/</link>
      <pubDate>Wed, 11 Nov 2020 13:31:21 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/apcs-languages/</guid>
      <description>&lt;p&gt;
Over on Facebook the semi-regular &amp;#34;is APCS-A going to Python&amp;#34; once
again appeared. I&amp;#39;m not going to get into Python vs Java. Each language giveth and
each language taketh away but it got me thinking about the history of
language changes.
&lt;/p&gt;
&lt;p&gt;
I titled this &amp;#34;Language choices for APCS&amp;#34; not APCS-A because back in
the day it was just APCS. At some point that split with APCS-A being similar
to what we have today and APCS-A being that plus a CS2 (data
structures) class. Finally after 2009, APCS-AB was dropped due to low
participation, I mean, my school represented 10% of the total test
takers - that&amp;#39;s nuts - 10% from one school.
&lt;/p&gt;
&lt;p&gt;
I took the exam during the first administration in 1984 and taught
APCS-AB from 1991 I think up until I left Stuy.
&lt;/p&gt;
&lt;p&gt;
Originally, APCS was in Pascal. Back then, the course guide said that
they intended for the exam to become language agnostic but that never
happened. Instead we went to C++ in 2000 and then to Java in 2004.
&lt;/p&gt;
&lt;p&gt;
Now, I don&amp;#39;t have any inside information here. I&amp;#39;ve never been in on
any internal meetings so this is all just conjecture but I think it&amp;#39;s
interesting food for thought. 
&lt;/p&gt;
&lt;p&gt;
Back in 1984, schools were transitioning from either no
computers or Commodore PETS to Apple IIs. At Stuy, where I was a
student, the teacher had a single copy of a Pascal compiler on a
floppy disk and he made copies - one for each computer in the lab. Not
too much concern about piracy here. 
&lt;/p&gt;
&lt;p&gt;
As we approached 2000 when APCS switched to C++ the knocks on Pascal
were: 
&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;
It&amp;#39;s a teaching language 
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
You can&amp;#39;t have programs that were more than one file. 
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
It wasn&amp;#39;t Object Oriented which gained a lot of steam over the
decade. 
&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;
The first item was also mentioned as a strength and item 2 really
wasn&amp;#39;t an issue in terms of what most people taught. In any event, the
College Board decided on a change. 
&lt;/p&gt;
&lt;p&gt;
I started thinking about why C++ over Pascal? I know that C++ was the
hot industry language at the time and to be honest, I don&amp;#39;t remember
what other languages might have also been viable. I did think though
about one big factor in C++&amp;#39;s favor. By this time schools were moving
to IBM PCs and C++ had a really big hidden value - the existence of
Turbo C++. A C++ compiler and IDE that ran on the IBM PC and was
cheap. Prior to Turbo Pascal and Turbo C/C++ schools didn&amp;#39;t have the
ability to cheaply compile programs and certainly students who were
fortunate enough to have computers certainly couldn&amp;#39;t afford a
compiler. 
&lt;/p&gt;
&lt;p&gt;
I have no idea if this factored into the decision but I think the
economics and the fact that compilers and development environments
were just not that available back then are an interesting bit of
history.
&lt;/p&gt;
&lt;p&gt;
What about the next change? C++ to Java in 2004. By then I had moved
Stuy over to Linux but most schools were still on Windows. By this
time there were more affordable and even free compiler choices so I&amp;#39;m
guessing school economics didn&amp;#39;t have to enter the decision. What
probably did was the fact that APCS-A participants were stagnant and
APCS-AB were declining. One might conjecture that the complexity of
C++ had something to do with this. While Pascal also had memory
management C++ memory management is more complicated and less
forgiving. Also, since C++ is really a multimodal with &amp;#34;many ways to
do it&amp;#34; it was probably much harder for both students and teachers,
many of whom didn&amp;#39;t have a CS background. Java was the hot up and
comer, was not multi-modal but was indeed object oriented, and really
is a much simpler language. 
&lt;/p&gt;
&lt;p&gt;
Now, as I said, I have no idea what was discussed internally at the
college board but I think it&amp;#39;s interesting to think about the history.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>My Painting Setup</title>
      <link>https://cestlaz.github.io/stories/painting/setup/</link>
      <pubDate>Mon, 09 Nov 2020 20:24:10 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/stories/painting/setup/</guid>
      <description>&lt;p&gt;
Living in Manhattan doesn&amp;#39;t allow for a lot of space. I live in a
reasonably sized (for Manhattan standards) apartment with  my wife and
son. My daughter doesn&amp;#39;t live with us but she comes down most every
day and works out of her old room as a change of pace rather than
staying in her apartment and working alone. That leaves us with 4
people sharing space. 
&lt;/p&gt;
&lt;p&gt;
There&amp;#39;s no room for a real studio as space is at a premium but if you
want to paint regularly you don&amp;#39;t want to spend 30 minutes doing set
up and tear down. I had a french style easel from when I was Bob Ross
for Halloween 
&lt;/p&gt;
&lt;img width=&#34;20%&#34; 
src=&#34;https://media.jacksonsart.com/catalog/product/cache/1/image/1000x1000/9df78eab33525d08d6e5fb8d27136e95/e/j/ej014.jpg&#34;&gt;
&lt;p&gt;
and it worked well for that with the storage drawer and extending legs
but at home, not so much. The telescoping legs that set to a triangle
made for a much larger footprint than was necessary. After deciding I
was going to stick with this a while, I ended up getting this:
&lt;/p&gt;
&lt;img width=&#34;35%&#34; src=&#34;https://cestlaz.github.io/painting/easel.jpg&#34;&gt;
&lt;p&gt;
It seems bigger but the footprint is smaller. 
&lt;/p&gt;
&lt;p&gt;
I got this branded as a DaVinci easel but there are a bunch out
there. I like the shelf on the bottom and I got a couple of hanging
baskets to attach to the back to hold paintbrushes which a keep in
used tomato cans that I&amp;#39;ve washed out. : 
&lt;/p&gt;
&lt;img width=&#34;35%&#34; src=&#34;https://cestlaz.github.io/painting/easel-back.jpg&#34;&gt;
&lt;p&gt;
I throw a cheap plastic tablecloth over the dining table behind the
easel and that&amp;#39;s where I put my equipment when I work.
&lt;/p&gt;
&lt;img width=&#34;35%&#34; src=&#34;https://cestlaz.github.io/painting/easel-table.jpg&#34;&gt;
&lt;p&gt;
I also needed a place to store paintings while they dried. For that I
got this rack: 
&lt;/p&gt;
&lt;img width=&#34;35%&#34; src=&#34;https://cestlaz.github.io/painting/rack.jpg&#34;&gt; It seems bigger but the footprint is smaller
&lt;p&gt;
I got my easel and rack at Jerry&amp;#39;s Artorama. I&amp;#39;ll write about them in
the supplies post. I also got a couple of &lt;a href=&#34;https://www.amazon.com/AmazonBasics-Vinyl-Hard-Floor-Chair/dp/B07PGN63W5/ref=pd_rhf_ee_s_rp_c_2_0_1/134-3759504-0733668?_encoding=UTF8&amp;amp;pd_rd_i=B07PGN63W5&amp;amp;pd_rd_r=4c9e6ee5-bea1-4ebb-a592-c11211d857c6&amp;amp;pd_rd_w=TzX8g&amp;amp;pd_rd_wg=fSfwy&amp;amp;pf_rd_p=78d6a3dc-d4af-46b9-998e-003981a80dbb&amp;amp;pf_rd_r=G7TQDYGSZYJKX4A453HH&amp;amp;psc=1&amp;amp;refRID=G7TQDYGSZYJKX4A453HH&#34;&gt;floor mats&lt;/a&gt; and that&amp;#39;s pretty
much it. 
&lt;/p&gt;
&lt;p&gt;
That&amp;#39;s it for the setup. 
&lt;/p&gt;
&lt;p&gt;
The easel&amp;#39;s always out and I try to keep a prepped canvas either on
the easel or on my rack so setup is a breeze.
&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;
Put the tablecloth over the table
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Grab a disposable pallet pad and add paints
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Fill my brush cleaning bucket with water (since I&amp;#39;m using water
mixable paints) and pull out the trash can / beater rack
&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;
and I&amp;#39;m ready to go. Just takes a minute or two.
&lt;/p&gt;
&lt;p&gt;
Cleanup is also pretty quick: 
&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;
Throw out the paper pallete
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Wash the brushes
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Remove the tablecloth and throw behind the easel. 
&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;
Takes about 3 or 4 minutes plus the brush cleaning time. 
&lt;/p&gt;
&lt;p&gt;
So that&amp;#39;s my setup. Let me know if I should continue this series when
I&amp;#39;ll talk about my experience with water mixable paints, brushes adn
the rest.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Election Thoughts - feeling hope but still concerned</title>
      <link>https://cestlaz.github.io/post/election-thoughts/</link>
      <pubDate>Sun, 08 Nov 2020 06:56:55 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/election-thoughts/</guid>
      <description>
&lt;p&gt;
I don&amp;#39;t usually talk  politics on this blog but it is the news of the
day. We truly are at a turning point in this country and we should all
be concerned with the road we take.
&lt;/p&gt;
&lt;p&gt;
Yesterday the media outlets called the election for Biden/Harris. It&amp;#39;s
not over but I thought this would be as good a time as any to share
some thoughts and more importantly concerns.
&lt;/p&gt;
&lt;p&gt;
Let&amp;#39;s look at some of the bad that we&amp;#39;ve got to pay attention to
&lt;/p&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
The Bad
&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
70,000,000  voted for Trump.
&lt;/p&gt;
&lt;p&gt;
That should be both sobering and
frightening. Some of these are rich selfish people, some are racist,
some brainwashed by Fox and AM talk radio but there&amp;#39;s also a huge
undercurrent of lack of decency.  
&lt;/p&gt;
&lt;p&gt;
Trump has time and again shown these traits: bullying, ignorance,
protectionism, isolationism, ignorance, compulsive lying, misogyny,
divisiveness, racism and white supremacy.
&lt;/p&gt;
&lt;p&gt;
A vote for Trump says that none of those were disqualifiers. A Trump
voter may fancy themselves not racist but are fine with a racist as
the American President.
&lt;/p&gt;
&lt;p&gt;
This should be very concerning. 
&lt;/p&gt;
&lt;p&gt;
Can we educate this group? Bring them over? We should not and can
not just all be friends and pretend nothing ever happened. If I&amp;#39;ve
got a friend who has any of the above traits I hope that I&amp;#39;d try to
bring them over from the dark side but our friendship would be over
if they just doubled down as Trump and Trump supporters have done
time and agian.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Republicans leaders haven&amp;#39;t congratulated Biden/Harris
&lt;/p&gt;
&lt;p&gt;
Republican leadership has shown no indication of recognizing or
wanting to work with our new Presiden. How will the Democrats react?
Will they &amp;#34;reach across the aisle&amp;#34; only to be burned again? This
would be a HUGE mistake. Sure, now is the time to extend the olive
branch but come January, if the republicans still want to go
scorched earth the Democrats must respond. 
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
It ain&amp;#39;t over til it&amp;#39;s over
&lt;/p&gt;
&lt;p&gt;
Trumps team &lt;strong&gt;and&lt;/strong&gt; the GOP are still forging ahead to contest the
election and some GOP leaders are telling states to forgo the will
of the people and quite simply give the election to Trump. Even if
this doesn&amp;#39;t happen this should terrify you. Even if all goes well
and we move on to a Biden/Harris presidency, these GOP leaders are
still in power and they&amp;#39;ve shown their true selves.
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
The Democrats still refuse to learn
&lt;/p&gt;
&lt;p&gt;
I thought Biden&amp;#39;s speech was great last night. He hit all the right
notes but let&amp;#39;s see what the party actually does.
&lt;/p&gt;
&lt;p&gt;
Right after the election I saw tweets from Democratic candidates
attacking the progressive wing of the party yet to my knowledge all
the candidates that actively campaigned on progressive issues
won. It wast he old school Democrats (that is, the ones who are
really 1980s republicans with better social positions) that had
difficulties. It certainly appears that most Americans want police
reform, health care that&amp;#39;s not contingent on employment or being
independently wealthy and I do dare say most don&amp;#39;t want to destroy
the planet. 
&lt;/p&gt;
&lt;p&gt;
If the Democrats continue to ignore the future, ignore the working
and middle class, address income inequity and the aforementioned
progressive line items we&amp;#39;ll be back where we were in 2016 before
you know it.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Low turnout
&lt;/p&gt;
&lt;p&gt;
Finally, on the bad side, even though the past few presidential
elections have had record highs for voter turnout we&amp;#39;re still under
50% which is just sad. We have to both address the GOP&amp;#39;s repeated
attempts to disenfranchise voters and get more people to the polls.
&lt;/p&gt;
&lt;p&gt;
&lt;strong&gt;EDIT:&lt;/strong&gt; I accidentally looked at US population instead of voting age
population. It&amp;#39;s actually more like 56% which is a great step
in the right direction but still not enough.
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
The eh
&lt;/h2&gt;
&lt;p&gt;
Senate is still up in the air but it doesn&amp;#39;t look like the Republicans
will lose control. It&amp;#39;s bad but I can&amp;#39;t say it&amp;#39;s a failure. It&amp;#39;s
certainly bad that Kentucky keeps sending McConnell to the Senate with
him possibly doing more damage than even trump but not a surprise. The
Democrats shouldn&amp;#39;t have lost seats in the house  but I haven&amp;#39;t dug
into those races carefully enough to say anything.
&lt;/p&gt;
&lt;h2 id=&#34;headline-3&#34;&gt;
The Good
&lt;/h2&gt;
&lt;p&gt;
Fortunately, there&amp;#39;s some good as well.
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
close to 75,000,000 voted for Biden/Harris
&lt;/p&gt;
&lt;p&gt;
That&amp;#39;s millions more than voted for Trump and they got support from
all corners. This is terrific. Biden wasn&amp;#39;t my first choice nor was
Harris but both have grown on me and it looks like a broad coalition 
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Blue wave?
&lt;/p&gt;
&lt;p&gt;
While it may not seem like there was a blue wave, maybe there
was. Taking the senate was probably not a realistic goal and there&amp;#39;s
still a chance. You could say the Democrats lost some seats but
instead of comparing 2020 to the midterms, compare 2020 to 2016 when
the Republicans held the house. This plus looking at the states that
went or still could go Biden? Maybe there was a blue wave afterall.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
The world response
&lt;/p&gt;
&lt;p&gt;
Certainly seems like our allies are happy with the results.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
We have a first dog
&lt;/p&gt;
&lt;p&gt;
Nuff said.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
The response of the American people.
&lt;/p&gt;
&lt;p&gt;
Parties in the streets all across the country. In New York, the
party started with the announcement and kept going through the
evening. 
&lt;/p&gt;
&lt;p&gt;
I&amp;#39;ve &lt;strong&gt;never&lt;/strong&gt; seen anything like this before. Not even when Obama was
elected. I saw tweets talking about how this is the behavior you see
when dictators are overthrown. Well, there you have it.
&lt;/p&gt;
&lt;p&gt;
This outpouring of emotion and relief never seen in our lifetime in
America This says a lot about where we are and where we were.
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;headline-4&#34;&gt;
What&amp;#39;s next?
&lt;/h2&gt;
&lt;p&gt;
That&amp;#39;s the question. 
&lt;/p&gt;
&lt;p&gt;
If the parties don&amp;#39;t change nothing&amp;#39;s going to change and the parties
aren&amp;#39;t going to change unless the people force them to change. Groups
like &lt;a href=&#34;https://brandnewcongress.org/&#34;&gt;Brand New Congress&lt;/a&gt; are a start but we&amp;#39;ve all got to be active
supporting candidates (or running), calling out injustice, using our
position and platforms for those that can&amp;#39;t.
&lt;/p&gt;
&lt;p&gt;
It&amp;#39;s been a rough four years and a super stressful election
season. 
&lt;/p&gt;
&lt;p&gt;
I&amp;#39;m still concerned about this election and very concerned
about our future but for the first time in a while I&amp;#39;m also hopeful. 
&lt;/p&gt;
&lt;p&gt;
Just remember though, hope without action won&amp;#39;t take us from hope to
reality.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>53 trips around the sun</title>
      <link>https://cestlaz.github.io/post/birthday/</link>
      <pubDate>Sun, 18 Oct 2020 20:36:01 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/birthday/</guid>
      <description>&lt;p&gt;
In the 10 plus years of this blog I&amp;#39;ve never done a post on my
birthday. Okay, maybe I&amp;#39;ve written one &lt;strong&gt;on&lt;/strong&gt; my birthday but never
talked about it.
&lt;/p&gt;
&lt;p&gt;
Why this year?
&lt;/p&gt;
&lt;p&gt;
No particular reason. Maybe because I&amp;#39;m getting older. I&amp;#39;m 53
today. Devorah will turn 54 in a month - from there one year until she
can retire. I can follow a year later. I&amp;#39;m pretty happy with what I&amp;#39;m
doing but it&amp;#39;s nice to know that in two years I&amp;#39;ll have a lot of
options on the table. I can stay the course or maybe look for new
challenges. By then, should things continue apace, my undergraduate
program will have been running and growing for seven years, I&amp;#39;ll have had
three cohorts of teachers go through my advanced certificate program
and I should even have my first Masters in CS Education graduates. 
&lt;/p&gt;
&lt;p&gt;
For today, it&amp;#39;s mostly business as usual. Plan is to head out for my
morning run, come back and teach class. 
&lt;/p&gt;
&lt;p&gt;
After that, I&amp;#39;ll head down to Varick Street to drop off my ballot. 
&lt;/p&gt;
&lt;p&gt;
As to the rest of the day, we&amp;#39;ll see. I&amp;#39;ll probably spend most of it
trying to set up virtual school visits.  Looking forward to the family
dinner - Natan&amp;#39;s cooking tonight as he does often so I know it&amp;#39;ll be
tasty.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Less Engagement For More</title>
      <link>https://cestlaz.github.io/post/less-engagement-for-more/</link>
      <pubDate>Wed, 14 Oct 2020 09:01:20 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/less-engagement-for-more/</guid>
      <description>&lt;p&gt;
I think many of us are finding student engagement to be one of the
more challenging aspects of remote teaching. I sure am.
&lt;/p&gt;
&lt;p&gt;
In person it&amp;#39;s much easier to have in class discussions. You can read
faces and body language, move around the room, encourage cross
discussion and, well, you know, teach in the usual sense. 
&lt;/p&gt;
&lt;p&gt;
Much harder on Zoom. 
&lt;/p&gt;
&lt;p&gt;
The default behavior isn&amp;#39;t a room of people all together but rather a
bunch of individual teacher student connections. The sense, at least
to me, is that it&amp;#39;s more a whole bunch of simultaneous individual
meetings rather than one big all together group. This makes cross talk
harder.
&lt;/p&gt;
&lt;p&gt;
Next we have cameras. I wish I had more kids turn them on. I don&amp;#39;t
force them but it&amp;#39;s really hard talking to a bunch of names and it
really makes it feel like less of a class. When you&amp;#39;ve got a grid
mixed of people and blanks engagement is made even more difficult. Of
course I have no idea as to how engaged or disengaged camera off kids
are. They might be really engaged and involved. It&amp;#39;s just hard to
tell and hard to assess.
&lt;/p&gt;
&lt;p&gt;
So, business as usual from an in person class isn&amp;#39;t working - time to
try something new. 
&lt;/p&gt;
&lt;p&gt;
Instead of questioning and working to start a discussion in class as
per usual, I&amp;#39;m reworking some questions more into small group prompts
with discussion points and something to report back on, sometimes as a
group directly and sometimes through some shared platform like a
Padlet. So far results are promising. This means a lot of short quick
breakouts throughout the class.
&lt;/p&gt;
&lt;p&gt;
The upside is that the students should be more engaged in the small
group discussion. That seems to be the case based on what they&amp;#39;re
reporting back  and what I see when I drop in. 
&lt;/p&gt;
&lt;p&gt;
The downsides include the added time as we get in and out of breakout
rooms and while it&amp;#39;s more engagement overall, it&amp;#39;s less engagement
with the teacher and harder for me to use engagement as an
assessment. I know I can drop in on breakout rooms but dropping in
changes the dynamic - it&amp;#39;s very different from lurking in a regular
classroom and observing what&amp;#39;s going on. I also can&amp;#39;t get to all the
breakout rooms as each visit is clunky and takes time - more time than
doing similarly in a live class. On the additional time this takes,
I&amp;#39;m not really concerned about that. Remote takes longer, that&amp;#39;s
life. 
&lt;/p&gt;
&lt;p&gt;
Overall, this looks to be a promising approach so I&amp;#39;ll see where it
leads.
&lt;/p&gt;
&lt;p&gt;
Since this started I&amp;#39;ve sat in on or read a bunch of remote best
practice and none of them came close to leading me to switching things
up in this way. I came to try this through honest self reflection,
observing how my classes were going and talking to my peers. The truth
is, this might be great for me but doesn&amp;#39;t work for other teachers and
other teachers might not have the engagement challenges at all. 
&lt;/p&gt;
&lt;p&gt;
If anything this left me stronger int he belief that best practices
are not best practices at all. They&amp;#39;re practices. It&amp;#39;s up to the
teacher to figure out what&amp;#39;s best for their students and themselves.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Getting the word out on Hunter CS in 2020</title>
      <link>https://cestlaz.github.io/post/recruiting-2020/</link>
      <pubDate>Mon, 12 Oct 2020 07:23:55 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/recruiting-2020/</guid>
      <description>&lt;p&gt;
As we move through Fall, I&amp;#39;m missing one of the most draining but at
the same time one of my favorite parts of the year. School recruiting
visits. 
&lt;/p&gt;
&lt;p&gt;
When I came to Hunter, I started the Daedalus CS Honors program. We
started small but now, each year, we take in about fifty students,
give them a laptop and a scholarship and all sorts of extras and bring
them in for a great CS education at a fraction of the cost of say NYU
or Columbia. It is without a doubt the best value CS education, I&amp;#39;d
say, maybe anywhere. The trouble is, we&amp;#39;re still not that well known -
reputations in the school game take decades to establish and as Hunter
is still mostly known as a liberal arts / nursing school getting the
word out and building trust with students and teachers can be a chore.
&lt;/p&gt;
&lt;p&gt;
For the past four years I&amp;#39;ve spent the Fall visiting schools. Pretty
much anyone who&amp;#39;d have me as long as they have students who could be
interested in CS. I&amp;#39;d trek out in the early morning on the subway to
all manner of neighborhoods and talk to students. I&amp;#39;d hate the early
morning travel and the long subway rides but whenever I&amp;#39;d get
somewhere I would stroll around a new or different
neighborhood. Afterwards, on my way back I could stop at local
shops. The challenge became finding some local food seller, usually a
bakery and get something that you can&amp;#39;t get in Chelsea or the Upper
Easts Side. I&amp;#39;d also get to visit all manner of schools - many built
under the WPA and many with walls of fame and other interesting
architecture, features and history. 
&lt;/p&gt;
&lt;p&gt;
Of course, the real highlight was talking to students, teachers,
guidance counselors. Sometimes, I&amp;#39;d address an entire senior class -
this is my favorite format - I get to talk to the CS and the non CS
students - makes for a much better diversity push. That was usually
followed by small group discussions with interested students. I&amp;#39;d also
sometimes talk with one or more individual classes. Some visits though
get a bit crazy like visiting large schools with large CS programs
where I&amp;#39;m bouncing from class to class all day.
&lt;/p&gt;
&lt;p&gt;
I&amp;#39;ve been told that my talks have been valuable - while I talk about
Daedalus and Hunter at the end, the talk is really about questions you
should ask when considering a college and considering a major with an
emphasis on CS. My theory is that I&amp;#39;m not trying to con anyone into
coming to Hunter. I&amp;#39;ve built a great program and Hunter / Hunter CS is strong
and affordable. I want to help the right fit students come to that
realization.
&lt;/p&gt;
&lt;p&gt;
Of course, now I can&amp;#39;t do school visits so what to do? Zoom visits? I
don&amp;#39;t think I&amp;#39;ll come across as well but probably better than
nothing. In school? Should I set up evening sessions? 
&lt;/p&gt;
&lt;p&gt;
I&amp;#39;m not skilled at making fancy video presentations and I don&amp;#39;t have
the charisma to just make a simple video that&amp;#39;ll have the desired
effect so I&amp;#39;m really struggling with this.
&lt;/p&gt;
&lt;p&gt;
So, any ideas out there? 
&lt;/p&gt;
&lt;p&gt;
What&amp;#39;s the best way for me to connect with good fits for Hunter CS?
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Deadlines And Commitments</title>
      <link>https://cestlaz.github.io/post/deadlines-and-commitments/</link>
      <pubDate>Thu, 01 Oct 2020 13:50:38 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/deadlines-and-commitments/</guid>
      <description>&lt;p&gt;
A few days ago I was part of a Twitter discussion on assignment
deadlines. I noticed a tweet:
&lt;/p&gt;
&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;Not sure who needs to hear this, but stop taking off points for late assignments. It’s not helping students learn responsibility, and it’s not making your job easier. It’s only making your class inequitable. 💯&lt;/p&gt;&amp;mdash; Sydney Jensen (@sydneycjensen) &lt;a href=&#34;https://twitter.com/sydneycjensen/status/1309946435056611335?ref_src=twsrc%5Etfw&#34;&gt;September 26, 2020&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;p&gt;
I disagreed. I wasn&amp;#39;t necessarily against floating or open deadlines
without deductions but rather, they made my life more difficult and
weren&amp;#39;t in the best interest of my students. That said, they could
very well be appropriate for Sydney and her&amp;#39;s.
&lt;/p&gt;
&lt;p&gt;
Today I saw some emails on the SIGCSE list on the same topic. One
caught my eye - the poster talked about giving extra credit for early
submissions. These were likely unrelated discussions since the twitter
participants were not CS educators and I think the SIGCSE discussion
was mostly of college level CS instructors.
&lt;/p&gt;
&lt;p&gt;
In any event, it was a sign. I was meant to write a blog post on it.
&lt;/p&gt;
&lt;p&gt;
To start, what&amp;#39;s my policy?
&lt;/p&gt;
&lt;p&gt;
For homework or small every day assignments I grade for attempt, not
correctness. You either made an honest effort or you didn&amp;#39;t. I
encourage students to help each other but ask they cite where and when
they got help. When all is said and done, if you&amp;#39;ve done most of the
homework you get the full homework percent of the grade. If you miss
one here or there, no big deal. If you miss a whole bunch, you&amp;#39;ve got
a problem. 
&lt;/p&gt;
&lt;p&gt;
For projects, I have hard deadlines with a deduction for lateness. If
time and circumstance permits, I&amp;#39;ll give a project and we&amp;#39;ll have a
discussion and set the due date together. Also, if a student talks to
me ahead of time about some issue, I&amp;#39;ll almost always give a penalty
free extension. On the other hand, if they come to me last minute, I
usually won&amp;#39;t.
&lt;/p&gt;
&lt;p&gt;
When I grade, and I &lt;strong&gt;hate&lt;/strong&gt; grading, I get into a groove so grading a
project later does inconvenience me and it&amp;#39;s also not doing the
student any favors - we&amp;#39;ve moved on to the next set of topics but I
don&amp;#39;t have the project which is an assessment of how the student was
doing up to that point.
&lt;/p&gt;
&lt;p&gt;
Is this bad? I don&amp;#39;t think so. While many deadlines are arbitrary,
students do have to learn to get things done and as long as the
deadline is reasonable there shouldn&amp;#39;t be a problem. Since I&amp;#39;m
flexible if a student has a particular issue even more so. One
tweet on the thread said that since some students aren&amp;#39;t comfortable
asking a teacher for an extension it was unfair but I think you have
to draw the line somewhere. One students might not ask for an
extension and just be late and another might not ask and kill
themselves to meet the deadline but in either case, I don&amp;#39;t think it&amp;#39;s
unreasonable to expect the student to advocate for themselves
particularly when they can start the conversation either in person or
via email and in private. 
&lt;/p&gt;
&lt;p&gt;
On the other hand, is having open deadlines all good? Probably
not. Some students will game and abuse the system. Not all, but
certainly some and those students will gain an advantage in terms of
grades. Now, in an ideal world. we wouldn&amp;#39;t care about grades but in
the current reality if student one gets a fair B+ while student two
exploits loose deadlines nad gets an A-, guess who&amp;#39;s more likely to
get into that selective college? There&amp;#39;s also the problem of
snowballing and falling behind. If a student is a week late on
something that reinforces or clarifies the next topic that student is
now falling behind on that next topic.
&lt;/p&gt;
&lt;p&gt;
We also have the final looming deadline of end of semester or end of
year which further complicates matters. 
&lt;/p&gt;
&lt;p&gt;
So, who&amp;#39;s right? Who knows. Overall, I think what I do works for me
and my classes. It&amp;#39;s a system that&amp;#39;s evolved over three decades and
will continue to evolve. Every year is a potential tweak and every new
situation, like when I came over to Hunter was cause for
re-evaluation. On the other hand, I know teachers who have open
deadlines and it seems to work for them and their students so they
should keep on keeping on. 
&lt;/p&gt;
&lt;p&gt;
What about that extra credit for early projects? This is one that
sounds good but I don&amp;#39;t like it. I think this one is potentially
really inequitable. It sounds good until you remember that students
all have different schedules and different obligations. If you give
students one week to complete an assignment starting monday, even if
they all have roughly the same workload, it will be distributed in
different ways.
&lt;/p&gt;
&lt;p&gt;
One kid might front load their courses into Mon-Wed so they don&amp;#39;t have
to commute Thursday and Friday. That student will never be able to
finish an assignment early because they&amp;#39;ve left there homework time
for later in the week. Same thing for a kid who works evenings rather
than weekends. There will be other kids where their schedule favors
finishing early. This sounds like a great idea but it will really only
favor a select few and not necessarily because they&amp;#39;re doing things
&amp;#34;the right way.&amp;#34; 
&lt;/p&gt;
&lt;p&gt;
So, what&amp;#39;s the answer on due dates? As usual we get a resouding &amp;#34;it
depends.&amp;#34; I just gave an assignment last Monday and over Zulip we
collectively decided that a fair deadline would be a week from
today. I don&amp;#39;t expect any extensions will be needed but if I&amp;#39;m
approached I&amp;#39;ll probably be flexible as I&amp;#39;ve always been. My policy
seems to be working well so I&amp;#39;m sticking to it for now. If yours works
for you, do the same.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs 75 - Bufler</title>
      <link>https://cestlaz.github.io/post/using-emacs-75-bufler/</link>
      <pubDate>Tue, 22 Sep 2020 13:17:41 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/using-emacs-75-bufler/</guid>
      <description>&lt;p&gt;
Quick Emacs hit today.
&lt;/p&gt;
&lt;p&gt;
After my last video, I received a comment noting that I was using
ibuffer and that there was another package I might want to consider -
&lt;a href=&#34;https://github.com/alphapapa/bufler.el&#34;&gt;bufler&lt;/a&gt;. 
&lt;/p&gt;
&lt;p&gt;
I started with basic ibuffer and then started to &lt;a href=&#34;https://cestlaz.github.io/posts/using-emacs-34-ibuffer-emmet/&#34;&gt;customize it&lt;/a&gt; to group
buffers but that was always somewhat finicky. More often than not I
couldn&amp;#39;t tune it the way I wanted. Most recently, I started using
&lt;a href=&#34;https://github.com/purcell/ibuffer-projectile&#34;&gt;ibuffer-projectile&lt;/a&gt; which group projects for me but lost the other
customizations. In any event, I was more or less happy with things.
&lt;/p&gt;
&lt;p&gt;
&lt;a href=&#34;https://github.com/alphapapa/bufler.el&#34;&gt;Bufler&lt;/a&gt; though looks to be a nice alternative. Out of the box it looks
like it groups things pretty well and has a nice Emacs &lt;a href=&#34;https://github.com/abo-abo/hydra&#34;&gt;hydra&lt;/a&gt; that you
can bring up with &lt;code&gt;?&lt;/code&gt; to remind you how to do things like kill one or
more buffers.  
&lt;/p&gt;
&lt;p&gt;
Right now, I&amp;#39;m using it as an ibuffer replacement but it also has its
own version of switch buffer that I plan to play with as well. 
&lt;/p&gt;
&lt;p&gt;
The only knit I&amp;#39;ve found thus far is that when you run bufler, it
splits the window and lists the buffers in the new space. If I&amp;#39;m using
ibuffer I want it to use the whole Emacs frame. Otherwise I just use
ivy-switch-buffer (or now bufler-switch-buffer). I couldn&amp;#39;t figure out
a way built in so ended up writing a small function: 
&lt;/p&gt;
&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;(defun mz/bufler-one-window (&lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;optional&lt;/span&gt; force-refresh)
  (interactive &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;P&amp;#34;&lt;/span&gt;)
  (bufler-list)
  (delete-other-windows)

)

(global-set-key (kbd &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;C-x C-b&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;mz/bufler-one-window&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;
Check out the video for more details.
&lt;/p&gt;
&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/KqvjeRf84do&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;
</description>
    </item>
    
    <item>
      <title>Zulip - maybe the answer for class communication</title>
      <link>https://cestlaz.github.io/post/zulip/</link>
      <pubDate>Wed, 16 Sep 2020 14:01:23 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/zulip/</guid>
      <description>&lt;p&gt;
It&amp;#39;s always been a challenge to get students to buy in to an out of
class communication tool. Over the years I&amp;#39;ve tried many including
mailing lists, Piazza, Discourse, Vanilla and other discussion forums,
Slack and probably a few other things.
&lt;/p&gt;
&lt;p&gt;
I guess it&amp;#39;s not surprising that it&amp;#39;s a hard sell - prior to the
internet once school was out kids there as no teacher student
interaction until the next school day and kids would only interact
with their direct friends. 
&lt;/p&gt;
&lt;p&gt;
Still, we have technology and even without great buy in, if nothing
else there&amp;#39;s an advantage to having an electronic means of
distributing things to students.
&lt;/p&gt;
&lt;p&gt;
Ultimately I fell back on a plain old mailing list. Discussion/forum
platforms didn&amp;#39;t work for me because it was yet another location that
you had to remember to check. Slack didn&amp;#39;t work because at its core
it&amp;#39;s for live chat and while workers are at their desks all day and
can have a chat open, that doesn&amp;#39;t work with students and catching up
on a complex Slack with threads after the fact is, well, just no. 
&lt;/p&gt;
&lt;p&gt;
With us going remote in Coronatime needs changed. Slack looked like it
might be more viable. It still had the problem of limited threads but
in addition to students being more &amp;#34;always on,&amp;#34; for better or worse,
live remote teaching benefits form a chat. Why Slack over the built in
Zoom chat? Well, one thing is that the Zoom chat disappears after the
session whereas Slack lives on and can form the base for ongoing
discussion. Second, dedicated chat platforms like Slack are more
robust and featureful.  
&lt;/p&gt;
&lt;p&gt;
Over the summer and into this semester, Slack seems to be working very
well for my teacher certification candidates but I ended up using
something else - &lt;a href=&#34;https://zulip.com&#34;&gt;Zulip&lt;/a&gt; for my undergraduate classes and plan to move
my teachers over to it for the next cohort.
&lt;/p&gt;
&lt;p&gt;
Why the change? Both Zulip and Slack have free tiers but Zulip can
also be self hosted and is open source. Slack is slicker when it comes
to integrations but Zulip is the clear winner for combined sync and
async conversations due to its threading model combined with flexible
alerts. 
&lt;/p&gt;
&lt;p&gt;
I put together this short video showing  the basics - check it out:
&lt;/p&gt;
&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/xWa56KdgYZM&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;p&gt;
You can use Zulip free on their site with similar limits as for
Slack&amp;#39;s free tier or you can self host. I&amp;#39;m running our Zulip
instances on a Digital Ocean droplet. DO has a &amp;#34;one click&amp;#34; Zulip setup
that was fairly straightforward. You might want to check that out if
you&amp;#39;re comfortable as a Linux admin.
&lt;/p&gt;
&lt;p&gt;
So far, I&amp;#39;m liking Zulip very much and thing I&amp;#39;ll be using it as my
primary in and out of class communication tool. I&amp;#39;d like a better
selection of emoji and wish it was easier to both use integrations and
write bots but the thread based interface is really great. 
&lt;/p&gt;
&lt;p&gt;
I know Slack&amp;#39;s the big name and I do like Slack as well but if you&amp;#39;re
a teacher and looking for an in and out of class chat/communication
platform check Zulip out.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>School leadership and COVID, or not</title>
      <link>https://cestlaz.github.io/post/covid-leadership/</link>
      <pubDate>Wed, 16 Sep 2020 09:48:51 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/covid-leadership/</guid>
      <description>
&lt;p&gt;
Teachers are back and students will soon follow either in person or
remote. In person means in person one or two days a week with the
rest of the time from home.
&lt;/p&gt;
&lt;p&gt;
This of course shows horrible leadership. It fails in terms of
education, safety and even freeing up parents to get back to
work. After all, if your kid is only in school one or two days a week
it hardly allows you to get back to your own full time job. 
&lt;/p&gt;
&lt;p&gt;
Of course the plan gets worse. It&amp;#39;s optimized to provide the worst
possible educational experience. I won&amp;#39;t rehash the plans here but
it&amp;#39;s looking to increase the teachers workload tremendously while at
the same time killing continuity for the students (unless of course
the DOE can hire thousands of extra teachers and somehow arrange for
them to mind meld with the  main teacher). I&amp;#39;m not going to hash out
the details here but they&amp;#39;re easy enough to find on the interwebs.
&lt;/p&gt;
&lt;p&gt;
Now in terms of leadership I&amp;#39;m not writing about De Blasio or
Carranza. We all know they&amp;#39;re absolutely horrible. It&amp;#39;s hard to
believe Carranza was actually a classroom teacher at one point and
while I&amp;#39;m no fan of Bloomberg on education at least you could say that
he had a vision, albeit an incorrect one of applying business sense to
schools and followed it while De Blasio is tone deaf, arrogant and
clueless which could make him more dangerous. I&amp;#39;m talking about in
school leadership.
&lt;/p&gt;
&lt;p&gt;
What did schools do? Well some tried to make the best of a bad
situation. They recognized that the Mayor&amp;#39;s hybrid model was bunk and
while safe full time in person is clearly the best choice, fully
remote, even with its difficulties and limitations  would be more
sound than hybrid. Add to that the fact that if a school had to go
remote midstream you&amp;#39;d be set even further back &lt;sup class=&#34;footnote-reference&#34;&gt;&lt;a id=&#34;footnote-reference-1&#34; href=&#34;#footnote-1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;. These schools
decided to basically set up remote from in school. Students who wanted
to or had to go to school would be sent to specific parts of the
school where they would receive the same remote instruction as their
classmates. This would accommodate students who couldn&amp;#39;t work from
home while allowing for a sensible overall schedule.
&lt;/p&gt;
&lt;p&gt;
Sounds like good leadership to me and in some cases it is. On the
other hand, in some cases you have to  dig deeper.
&lt;/p&gt;
&lt;p&gt;
The first question has to do with the student pods. Can they be set up
safely. What about entering and leaving? Bathrooms? Lunch? I&amp;#39;m
guessing some schools have a good plan in place but I&amp;#39;ve also heard
teachers refer to their upcoming student learning pods as &amp;#34;deathpods.&amp;#34;
&lt;/p&gt;
&lt;p&gt;
The next question has to do with teachers working from the building or
from home. The DOE decreed that unless you get a medical excemption
you &lt;strong&gt;have&lt;/strong&gt; to work from school. Who cares if you&amp;#39;re meeting students
in person or not, you &lt;strong&gt;have&lt;/strong&gt; to be there. This was ridiculous. I&amp;#39;ve
already written about it - &lt;a href=&#34;https://cestlaz.github.io/post/scared-teachers-scared-students/&#34;&gt;scared teachers can&amp;#39;t teach&lt;/a&gt;. This is where
leadership kicks in. I&amp;#39;ve heard through the grapevine that some
schools had teachers working from home without DOE permission. Sounds
like good leadership to me - trust your people to do the job and do
the right thing.
&lt;/p&gt;
&lt;p&gt;
Recently, the DOE backpedaled and gave schools the ability to allow
teachers to work from home without medical excemptions so long as it
worked within their COVID plans. Looks like some schools are jumping
on this.
&lt;/p&gt;
&lt;p&gt;
Unfortunately, others aren&amp;#39;t. I&amp;#39;ve heard of principals that are
setting up their schools to be &amp;#34;remote from school&amp;#34; but requiring all
teachers show up in person even though they clearly don&amp;#39;t need all of
them on site. This is the type of &amp;#34;leadership&amp;#34; I&amp;#39;ve come to expect
from many of the Bloomberg era principals I&amp;#39;ve met - you know, the
ones that barely taught for a cup of coffee. Insisting that teachers
brave the subways and share facilities like bathrooms only to spend
the day teaching in isolation serves no purpose other than to exert
power over them. If a teacher is teaching all remote and isn&amp;#39;t needed
for the pods, let them teach from home. They&amp;#39;ll be more comfortable
and thus more effective. 
&lt;/p&gt;
&lt;p&gt;
It sounds like some principals are being true educators and leaders in
these times but many are not and in these times when we can&amp;#39;t count on
our elected officials or his appointees to do the right thing, we need
all our principals to step up.
&lt;/p&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
Footnotes
&lt;/h2&gt;
&lt;div class=&#34;footnotes&#34;&gt;
&lt;hr class=&#34;footnotes-separatator&#34;&gt;
&lt;div class=&#34;footnote-definitions&#34;&gt;
&lt;div class=&#34;footnote-definition&#34;&gt;
&lt;sup id=&#34;footnote-1&#34;&gt;&lt;a href=&#34;#footnote-reference-1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;
&lt;div class=&#34;footnote-body&#34;&gt;
&lt;p&gt;
Note that I&amp;#39;m only talking here about the general population at
the high school level. I don&amp;#39;t claim to know the best format for the
younger grades and accomodating special needs students are a whole
different kettle of fish.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Quarter Century Courses</title>
      <link>https://cestlaz.github.io/post/quarter-century-courses/</link>
      <pubDate>Tue, 15 Sep 2020 07:09:25 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/quarter-century-courses/</guid>
      <description>&lt;p&gt;
I was talking in our Curriculum Development class last week about the
courses I&amp;#39;ve created over the years. From the first computer graphics
course to the current teacher education courses. JonAlf pointed out
that we missed an &amp;#34;important&amp;#34; occasion last spring - the twenty fifth
offering of my computer graphics class at Stuy. I haven&amp;#39;t taught it in
almost 10 years but it&amp;#39;s been running continuously for a quarter
century since it first ran back in the mid 90s. Systems will hit that
mark this year and the intro course I designed a couple of years from
now.
&lt;/p&gt;
&lt;p&gt;
That&amp;#39;s pretty cool.
&lt;/p&gt;
&lt;p&gt;
Looking back at all the courses I&amp;#39;ve designed and taught it&amp;#39;s
interesting to see what I got right, what I got wrong, and why. Some
courses evolved slowly over time. The intro course fits that bill. On
the other hand, Systems had a complete reboot a few years in and has
been reasonably stable since. Interestingly enough Graphics has
probably been the most stable over the years. That&amp;#39;s not to say that
it hasn&amp;#39;t been tweaked here and there but overall, it&amp;#39;s largely the
same now as it was a quarter century ago. It&amp;#39;s been re-evaluated many
times but it just turns out that when I was teaching it I felt that it
was still hitting the right notes and my successor seems to feel
similarly. 
&lt;/p&gt;
&lt;p&gt;
Funny because graphics was designed with the least thought of all of
my courses. I probably didn&amp;#39;t feel that way at the time, but it&amp;#39;s
true. I had only been teaching around 5 year - a beginner at best and
didn&amp;#39;t really know what I was doing. Even 10 years in you&amp;#39;re still an
advanced beginner in terms of teaching. Most teachers, if they don&amp;#39;t
burn out, hit there stride at 15 - 20 and after that become truly
experienced. 
&lt;/p&gt;
&lt;p&gt;
I basically created graphics because I was teaching 4 APCS/AB classes
and one geometry and &lt;strong&gt;hated&lt;/strong&gt; grading proofs!!!! I needed to create one
more CS class. I decided on graphics because I knew I could teach it
and thought the students might enjoy it. Systems was created using
similarly deep contemplations. I got better and spent much more time
and effort designing future courses.
&lt;/p&gt;
&lt;p&gt;
For the graphics class I had a few choices to make but not many. The
students mostly only knew Pascal from APCS so the language wasn&amp;#39;t an
issue like it would become later on and since we were working on DOS
machines running Turbo Pascal there wasn&amp;#39;t any option to use any fancy
library like OpenGL. The course basically started with the ability to
draw a point and then went though: 
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
lines
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
lines in 3D and 3D transformations
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
polygons (triangles)
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
A motion description language interpreter (stack and tree based
shape hierarchies)
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
lighting and shading
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
ray tracing
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
The motion description language piece had an entire unit that was
really an intro to compilers / interpreters. 
&lt;/p&gt;
&lt;p&gt;
In retrospect, the course really did make sense. It was taught to
second term seniors so it was a terminal course. It combined the
programming, algorithms and data structures from APCS, math they
did in trig, precalc (and baby calc), and a bit of physics. It as also
project based and they wrote programs that made pretty pictures so
that helped stave off senioritis. 
&lt;/p&gt;
&lt;p&gt;
While the course has remained largely the same, there has been some
evolution. When Systems students started learning C we ended up
supporting that as well in graphics and now the course is more
language agnostic. We also played with topics and unit length. We
spend less time on the compiler piece now and treat that more like a
black box and have at times looked at additional topics like texture
mapping. There&amp;#39;s also been a good deal of work put in to safety nets
and scaffolding. When you have a course where the main assessment is
one BIG semester long project you&amp;#39;ve got to make sure students don&amp;#39;t
end up falling into a hole they can&amp;#39;t climb out of.
&lt;/p&gt;
&lt;p&gt;
It&amp;#39;s not a surprise that the first couple of courses I designed -
graphics and systems were somewhat arbitrary. Graphics turned out to
be a solid design and just needed some fine tuning but Systems got a
complete reboot. Over the years, I learned more about curriculum
design and feel pretty comfortable designing new experiences now. Of
course, this is thirty years into my career as a teacher. 
&lt;/p&gt;
&lt;p&gt;
Maybe I&amp;#39;ll talk about the design of other classes here in the future
but for now, you can look at one of my first student&amp;#39;s graphics
project and read about it &lt;a href=&#34;https://cestlaz.github.io/post/class-legends/&#34;&gt;here&lt;/a&gt;.
&lt;/p&gt;
&lt;iframe width=&#34;560&#34; height=&#34;315&#34;
src=&#34;https://www.youtube.com/embed/Ca_8q3ct6J4&#34; frameborder=&#34;0&#34;
allow=&#34;accelerometer; autoplay; encrypted-media; gyroscope;
picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs 74 Eglot</title>
      <link>https://cestlaz.github.io/post/using-emacs-74-eglot/</link>
      <pubDate>Mon, 31 Aug 2020 13:03:14 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/using-emacs-74-eglot/</guid>
      <description>&lt;p&gt;
I primarily program in four languages these days -
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
Clojure 
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
C++
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Python
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Java
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
And most of the time, my Emacs configuration has handled each one
differently. Cider for Clojure, Irony for C++, Elpy and Jedi for
Python and Java I could never figure out. This is of course on top of
tools that work across languages like company for completions, or
flycheck for general language syntax checking. 
&lt;/p&gt;
&lt;p&gt;
A while ago I heard about lsp-mode - Language Server Protocol
mode. Basically, you set up the mode and it connects to back end
language servers. The idea is to keep configuration down and provide a
consistent interface across langauges while leveraging the types of
support these back ends can provide. I wrote a bit about lsp-mode and
made a video and you can find it &lt;a href=&#34;https://cestlaz.github.io/post/using-emacs-58-lsp-mode/&#34;&gt;here&lt;/a&gt;. 
&lt;/p&gt;
&lt;p&gt;
When I first tried LSP it just didn&amp;#39;t work. I tried it again later and
it basically worked but was finicky. Configuration took more work than
I wanted, particularly for customizing per language and even when
working it didn&amp;#39;t work as expected. 
&lt;/p&gt;
&lt;p&gt;
This past summer, I had to teach using Java so I tried lsp-mode
again. Setup wasn&amp;#39;t too bad and most of the issues were more related
to Java than to lsp-mode but I didn&amp;#39;t like the results. While it might
be great for the professional developer there were too many popups and
made the screen way too busy for teaching. 
&lt;/p&gt;
&lt;p&gt;
Still, the idea of a single simple configuration was enticing.
&lt;/p&gt;
&lt;p&gt;
So, when I decided to get my configuration together for the Fall
semester I decided to try yet again and discovered &lt;a href=&#34;https://github.com/joaotavora/eglot&#34;&gt;eglot&lt;/a&gt; for
Emacs. Eglot turned out to be easier to install and gave me more of
the experience I was looking for.
&lt;/p&gt;
&lt;p&gt;
To start, I set it up for C++ using
&lt;/p&gt;
&lt;div class=&#34;src src-text&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;(use-package eglot :ensure t)
(add-to-list &amp;#39;eglot-server-programs &amp;#39;((c++-mode c-mode) &amp;#34;clangd-10&amp;#34;))
(add-hook &amp;#39;c-mode-hook &amp;#39;eglot-ensure)
(add-hook &amp;#39;c++-mode-hook &amp;#39;eglot-ensure)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Eglot defaults to &lt;a href=&#34;https://github.com/MaskRay/ccls&#34;&gt;ccls&lt;/a&gt; as a C++ language server. I didn&amp;#39;t want to have
to build it but was able to &lt;code&gt;apt-get install clangd-10&lt;/code&gt; and use that
instead by adding clangd-10 to the eglot-server-programs in the second
configuration line.
&lt;/p&gt;
&lt;p&gt;
For python I had to install &lt;a href=&#34;https://github.com/palantir/python-language-server&#34;&gt;pyls&lt;/a&gt;, the Python Language Server but that
was easy to do and then I just had to add &lt;code&gt;(add-hook &amp;#39;python-mode-hook
&amp;#39;eglot-ensure)&lt;/code&gt; to my config.
&lt;/p&gt;
&lt;p&gt;
Finally, Java was more of an issue I had to get &lt;a href=&#34;https://github.com/eclipse/eclipse.jdt.ls&#34;&gt;eclipse.jdt.ls&lt;/a&gt; on my
system. It turns out that lsp-mode installed it for me already so I
just had to point to it:
&lt;/p&gt;
&lt;div class=&#34;src src-text&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;(defconst my-eclipse-jdt-home &amp;#34;/home/zamansky/.emacs.d/.cache/lsp/eclipse.jdt.ls/plugins/org.eclipse.equinox.launcher_1.5.800.v20200727-1323.jar&amp;#34;)
(defun my-eglot-eclipse-jdt-contact (interactive)
  &amp;#34;Contact with the jdt server input INTERACTIVE.&amp;#34;
  (let ((cp (getenv &amp;#34;CLASSPATH&amp;#34;)))
    (setenv &amp;#34;CLASSPATH&amp;#34; (concat cp &amp;#34;:&amp;#34; my-eclipse-jdt-home))
    (unwind-protect (eglot--eclipse-jdt-contact nil)
      (setenv &amp;#34;CLASSPATH&amp;#34; cp))))
(setcdr (assq &amp;#39;java-mode eglot-server-programs) #&amp;#39;my-eglot-eclipse-jdt-contact)
(add-hook &amp;#39;java-mode-hook &amp;#39;eglot-ensure)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
So far, I&amp;#39;m liking eglot very much. I&amp;#39;ll probably check lsp-mode out
again somewhere down the line but as of now it&amp;#39;s Cider for Clojure and
Eglot for everything else.
&lt;/p&gt;
&lt;p&gt;
The video has a run through and demo. Check it out.
&lt;/p&gt;
&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/ROnceqt3kpE&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;
&lt;/iframe&gt;
</description>
    </item>
    
    <item>
      <title>Multiple Cameras For Remote Teaching</title>
      <link>https://cestlaz.github.io/post/multiple-cameras-for-remote-teaching/</link>
      <pubDate>Sun, 30 Aug 2020 11:05:49 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/multiple-cameras-for-remote-teaching/</guid>
      <description>&lt;p&gt;
We used Zoom for remote classes over the summer but at this point,
I&amp;#39;ve also used &lt;a href=&#34;https://codingrooms.com&#34;&gt;Coding Rooms&lt;/a&gt;, &lt;a href=&#34;https://bigbluebutton.org&#34;&gt;Big Blue Button&lt;/a&gt;, and Google meet as
well. They each have their own strong points and failings but all are
limited in terms of sharing multiple cameras and screen
components. All will let you share your camera or share your screen
and when you share you screen you can either share it all or a single
window. Zoom is the only one that seems to allow for easy camera
switching but it&amp;#39;s still pretty clunky.
&lt;/p&gt;
&lt;p&gt;
Why do I want to switch cameras? Because I can&amp;#39;t draw us ing a mouse or
touchpad. I&amp;#39;ve gotten myself a Wacom tablet but am still not
particularly proficient at it. 
&lt;/p&gt;
&lt;p&gt;
So, I got myself one of &lt;a href=&#34;https://www.amazon.com/gp/product/B000TTIP40/ref=ppx_yo_dt_b_asin_title_o00_s00?ie=UTF8&amp;amp;psc=1&#34;&gt;these&lt;/a&gt; to use as a document camera. It worked
but as I said, switching between the webcam and document camera was
clunky at best.
&lt;/p&gt;
&lt;p&gt;
OBS to the rescue!!!!!
&lt;/p&gt;
&lt;p&gt;
&lt;a href=&#34;https://obsproject.com/&#34;&gt;OBS&lt;/a&gt; Studio is the &lt;a href=&#34;https://obsproject.com/&#34;&gt;Open Broadcaster Software&lt;/a&gt;. It&amp;#39;s a cross platform
streaming studio. You can set up any number of devices and then
compose them into scenes. I use it for recording my &lt;a href=&#34;https://cestlaz.github.io/stories/emacs&#34;&gt;Emacs&lt;/a&gt; videos. It&amp;#39;s
easy to set up devices for every camera you own plus monitors and
individual windows. It only took a minute or so to set up a scene with
me in the corner and my desktop: 
&lt;/p&gt;
&lt;img src=&#34;https://cestlaz.github.io/img/obs/desktop.png&#34;&gt;
&lt;p&gt;
One for my document camera: 
&lt;/p&gt;
&lt;img src=&#34;https://cestlaz.github.io/img/obs/doccam.png&#34;&gt;
&lt;p&gt;
And one for my desktop with the doccam overlayed.
&lt;/p&gt;
&lt;img src=&#34;https://cestlaz.github.io/img/obs/mixed.png&#34;&gt;
&lt;p&gt;
I can switch between them by clicking on which I want. I can also
select a transition like fade. 
&lt;/p&gt;
&lt;p&gt;
This is all great for recording or streaming to a service like Twitch
but what about using with meeting software? It turns out that you can
set up OBS to act as a virtual camera. There are plugins for Mac and
Windows. You can find them by searching for them but for Linux, I
followed this video and it worked perfectly: 
&lt;/p&gt;
&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/Eca509IDLdM&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;p&gt;
I also found this video if the above one doesn&amp;#39;t work: &lt;a href=&#34;https://www.youtube.com/watch?v=zaJSkj-dLoI&#34;&gt;https://www.youtube.com/watch?v=zaJSkj-dLoI&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
I set up the virtual camera as per the video and then selected it as
the camera on both Zoom and Coding Rooms and it worked perfectly. It
should work on the other platforms as well. 
&lt;/p&gt;
&lt;p&gt;
This is HUGE. Now, instead of explicitly sharing my screen I can hacve
my screen as my image and quickly and easily switch over to another
window, a document camera or anything else. 
&lt;/p&gt;
&lt;p&gt;
If you&amp;#39;re teaching remotely using a conferencing platform I recommend
you check this out.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Starting the new semester</title>
      <link>https://cestlaz.github.io/post/new-semester/</link>
      <pubDate>Fri, 28 Aug 2020 08:56:23 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/new-semester/</guid>
      <description>&lt;p&gt;
Thursday was the first day of the new semester. The big change was
that my classes were done remotely but there were also some other
differences. Other changes were that I only met one of my two CS
classes on Thursday. That&amp;#39;s my CS0. I&amp;#39;m also teaching a recitation for
CS1 which only meets once a week. I&amp;#39;ll see those students as well as
my CS0 students for a second time on Monday.
&lt;/p&gt;
&lt;p&gt;
I opted to use &lt;a href=&#34;https://codingrooms.com/&#34;&gt;Coding Rooms&lt;/a&gt; instead of Zoom since Coding Rooms has a
nice built in REPL. We had a couple of students drop a couple of times
and I had to reload once but even that&amp;#39;s no worse than typical Zoom
performance. It&amp;#39;s funny how once one product becomes &lt;strong&gt;it&lt;/strong&gt; everything
that&amp;#39;s different is labeled as harder and whenever there&amp;#39;s a hiccup
it&amp;#39;s so much worse. The truth is, I&amp;#39;ve now used a bunch of platforms
and none is harder than the others - you just have to look to
different places. For example, in Zoom, you &amp;#34;raise your hand&amp;#34; by
clicking in one place and in Coding Rooms (or Big Blue Button)
another. Neither is inherently better - just different but people seem
to think that the non Zoom one is worse just because Zoom got so hot
so fast. Likewise, other platforms periodically drop people and crash
but so does Zoom. This is all a digression but it&amp;#39;s something that
bothers me. Zoom does some things really well but then again so do the
other platforms I&amp;#39;ve been playing with. So far, there&amp;#39;s no silver
bullet.
&lt;/p&gt;
&lt;p&gt;
As you might imagine, class had a different feel. I think it went
pretty well but it&amp;#39;s certainly going to be harder to build a sense of
community. Since there was a good deal of class logistics to cover we
didn&amp;#39;t really get to play with the Coding Rooms REPL but I&amp;#39;ll report
on that soon. I&amp;#39;ll also mention that we&amp;#39;re going to see about using
&lt;a href=&#34;https://zulip.com/&#34;&gt;Zulip&lt;/a&gt; instead of Slack for chat both in class and out. Like Zoom,
Slack is the de facto standard but Zulip seems to have a few distinct
advantages: 
&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;
It&amp;#39;s open source
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
You can self host it (and it&amp;#39;s free if you self host)
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
It&amp;#39;s built around threads so I suspect it will be easier to deal
with discussions both synchronously and asynchronously more easily.
&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;
The disadvantages are that there aren&amp;#39;t as many integrations, most
notably there&amp;#39;s no Giphy and it&amp;#39;s not the eponymous chat
platform. Note that it&amp;#39;s not that I don&amp;#39;t like Slack but was driven to
look for alternatives because I don&amp;#39;t have a budget and the free tier
has limited history and I believe integrations.
&lt;/p&gt;
&lt;p&gt;
The other big change this semester involve our K12 CS teacher
certification program. Our summer cohort kicked off there next two
classes on Thursday afternoon and evening - Ethics in Computer Science
and Curriculum Development for CS. I designed both courses but am not
the official teacher. Topher and JonAlf who worked the summer with me
are each taking one but I&amp;#39;m going to be very involved. We also had
four students start in our Masters program. I&amp;#39;ll be writing about all
of this over the course of the school year.
&lt;/p&gt;
&lt;p&gt;
Spent most of yesterday getting ready for Monday - setting up the
Zulip server, GitHub repos and GitHub classroom and the like. As
usual, I&amp;#39;m a slow starter but hopefully by mid next week will feel
like I&amp;#39;m in the swing of things.
&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Pedagogy on C&#39;est la Z</title>
    <link>https://cestlaz.github.io/tags/pedagogy/</link>
    <description>Recent content in Pedagogy on C&#39;est la Z</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 31 Mar 2019 10:41:16 -0400</lastBuildDate>
    
	<atom:link href="https://cestlaz.github.io/tags/pedagogy/rss.xml" rel="self" type="application/rss" />
    
    
    <item>
      <title>Choosing A Textbook</title>
      <link>https://cestlaz.github.io/post/choosing-a-textbook/</link>
      <pubDate>Sun, 31 Mar 2019 10:41:16 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/choosing-a-textbook/</guid>
      <description>Now and again there are requests on the assorted CS Education forums asking about which text book to use. These requests are usually for APCS-A. There are usually a number of &#34;I&#39;m very happy with ...&#34; replies but I thought I&#39;d take a bit of a deeper dive into what teachers might want to consider when evaluating a textbook.
It was never an issue when I started as a math teacher.</description>
    </item>
    
    <item>
      <title>March PD for CS Teachers</title>
      <link>https://cestlaz.github.io/post/pd-apcs-a-and-beyond-3-14-2019/</link>
      <pubDate>Tue, 26 Feb 2019 15:49:22 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/pd-apcs-a-and-beyond-3-14-2019/</guid>
      <description>Back in December we ran our first PD session for CS teachers. This was to address the need for professional development for teachers who were more experienced in terms of computer science - we aimed this at people who were ready to teach APCS-A, similar, or beyond and also to start to build a community for these teachers.
We had trouble setting things up for February but we&#39;re good to go for March, April and May.</description>
    </item>
    
    <item>
      <title>How I use Github Classroom</title>
      <link>https://cestlaz.github.io/post/github-classroom/</link>
      <pubDate>Sun, 17 Feb 2019 16:42:48 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/github-classroom/</guid>
      <description>It&#39;s been an amazingly unproductive weekend. Mostly because I&#39;ve been sick with the flu. It sucks but since the rest of the family&#39;s away anway at least I&#39;m not making everyone miserable.
I did manage to stage my next couple of classes and figured that writing this post wouldn&#39;t take too much energy since it&#39;s mostly a video.
Earlier, I talked about using GitHub and TravicCI and this time around I show how I use GitHub classroom to set up, disseminate, and collect assignments.</description>
    </item>
    
    <item>
      <title>Java Interfaces</title>
      <link>https://cestlaz.github.io/post/java-interfaces/</link>
      <pubDate>Fri, 08 Feb 2019 09:40:44 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/java-interfaces/</guid>
      <description>Two of the hardest topics to make meaningful to students in APCS-A are inheritance and interfaces. It&#39;s not that they&#39;re super difficult topics but rather that they&#39;re not often needed, useful, or superior to not using them on beginner assignments. More often than not the motivation is a bit forced as are the assignments.
Inheritance is its own can of worms and to be honest, something I&#39;ve not found to be all that useful or necessary.</description>
    </item>
    
    <item>
      <title>Github Classroom and Travis CI</title>
      <link>https://cestlaz.github.io/post/github-classroom-travis/</link>
      <pubDate>Sat, 02 Feb 2019 09:44:29 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/github-classroom-travis/</guid>
      <description>I&#39;ve been using GitHub with my classes since GitHub&#39;s early days. Over time I&#39;ve gotten my workflows down. I use a combination of shell scripts - many just written on the fly, GitHub organizations, and some naming conventions and protocols that have served me well.
A few years ago, the GitHub Education team started GitHub Classroom. I looked at it at the time. It was pretty cool but I had my workflow so I didn&#39;t adopt it.</description>
    </item>
    
    <item>
      <title>Sequencing Topics</title>
      <link>https://cestlaz.github.io/post/sequencing-topics/</link>
      <pubDate>Sat, 26 Jan 2019 16:06:08 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/sequencing-topics/</guid>
      <description>Monday&#39;s the start of the Spring semester. Other than the 8:00am start I&#39;m looking forward to it. My 8:00am class is the honors/lab component that goes with CS1. I taught it last semester and during each of the past two years at Hunter. My second class is the follow up - more OOP / C++, data structures and some algorithms.
The material is old hat. I&#39;ve taught it in Java more times than I can count and also in C++ albeit many years ago.</description>
    </item>
    
    <item>
      <title>Professional Development - APCS-A, similar and beyond</title>
      <link>https://cestlaz.github.io/post/pd-apcs-a-and-beyond/</link>
      <pubDate>Sat, 15 Dec 2018 08:56:06 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/pd-apcs-a-and-beyond/</guid>
      <description>A while ago I wrote about our plans at Hunter to run professional development for CS teachers. Specifically, running once a month sessions for teachers who teach APCS-A, similar and beyond.
The idea started as a joke but morphed into a legit idea.
I was talking to some friends about CTLE hours and how ridiculous the system is. NY State teachers need 100 hours of CTLE credit (PD hours) every so many years.</description>
    </item>
    
    <item>
      <title>Let Teachers Teach</title>
      <link>https://cestlaz.github.io/post/let-teachers-teach/</link>
      <pubDate>Fri, 09 Nov 2018 08:57:36 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/let-teachers-teach/</guid>
      <description>Mark Guzdial&#39;s post the other day about direct isntruction struck a chord with me. Right up front, Mark said:
  The research evidence is growing that students learn better through direct instruction rather than through a discovery-based method, where we expect students to figure things out for themselves.  Quite a surprise to the teachers who have been beaten over the head with &#34;everything must be discovery&#34; in recent years.</description>
    </item>
    
    <item>
      <title>Compile Each Concept</title>
      <link>https://cestlaz.github.io/post/compile-each-concept/</link>
      <pubDate>Tue, 09 Oct 2018 14:46:59 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/compile-each-concept/</guid>
      <description>We&#39;ve all been there:
  Student: Teacher, I need help  Teacher (comes over)  Student (shows screen listing three bazillion errors)  The student has just written pages of code and finally decided to try to run it only to end up with pages of errors.
Error messages can at times be hard to read for beginners but to see and truth be told, they frequently don&#39;t even read them but over the years I&#39;ve developed a practice that I&#39;ve found helpful as a software developer and if students adopt the same practice it can save them a lot of time and effort.</description>
    </item>
    
    <item>
      <title>CS vs CT vs Coding</title>
      <link>https://cestlaz.github.io/post/cs-ct-cc/</link>
      <pubDate>Fri, 28 Sep 2018 12:08:35 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/cs-ct-cc/</guid>
      <description>There&#39;s been a lot of buzz recently concernting Computational Thinking (CT) vs Computer Science (CS) vs Coding / Programming on the interwebs.
 Some of the questions and concerns that I&#39;ve seen recently include: What is CT?? Will rich schools get CS and poor only CT? Will rich schools get CS and poor on coding?  The first question is a big one and as a community we haven&#39;t answered it yet.</description>
    </item>
    
    <item>
      <title>Not every lesson has to be magic</title>
      <link>https://cestlaz.github.io/post/not-always-exciting/</link>
      <pubDate>Tue, 25 Sep 2018 18:08:35 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/not-always-exciting/</guid>
      <description>If you check out Twitter, Facebook, Medium and other blog sites you might get the idea that you&#39;re the worst teacher in the world. The internet abounds with people sharing tweets and posts about wonderful lessons they&#39;ve just taught, witnessed or learned about in professional development. Sure, the teacher forums rife with requests for lesson ideas and resources but the shared material is always aces.
It makes sense, people in the community want to share things that worked for them or things they think will work.</description>
    </item>
    
    <item>
      <title>Two Faces of Project Based Learning</title>
      <link>https://cestlaz.github.io/posts/two-faces-of-pbl/</link>
      <pubDate>Sat, 28 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/two-faces-of-pbl/</guid>
      <description>If one looks at my twitter feed they&#39;ll notice that in addition to CS Ed, another issue I&#39;m passionate about is school reform or rather resistance to what is popularly known as and mislabeled as school reform. I&#39;m anti vouchers, charter schools, high stakes testing and more. One of the heroes of this resistance is education historian Diane Ravitch. I&#39;m a big fan of Diane&#39;s and she&#39;s one of the true great champions of public schools, kids, and teachers.</description>
    </item>
    
    <item>
      <title>PD for people who know CS</title>
      <link>https://cestlaz.github.io/posts/pd-for-cs/</link>
      <pubDate>Wed, 27 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/pd-for-cs/</guid>
      <description>I saw a couple of tweets from Sarah Judd this morning:
A lot of CS Ed PD assumes you are new to CS. I really want CS Ed PD for people like us that came from a CS background and want to understand the pedagogy for CS in particular better. Do you know of some?
&amp;mdash; Sarah Judd (@SarahEJudd) June 27, 2018 
Yes! I love SIGCSE and CSTA. I just feel like.</description>
    </item>
    
    <item>
      <title>Teaching recursion early? Make sure to use a good tool.</title>
      <link>https://cestlaz.github.io/posts/recursion-early/</link>
      <pubDate>Wed, 30 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/recursion-early/</guid>
      <description>I replied this tweet yesterday and thought I&#39;d expound a bit.
We started kids using scheme on 10th grade at stuy so did recursion early. Not everyone got all of it but it think it made things much easier for those that you more CS later.
&amp;mdash; Mike Zamansky (@zamansky) May 29, 2018 
We introduced recursion very early in our intro course at Stuy and I think it worked well.</description>
    </item>
    
    <item>
      <title>Do It The Dumb Way</title>
      <link>https://cestlaz.github.io/posts/do-it-the-dumb-way/</link>
      <pubDate>Fri, 30 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/do-it-the-dumb-way/</guid>
      <description>There&#39;s so much to like in the shape drawing lessons I talked about in my refactoring post that I thought I&#39;d share a little more here.
It can be argued that the most important things for a program to do is work. The most clever, elegant, creative program is worthless if it doesn&#39;t produce the desired result. All too often, beginners and hot shot beginners in particular try to be too clever too early and get themselves into trouble.</description>
    </item>
    
    <item>
      <title>Refactoring</title>
      <link>https://cestlaz.github.io/posts/refactoring/</link>
      <pubDate>Wed, 21 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/refactoring/</guid>
      <description>One of my laments on teaching computer science is that students are rarely taught and given the chance to develop good programming practices. There&#39;s usually not enough time. Beginners work on small &#34;toys&#34; which don&#39;t lend themselves to good software development practices and later on, there&#39;s so much other material like algorithms, data structures etc. to teach and learn that programming practices usually amount to lines like:
  &#34;Make sure to comment your code.</description>
    </item>
    
    <item>
      <title>Sigcse2018 Bootstrapworld on Creativity in CS classes</title>
      <link>https://cestlaz.github.io/posts/sigcse2018-bootstrap/</link>
      <pubDate>Fri, 02 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/sigcse2018-bootstrap/</guid>
      <description>I really didn&#39;t know what to expect at the Creativity, Customization, and Ownership: Game Design in Bootstrap: Algebra session. I&#39;ve been a big fan of Bootstrep for years and looking at the authors, Emmanuel Schanzer&#39;s been a freind forever. I&#39;ve never met Shriram Krishnamurthi in person but am looking forward to it. We&#39;ve traded emails and blog comments. I&#39;d like to consider him a friend and I certainly respect him and his work even though we frequently disagree around the edges.</description>
    </item>
    
    <item>
      <title>Sigcse2018 - Malloc Lab</title>
      <link>https://cestlaz.github.io/posts/sigcse2018-malloc-lab/</link>
      <pubDate>Thu, 01 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/sigcse2018-malloc-lab/</guid>
      <description>I wasn&#39;t going to go to this session. I started out in a panel on integrating social good into CS Ed. With the panel not meeting my expectations I moved over to my second choice - the system programming sessions where I saw Implementing Malloc: Students and Systems Programming, a paper presented by Brian Railing of CMU.
I really liked both the paper and the talk.
CMU computer science students all take a systems course that uses Computer Systems: A Programmer&#39;s Perspective.</description>
    </item>
    
    <item>
      <title>Tools can shape how we think</title>
      <link>https://cestlaz.github.io/posts/advent-2017-4-6/</link>
      <pubDate>Wed, 06 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/advent-2017-4-6/</guid>
      <description>I&#39;ve been having fun with this years Advent of Code competition. So far, I&#39;ve been able to keep up but with I expect that to change in another couple of days since I&#39;ll be traveling for the weekend.
After solving a problem, I like looking over some of the other solutions on the Advent of Code subreddit. Even with similar agorithmic solutions there&#39;s a decent amount of variation in the actual code and solutions in different languages can look radically different.</description>
    </item>
    
    <item>
      <title>A new first language? What&#39;s the follow up plan?</title>
      <link>https://cestlaz.github.io/posts/first-language-changing/</link>
      <pubDate>Fri, 21 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/first-language-changing/</guid>
      <description>This morning, Mark Guzdial wrote about Stanford possibly moving away from Java as their intro language. This comes on the heels of a semi-regular thread on one of the lists I&#39;m on asking about what languages are used at assorted colleges around the country. Invariably the Pascal - C++ - Java progression of APCS turns up in these threads.
There are plenty of arguments to be made both for and against pretty much any language or platform.</description>
    </item>
    
    <item>
      <title>GitHub as a tool for education</title>
      <link>https://cestlaz.github.io/posts/sigcse-2017-github-4/</link>
      <pubDate>Tue, 11 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/sigcse-2017-github-4/</guid>
      <description>When I started using git and GitHub with my students it was a natural progression having started with started with CVS and then, as technology changed moving through Subversion and then Mercurial. It was all about using sensible professional software development techniques while making it easier for students to submit work and for me to evaluate their submissions.
Over time, I found that git and GitHub in fact provided some extra support for educators right out of the box.</description>
    </item>
    
    <item>
      <title>A free multi-state clicker with built in redundency</title>
      <link>https://cestlaz.github.io/posts/thumb_clickers/</link>
      <pubDate>Sat, 01 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/thumb_clickers/</guid>
      <description>Last Friday, Mark Guzdial wrote about the woes of using clickers in a class. The amount of effort required to use his school&#39;s approved clicker technology sounds ridiculous so while we need tools to better engage students in large class settings we need better tools that can be integrated into our classes more easily.
I&#39;ve never used clickers. On top of stories like Mark&#39;s, there are a number of problems with using clickers in a public school.</description>
    </item>
    
    <item>
      <title>A Teacher looks at Advent of Code 2016 #2</title>
      <link>https://cestlaz.github.io/posts/advent-of-code-2016-2/</link>
      <pubDate>Thu, 08 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/advent-of-code-2016-2/</guid>
      <description>Today we&#39;re looking at Advent of Code 2016 number 2.
To change things up, I thought I&#39;d do a video where I live code a solution.
The solution I present is pretty straightforward - use a 2D array (or technically, an array of strings) to represent the keypad, parse the input, and follow the input instructions to build the code.
One of the things I really like about Advent of Code is that every problem has two parts and depending on how you solved part 1, you may or may not have extra work to do for part 2.</description>
    </item>
    
    <item>
      <title>A Teacher looks at Advent of Code 2016 #1</title>
      <link>https://cestlaz.github.io/posts/advent-of-code-2016-1/</link>
      <pubDate>Tue, 06 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/advent-of-code-2016-1/</guid>
      <description>I recently posted about Advent of Code - a series of programming problems relseased one a day. While they vary in terms of level of difficulty, a number of them make nice problems for introductory to mid level programming classes.
I thought I&#39;d share some of my thoughts on a few of them starting with the first problem from this years competition.
Take a minute to read it over.
At first glance, it might seem to a young programmer that this problem requires a two dimensional array - all about (x,y) coordinates but then there&#39;s a problem - there are no limits on coordinates and we can&#39;t make an unlimited size array.</description>
    </item>
    
    <item>
      <title>New Term, New Tool - repl.it</title>
      <link>https://cestlaz.github.io/posts/new-term-new-tool-repl.it/</link>
      <pubDate>Fri, 02 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/new-term-new-tool-repl.it/</guid>
      <description>We&#39;re now a week in to my first class at Hunter. It&#39;s a little early for me to really compare and contrast the high school to college experience but I thought I&#39;d share some thoughts on a tool that I&#39;ve recently started to play with.
My students were all supposed to be issued laptops at the beginning of the semester. The plan was to have them learn Linux, the command line, and a little DevOps along the way.</description>
    </item>
    
    <item>
      <title>Lesson plans - scripts to springboards</title>
      <link>https://cestlaz.github.io/posts/lesson-plans/</link>
      <pubDate>Thu, 23 Jun 2016 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/lesson-plans/</guid>
      <description>I spent last Saturday up at the Microsoft offices in Times Square observing a TEALS training session. My fried Nathaniel Granor, Teals Regional Manager in the east has invited me a number of times and this time I was able to make it.
If you don&#39;t know, TEALS is a program that takes volunteers in the tech industry and places them in classrooms. Unlike other programs, the TEALS volunteers work with the teachers while the kids learn some CS.</description>
    </item>
    
    <item>
      <title>Robots platforms and practicalities</title>
      <link>https://cestlaz.github.io/posts/robot-survey/</link>
      <pubDate>Wed, 15 Jun 2016 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/robot-survey/</guid>
      <description>I received an email from a friend the other day asking me about a particular robotics platform she recently saw.
I&#39;ve played with robotics on and off over the years ranging from building them from (not using) scratch using Atmel chips and programming them in assembly to using Arduino based platforms to using pre-built robot platforms. They&#39;re really cool and since they interact with the real world you can do all sorts of interesting and motivational things with students.</description>
    </item>
    
    <item>
      <title>Navajo Math Circles</title>
      <link>https://cestlaz.github.io/posts/navajo-circles/</link>
      <pubDate>Wed, 08 Jun 2016 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/navajo-circles/</guid>
      <description>Yesterday, I saw the New York Premiere of Navajo Math Circles, a documentary on a Math Circle put in place to support and enrich the currently under-served community in the Navajo educational system.
At their core, Math Circles are math outreach and enrichment programs. I&#39;m most familiar with the New York Math Circle. I&#39;m friends with many of their teachers and organizers and my son took part in their summer program for a couple of years.</description>
    </item>
    
    <item>
      <title>As curricula changes, what&#39;s falling through the cracks?</title>
      <link>https://cestlaz.github.io/posts/semaphores/</link>
      <pubDate>Sun, 01 May 2016 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/semaphores/</guid>
      <description>Edit: Just a brief note to clarify a couple of things. As indicated in the comments, this post isn&#39;t about what&#39;s appropriate for HS CS. It&#39;s more about what kids have after they finish their education - be it high school, college, code school, or other.
Some of my thoughts are the results of pondering on the exacerbations of friends after interviewing people for entry level positions.
The two examples are just to illustrate the point.</description>
    </item>
    
    <item>
      <title>IDE or the Cloud</title>
      <link>https://cestlaz.github.io/posts/2016-04-12-ide-or-cloud.html/</link>
      <pubDate>Tue, 12 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/2016-04-12-ide-or-cloud.html/</guid>
      <description>div.center {text-align:center;}    This weekend, I had a conversation on Twitter with my friend Roy Bahat: @zamansky Mike, unrelated, what do you think of https://t.co/BT1ublbajF ?
&amp;mdash; Roy Bahat (@roybahat) April 9, 2016 
@roybahatMaybe I&amp;#39;ll blog about my thoughts about online environments vs local installs
&amp;mdash; Mike Zamansky (@zamansky) April 9, 2016
@roybahat Agree with this but there are many issues. I&amp;#39;ll try to write more later.</description>
    </item>
    
    <item>
      <title>DevOps, or You don&#39;t know what the F you&#39;re doing!</title>
      <link>https://cestlaz.github.io/posts/2016-01-31-devops.html/</link>
      <pubDate>Sun, 31 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/2016-01-31-devops.html/</guid>
      <description>div.center {text-align:center;} 
 Having just concluded almost a quarter century at one job in one place, I&#39;ve been reflecting on a number of things.  What I accomplished, what I&#39;ve failed to accomplish, highlights, low lights and everything in between.  I&#39;ve also learned a lot over these twenty five years.  One thing I learned is DevOps and System Administration.  Back around 1993 or 1994 Stuy wasn&#39;t really on the internet.</description>
    </item>
    
    <item>
      <title>Debugging deployment</title>
      <link>https://cestlaz.github.io/posts/2016-01-23-debugging-deployment.html/</link>
      <pubDate>Sat, 23 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/2016-01-23-debugging-deployment.html/</guid>
      <description>div.center {text-align:center;} 
 SoftDev students are hard at work on their final projects. By now, they all have fairly complex code bases. This limits how much I can help them with debugging.  There are some problems, though, that they have to contend with that even with experience, are hard to spot. Notably because the very tools you use to debug these errors are part of the problem.  Last week, this happened twice.</description>
    </item>
    
    <item>
      <title>Cellular Automata for Pathfinding in NetLogo</title>
      <link>https://cestlaz.github.io/posts/2016-01-17-maze-ca.html/</link>
      <pubDate>Sun, 17 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/2016-01-17-maze-ca.html/</guid>
      <description>div.center {text-align:center;} .smaller {height:200px;width:200px}
.center {text-align:center;} .frame {width:600px;height:800px;}

    Last time we took a look at implementing a Cellular Automaton in NetLogo to do some simple image manipulation. We just scratched the surface. In class, the kids write pretty nice Photoshop Light applications.  Today we&#39;ll look at some more ambitious problem solving - using a Cellular Automaton to find a path through a maze.</description>
    </item>
    
    <item>
      <title>Cellular Automata, NetLogo and real problems</title>
      <link>https://cestlaz.github.io/posts/2016-01-15-shift-image.html/</link>
      <pubDate>Fri, 15 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/2016-01-15-shift-image.html/</guid>
      <description>.center {text-align:center;} .frame {width:640px;height:800px;} 
 We&#39;ve been using NetLogo in our intro course for years. It&#39;s a wonderful programming environment. Many of you recall the Logo programming language. NetLogo is like Logo but instead of programming a turtle, you write a program that&#39;s run by multiple, perhaps hundreds of turtles and also by the world the turtles live on.  Some of the reasons we like it are that it&#39;s: An easy accessible textual programming language Makes building a graphical interface trivial great for modeling Comes with tons of demo models</description>
    </item>
    
    <item>
      <title>Teaching Coding - getting beyond superficial syntax</title>
      <link>https://cestlaz.github.io/posts/2016-01-01-different-languages.html/</link>
      <pubDate>Fri, 01 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/2016-01-01-different-languages.html/</guid>
      <description>div.center {text-align:center;} 
 The other day, Alfred Thompson put up a piece about coding in multiple languages. Alfred references a post written last May by Rob Underwood.  Both pieces are worth a look.  Rob is trying to illustrate many of the superficial similarities in popular languages.  In the comments on Alfred&#39;s blog, both Alfred and I alluded to coding in an appropriate style for the language.</description>
    </item>
    
    <item>
      <title>Advent of Code - because I&#39;m an idiot</title>
      <link>https://cestlaz.github.io/posts/2015-12-17-im-an-idiot.html/</link>
      <pubDate>Thu, 17 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/2015-12-17-im-an-idiot.html/</guid>
      <description>div.center {text-align:center;} 

 I wish our kids believed us when we tell them that we have the same programming troubles as they do. We stare at code for hours not seeing problems that could be a simple as passing the wrong value. We spend an inordinate amount of time trying to see the problem and then realize that we just forgot something silly.  At this point, it&#39;s common for us CS teachers to tell each other &#34;</description>
    </item>
    
    <item>
      <title>Other People&#39;s Code</title>
      <link>https://cestlaz.github.io/posts/2015-11-11-other-peoples-code.html/</link>
      <pubDate>Wed, 11 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/2015-11-11-other-peoples-code.html/</guid>
      <description>div.center {text-align:center;}     The coding on their project is reminiscent in many ways of an Ed Sheerhan song. It left me in tears and very confused as to what the author was trying to accomplish.  &amp;#x2013; a student commenting on their most recent project.      We had some fun last week. Well, OK, I had some fun. The SoftDev classes had just finished a little project.</description>
    </item>
    
    <item>
      <title>Interview questions and tests</title>
      <link>https://cestlaz.github.io/posts/2015-11-04-tests-and-interviews.html/</link>
      <pubDate>Wed, 04 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/2015-11-04-tests-and-interviews.html/</guid>
      <description>The StuyCS Family mailing list was host to an interesting discussion today. One of our younger members asked if the practice of giving technical problems during an interview was going to follow him throughout his career or if it goes away for more senior applicants.  An interesting discussion followed.  It reminded me of a time I was talking to a few senior engineers at a large tech company.</description>
    </item>
    
    <item>
      <title>Alan Alda on Teaching Science</title>
      <link>https://cestlaz.github.io/posts/2015-10-20-alda.html/</link>
      <pubDate>Tue, 20 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/2015-10-20-alda.html/</guid>
      <description>div.center {text-align:center;} 
 Scale, scale, scale. Scripted lessons. Online resources, Moocs. No excuses schools. All of these are modern trends in education. None of these are about good education. It&#39;s really demoralizing reading article after article devaluing true master teachers and real education.  So, last night was a real pleasure.  I attended a talk, given by Alan Alda on communicating science. The talk was sponsored by The Academy for Teachers.</description>
    </item>
    
    <item>
      <title>Looking under the hood</title>
      <link>https://cestlaz.github.io/posts/2015-10-17-under-the-hood.html/</link>
      <pubDate>Sat, 17 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/2015-10-17-under-the-hood.html/</guid>
      <description>div.center {text-align:center;} 
 Just had an interesting conversation with Chris, one of our CSTUY mentors. Chris is working with one of our more advanced groups of hackers - they&#39;ll be creating a web based app that with ultimately be deployed as mobile using PhoneGap.  The question he had was &#34;Angular.js or Backbone.js.&#34;  Chris and I have had this conversation before. I was explaining at the time why I preferred to use Backbone.</description>
    </item>
    
    <item>
      <title>Grading Autograders</title>
      <link>https://cestlaz.github.io/posts/2015-10-16-graders.html/</link>
      <pubDate>Fri, 16 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/2015-10-16-graders.html/</guid>
      <description>div.center {text-align:center;} 
 The other day codehs made an announcement about their new autograder. Fellow CS Teaching veteran Alfred Thompson had his say up on his blog where he talked about Mark Guzdial&#39;s comment on autograders leading to less creative assignments.  I very much agree that autograders, due to their rigidness lend themselves to less creative projects, but thought I&#39;d write up a few of my own thoughts on autograders.</description>
    </item>
    
    <item>
      <title>Setting kids up to fail - CS edition</title>
      <link>https://cestlaz.github.io/posts/2015-08-17-setting-up-to-fail-cs.html/</link>
      <pubDate>Mon, 17 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/2015-08-17-setting-up-to-fail-cs.html/</guid>
      <description>div.center {text-align:center;}    We talked about setting kids up to fail in math. What about CS?  Well, it&#39;s a little subtler.  I started thinking about this after a conversation with one of my graduates about Harvard&#39;s famous CS50. Since that conversation, I&#39;ve spoken to a number of my kids that have gone through CS50 and most seem to say the same things: They don&#39;t really teach anything  The kids rely on a group member who already knows stuff or will learn all the stuff on their own  If it weren&#39;t for my StuyCS background my group would have really struggled.</description>
    </item>
    
    <item>
      <title>Shipping a product</title>
      <link>https://cestlaz.github.io/posts/2015-06-19-shipping-product.html/</link>
      <pubDate>Fri, 19 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/2015-06-19-shipping-product.html/</guid>
      <description>div.center {text-align:center;} 
  Back in April, I was at the second annual &#34;Dream It, Code It, Win It!&#34; awards. Some of our kids had submitted work and were selected as awardees in the high school division.  It was great to see Jack and David Cahn there. Jack and David were both members of winning high school teams last year and they were back as college winners this time around.</description>
    </item>
    
    <item>
      <title>Jazz Hands!!!!!!</title>
      <link>https://cestlaz.github.io/posts/2015-06-11-jazz-hands.html/</link>
      <pubDate>Thu, 11 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/2015-06-11-jazz-hands.html/</guid>
      <description>div.center {text-align:center;} 

  The StuyCS Semi Formal, Clyde &#34;Thluffy&#34; Sinclair, and other assorted silliness - one of the reasons StuyCS is a family is that we try to have fun.  Jazz Hands day was the latest.  I got the idea at JonAlf&#39;s wedding. The wait staff were all wearing white gloves - all of a sudden it hit me - Jazz Hands!!!! and Jazz Hands day was born.</description>
    </item>
    
    <item>
      <title>Taking stock and tracking progress</title>
      <link>https://cestlaz.github.io/posts/2015-02-11-taking-stock-self-assess.html/</link>
      <pubDate>Wed, 11 Feb 2015 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/2015-02-11-taking-stock-self-assess.html/</guid>
      <description>div.center {text-align:center;} 
 When starting the spring semester, students are frequently a little rusty. They just had a high intensity month of study, tests, and projects. That was followed by a week of nothing.  I like to start with something lightweight that gets them coding again and ramps them up to speed.  In SoftDev I started with a brief overview of the HTML5 canvas and then gave them a small homework assignment to do something fun.</description>
    </item>
    
    <item>
      <title>Kids these days -- they don&#39;t know nuttin</title>
      <link>https://cestlaz.github.io/posts/2015-01-15-kids-know-nuttin.html/</link>
      <pubDate>Thu, 15 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/2015-01-15-kids-know-nuttin.html/</guid>
      <description>div.center {text-align:center;} 
 Yesterday, I took part in a round table discussion on Ed Tech and Tech Ed, the latter being more, as they say, my wheelhouse. Afterwards a few of us were chatting and a friend observed that when she first started to talk to high school kids she was shocked that they really didn&#39;t know the local tech players - neither names nor companies.  A couple of years ago, another friend was helping me organize an event for high schoolers.</description>
    </item>
    
    <item>
      <title>Little details we take for granted</title>
      <link>https://cestlaz.github.io/posts/2014-11-21-little-details.html/</link>
      <pubDate>Fri, 21 Nov 2014 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/2014-11-21-little-details.html/</guid>
      <description>div.center {text-align:center;} 
  I&#39;m getting ready for my AP classes this morning. We&#39;re building a word search generator and we&#39;re at the point where we need to read a list of words from a file  First, I&#39;d better make sure I can do it. We&#39;re using the java scanner, mostly because it&#39;s easy.  First cut: public class wl { public static void main(String[] args) { Scanner sc = new Scanner(new File(&#34;</description>
    </item>
    
    <item>
      <title>Hidden Complexity</title>
      <link>https://cestlaz.github.io/posts/2014-11-17-hidden-complexity.html/</link>
      <pubDate>Mon, 17 Nov 2014 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/2014-11-17-hidden-complexity.html/</guid>
      <description>div.center {text-align:center;} 
 I&#39;ve said it many times:   Never use a tool you couldn&#39;t write yourself. 
 That is - make sure you understand what&#39;s going on under the hood.  In AP we&#39;ve been playing with ArrayLists. The problem for today? Create an ArrayList with consecutive integers and then write a routine that will randomize the ArrayList.  For example, you might start with this ArrayList: 0,1,2,3,4,5</description>
    </item>
    
    <item>
      <title>Forty minutes to the punch line or &#34;we&#39;ll never look at functions the same way again&#34;</title>
      <link>https://cestlaz.github.io/posts/2014-11-12-decorators.html/</link>
      <pubDate>Wed, 12 Nov 2014 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/2014-11-12-decorators.html/</guid>
      <description>div.center {text-align:center;} 
  How many times do we teach something and leave the kids thinking:  &#34;what&#39;s the point of this?&#34; &#34;When will I use this?&#34; or even just the plain old fashioned &#34;that&#39;s weird.&#34;  It&#39;s pretty cool when a lesson starts out that way but you get to the payoff by the end of the class.  Today we started exploring some advanced python.  We started by showing that you can assign functions to variables or pass them as parameters: def inc(x): return x+1 def dec(x): return x-1</description>
    </item>
    
    <item>
      <title>Wait, I know that!!!!</title>
      <link>https://cestlaz.github.io/posts/2014-09-23-i-know-that.html/</link>
      <pubDate>Tue, 23 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/2014-09-23-i-know-that.html/</guid>
      <description>div.center {text-align:center;} 
 If I&#39;m doing my job right, by the time my kids graduate they can learn on their own.  It&#39;s like when two years ago, before starting her summer internship, Batya listed all the tools and technologies she had to work with. When I pointed out that she hadn&#39;t ever used any of them before and asked how she was going to deal with it, she replied &#34;</description>
    </item>
    
    <item>
      <title>Building a SHIP - Outreach</title>
      <link>https://cestlaz.github.io/posts/2014-07-20-ship-outreach.html/</link>
      <pubDate>Sun, 20 Jul 2014 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/2014-07-20-ship-outreach.html/</guid>
      <description>div.center {text-align:center;} 
  We&#39;ve got a few more topics to cover in the Building a SHIP series. We still have to cover: The Crew  Curricular Choices  The long term plan  Site and funding       But for today, we&#39;ll talk outreach.     Outreach proved to be particular challenge for SHIP. Our entire crew is made up of teachers.</description>
    </item>
    
    <item>
      <title>Twitch Coding</title>
      <link>https://cestlaz.github.io/posts/2014-04-10-twitch-coding.html/</link>
      <pubDate>Thu, 10 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/2014-04-10-twitch-coding.html/</guid>
      <description>div.center {text-align:center;} 
 We have the kids write programs in all sorts of ways on paper  solo  informally in pairs  &#34;pair programming&#34;  We have them trade code, pick up each others projects, and more.  
 We do lots of different things to engage the kids in a lot of different ways and I love it when someone comes up with a new technique.</description>
    </item>
    
    <item>
      <title>Sorting - Subtle Errors</title>
      <link>https://cestlaz.github.io/posts/2014-03-17-subtle-errors-sorting.html/</link>
      <pubDate>Mon, 17 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/2014-03-17-subtle-errors-sorting.html/</guid>
      <description>div.center {text-align:center;} 
 Time to wrap up sorting for a while. We just finished quicksort having gone through a series of lessons We started with Quickselect.  Then we did a quicksort, copying to new arrays during the partition  Then finally to an in place quicksort.  
 For the final quicksort we used a partition algorithm pretty much the same as the one described here.  We started testing using by building a randomly filled array like this: Random rnd = new Random(); int a[] = new int[n]; for (int i0;i&amp;amp;lt;&amp;lt;span style=&amp;quot;color: #7CB8BB;&amp;quot;&amp;gt;n&amp;lt;/span&amp;gt;;i++) { a[i]  rnd.</description>
    </item>
    
    <item>
      <title>From selection to sorting</title>
      <link>https://cestlaz.github.io/posts/2014-03-12-select-to-sort.html/</link>
      <pubDate>Wed, 12 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/2014-03-12-select-to-sort.html/</guid>
      <description>div.center {text-align:center;} 
 When I first saw the quicksort it was in an algorithms class back in the day. We first learned the quicksort, then choosing a good pivot element and then as an afterthought we did quickselect.  Fast forward to teaching. I was never really happy teaching quicksort. Mergesort is easy to motivate and it&#39;s pretty easy to write. Quicksort always felt a little forced.</description>
    </item>
    
    <item>
      <title>Be the ball</title>
      <link>https://cestlaz.github.io/posts/2014-03-09-be-the-ball.html/</link>
      <pubDate>Sun, 09 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/2014-03-09-be-the-ball.html/</guid>
      <description>div.center {text-align:center;} 
 
 Crystal Furman wrote a nice post titled Coding Comprehension about a week ago. There was a little buzz about it in the APCS Facebook group and shortly after, Alfred Thompson added his two cents.  I thought I&#39;d add mine, at least a couple of thoughts.  There are a lot of issues - long term retention, transfer of knowledge from the basics to more advanced tools, pattern recognition, and more.</description>
    </item>
    
    <item>
      <title>I guess I&#39;m a dumbass</title>
      <link>https://cestlaz.github.io/posts/2014-02-27-dumbass/</link>
      <pubDate>Thu, 27 Feb 2014 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/2014-02-27-dumbass/</guid>
      <description>I like a fairly informal atmosphere in my classes. Students have to know that there&amp;rsquo;s a line between teacher and student but I also want them to feel like we&amp;rsquo;re all part of the Stuy CS family.
Whenever we start a new term, it takes a while to break down the walls. The students don&amp;rsquo;t know what to expect of me, can they trust me? Am I a bozo? Who knows.</description>
    </item>
    
    <item>
      <title>Change the data</title>
      <link>https://cestlaz.github.io/posts/2014-02-26-change-the-data/</link>
      <pubDate>Wed, 26 Feb 2014 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/2014-02-26-change-the-data/</guid>
      <description>Patient: &amp;ldquo;Doctor, it hurts when I do this.&amp;rdquo;
Doctor: &amp;ldquo;So, don&amp;rsquo;t do that.&amp;rdquo;
 We&amp;rsquo;ve been spending time on State Space Search. It&amp;rsquo;s a great topic. We deal with or at least introduce:
 Recursion Blind search Heuristic search foreshadowing things like A* and Dijkstra&amp;rsquo;s algorithm.  and more. Today, however. I want to talk about something else.
We started by developing a maze solver. It reads a text file representing the maze and then proceeds to find an exit.</description>
    </item>
    
    <item>
      <title>Fibonacci by the tail</title>
      <link>https://cestlaz.github.io/posts/2014-02-13-fibonacci/</link>
      <pubDate>Thu, 13 Feb 2014 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/2014-02-13-fibonacci/</guid>
      <description>We&amp;rsquo;re ramping up for recursion in my junior classes - state space search, nlg(n) sorts, etc. As a refresher, we took a quick look at the Fibonacci numbers.
Now, some people seem to think that it&amp;rsquo;s a tired problem. It&amp;rsquo;s mathy, it&amp;rsquo;s played out, it&amp;rsquo;s boring etc.. They just might be missing the point.
The beauty isn&amp;rsquo;t in the problem itself, but rather, that it&amp;rsquo;s a platform on which you can look at many problem solving techniques.</description>
    </item>
    
    <item>
      <title>Rot13 - Gateway &lt;s&gt;Drugs&lt;/s&gt; Techniques</title>
      <link>https://cestlaz.github.io/posts/2014-01-07-rot13-gateway/</link>
      <pubDate>Tue, 07 Jan 2014 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/2014-01-07-rot13-gateway/</guid>
      <description>I&amp;rsquo;ve written before about That One Inspirational Curriculum - the idea that it&amp;rsquo;s not the topic in the syllabus but rather what the teacher does with it.
Some times a simple problem can lead to some really neat concepts.
Take what we did in my AP classes over the past couple of days.
I wanted a nice little warm up after the break so we wrote a simple rotation cipher. We started with a little encode routine - take a string and rotate the letters by some offset.</description>
    </item>
    
    <item>
      <title>Bucket Sorting</title>
      <link>https://cestlaz.github.io/posts/2013-11-27-bucket-sorts/</link>
      <pubDate>Wed, 27 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/2013-11-27-bucket-sorts/</guid>
      <description>In spite of the Java based annoyances I mentioned last time, I decided to go ahead and do Radix sort with my AP students. I usually don&amp;rsquo;t cover it in AP Computer Science, but I like getting the kids to think about using arrays as buckets as it&amp;rsquo;s a new way of thinking for them and it does give a non-trivial application that combines ararys and ArrayLists.
It&amp;rsquo;s a nice little algorithm.</description>
    </item>
    
    <item>
      <title>Teaching Languages</title>
      <link>https://cestlaz.github.io/posts/2013-11-23-teaching-languages/</link>
      <pubDate>Sat, 23 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/2013-11-23-teaching-languages/</guid>
      <description>Java&amp;rsquo;s never been my favorite language either for using or for teaching.
As a programmer, after starting with languages like Fortran and Pascal, I really cut my teeth with C. More recently, Python has been my go to language to get real work done.
From a teaching point of view most languages have good points and bad ones. When the AP class went from Pascal to C++ I lamented losing the simplicity and the low cost of entry.</description>
    </item>
    
    <item>
      <title>Build it first</title>
      <link>https://cestlaz.github.io/posts/2013-11-19-build_it/</link>
      <pubDate>Tue, 19 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/2013-11-19-build_it/</guid>
      <description>The subtitle of this post is:
 and why my students are going to hate me tomorrow.
 When my good friend Gerry Seidman talks to my classes, he frequently says &amp;ldquo;never use a data structure or algorithm you couldn&amp;rsquo;t build yourself.&amp;rdquo;
This doesn&amp;rsquo;t mean that you have to write everything from scratch, just that you should have some knowledge as to what&amp;rsquo;s going on under the hood. I find that all too often young programmers just rely on APIs and libraries and really don&amp;rsquo;t know how their computers and programs are working.</description>
    </item>
    
    <item>
      <title>Stuyablo II</title>
      <link>https://cestlaz.github.io/posts/2013-10-27-stuyabloii/</link>
      <pubDate>Sun, 27 Oct 2013 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/2013-10-27-stuyabloii/</guid>
      <description>Last week in my AP classes, we were working on inheritance.
So, what to do?
Last time around I had my classes work on a &amp;ldquo;speed dating&amp;rdquo; program - StuyDater. Back then JonAlf had his classes work on Stuyablo, that classic dungeon crawl.
I still plan on reworking the StuyDater project, but first I decided to do my take on Stuyablo. Of course, we&amp;rsquo;ve improved on it. This time it&amp;rsquo;s Stuyablo II.</description>
    </item>
    
    <item>
      <title>Databases - the next day</title>
      <link>https://cestlaz.github.io/posts/2013-10-09-database-followup/</link>
      <pubDate>Wed, 09 Oct 2013 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/2013-10-09-database-followup/</guid>
      <description>Two days ago I asked the students, in small groups, to come up with a design to store a school (or school district) database.
Yesterday we discussed the designs.
All the students took our brand of AP Computer Science last year - a superset of the old AB curriculum and in that class they implemented a number of data structures such as binary search trees and hash tables, but they really didn&amp;rsquo;t have an opportunity to design something more comprehensive.</description>
    </item>
    
    <item>
      <title>Databases - putting it all together</title>
      <link>https://cestlaz.github.io/posts/2013-10-07-databases/</link>
      <pubDate>Mon, 07 Oct 2013 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/2013-10-07-databases/</guid>
      <description>So, we&amp;rsquo;re into the second year of my Software Development class. It&amp;rsquo;s a little different since last time, I taught many of the kids in AP. This time, they&amp;rsquo;re mostly new to me.
In AP, everything is low level. The students build linked lists, binary search trees, heaps, hash tables, graphs and the like. It&amp;rsquo;s all about building the data structure. The Node, if you would.
We&amp;rsquo;re about to start talking about databases.</description>
    </item>
    
    <item>
      <title>Real Data - Part II</title>
      <link>https://cestlaz.github.io/posts/2013-05-20-real_data_part_ii/</link>
      <pubDate>Mon, 20 May 2013 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/2013-05-20-real_data_part_ii/</guid>
      <description>About a month ago, I talked about using real data with our intro classes. After looking at the correlation between school&amp;rsquo;s SAT scores and free and reduced lunch rates, it was time to turn the students loose.
The assignment: Find some interesting data out and do something with it. Make a web page that shows what you did and what you discoverde. We had already looked at the NYC Data Mine as well as a few other sources but students were encouraged to find new data sourcess.</description>
    </item>
    
    <item>
      <title>Madlib Madness</title>
      <link>https://cestlaz.github.io/posts/2013-04-30-madlib_madness/</link>
      <pubDate>Tue, 30 Apr 2013 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/2013-04-30-madlib_madness/</guid>
      <description>Earlier in the term, our intro classes spent a little time learning some basic HTML. We don&amp;rsquo;t spend a lot of time on it, just enough so that the students can present their work in a static web site. The end goal, though, was to programatically generate the web sites - there&amp;rsquo;s nothing quite as empowering to a student as when they can present their work to the world.
Finally, it&amp;rsquo;s all coming together.</description>
    </item>
    
    <item>
      <title>Real Data</title>
      <link>https://cestlaz.github.io/posts/2013-04-14-real_data/</link>
      <pubDate>Sun, 14 Apr 2013 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/2013-04-14-real_data/</guid>
      <description>When looking for assignments for our classes, in addition to trying to craft assignments that develop and reinforce key ideas, we also strive to come up with ideas that &amp;ldquo;speak&amp;rdquo; to the students and keep their interest. We write small games, use problems within the student&amp;rsquo;s experiences, and in general try to find problems that are appealing.
This is much easier to do when the kids can read data from a file.</description>
    </item>
    
    <item>
      <title>Who won the election -- Quadratic to Linear Time!!!!!</title>
      <link>https://cestlaz.github.io/posts/2013-03-23-who_won_the_election-quadratic_to_linear_time/</link>
      <pubDate>Sat, 23 Mar 2013 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/2013-03-23-who_won_the_election-quadratic_to_linear_time/</guid>
      <description>Last week was crazy. Busy, stressful, late night after late night. It ended, though, on a great note.
A young lady in my intro class found me in my office near the end of the day:
 Student: Mr. Z, I wanted to make sure to catch you before vacation!
Me: What&amp;rsquo;s up?
Student: I wanted to tell you that today&amp;rsquo;s lesson was AWESOME!!!!!!
 Wow. I&amp;rsquo;ve been teaching 23 years and that&amp;rsquo;s never happened before!</description>
    </item>
    
    <item>
      <title>Layers of a lesson</title>
      <link>https://cestlaz.github.io/posts/2012-12-17-layers-of-a-lesson.html/</link>
      <pubDate>Mon, 17 Dec 2012 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/2012-12-17-layers-of-a-lesson.html/</guid>
      <description>My last post I was talking about the fact that as teachers, our knowledge and experience is frequently trivialized. The tenor of the times is that anyone can design a course, anyone can teach, and in fact, we don&#39;t even need teachers, just videos or computer based systems. If you&#39;ve ever tutored a friend, you&#39;re more than qualified.
 That might be a strong statement but everywhere you look you see &#34;</description>
    </item>
    
    <item>
      <title>Real Projects</title>
      <link>https://cestlaz.github.io/posts/2012-12-09-real-projects.html/</link>
      <pubDate>Sun, 09 Dec 2012 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/2012-12-09-real-projects.html/</guid>
      <description>This post was supposed to be about varsity academic teams but I wanted to share something else first.
 For years I was unhappy with our &#34;research&#34; course but due to the misguided views of our past administration, I pretty much had to keep it running. Over the same time, I was frustrated by the fact that there was so much missing in our students computer science related education. Specifically, kids don&#39;t really get to experience creating large &#34;</description>
    </item>
    
    <item>
      <title>Sorting from the top and from the bottom</title>
      <link>https://cestlaz.github.io/posts/2010-03-14-sorting-from-top-and-from-bottom.html/</link>
      <pubDate>Sun, 14 Mar 2010 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/2010-03-14-sorting-from-top-and-from-bottom.html/</guid>
      <description>Sorting from the top and from the bottom I&#39;ve been meaning to write this post for a couple of weeks, but some times life just gets in the way. I&#39;ve always thought it important to arm students with as many different tools with which to attack problems as possible. As such, the courses I teach use a number of different languages, each highlighting a different paradigm and thought process. The hope is that by the end of the sequence, they can look at problems from many different angles.</description>
    </item>
    
    <item>
      <title>What&#39;s Next</title>
      <link>https://cestlaz.github.io/posts/2010-02-18-whats-next.html/</link>
      <pubDate>Thu, 18 Feb 2010 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/2010-02-18-whats-next.html/</guid>
      <description>Just a short follow up on the last post.
In thinking about how I frequently programs, once I have a plan, I work on one part of the project, and then ask myself &#34;what&#39;s next?&#34; That is, what is the next step towards completion.
It reminded me about a guest speaker we had a about a year and a half ago at one of our &#34;professional development&#34; days. For the past two years, our school has had &#34;</description>
    </item>
    
    <item>
      <title>Towers of Hanoi</title>
      <link>https://cestlaz.github.io/posts/2010-01-10-towers-of-hanoi.html/</link>
      <pubDate>Sun, 10 Jan 2010 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/2010-01-10-towers-of-hanoi.html/</guid>
      <description>Closed out last week teaching the Towers of Hanoi. It&#39;s a wonderful topic. Not because it&#39;s so interesting in and of itself, but as a platform from which you can explore any number of interesting topics.
Many books appropriate for the AP (AB) curriculum mention the towers, but to my knowledge most only scratch the surface. I randomly grabbed two books that I consider good from the shelf before writing this.</description>
    </item>
    
    <item>
      <title>Looking for interesting questions</title>
      <link>https://cestlaz.github.io/posts/2010-01-03-looking-for-interesting-questions.html/</link>
      <pubDate>Sun, 03 Jan 2010 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/2010-01-03-looking-for-interesting-questions.html/</guid>
      <description>For the winter break, I assigned this set of A exam questions (actually, just the three that don&#39;t deal with the case study) to my AP classes. I wanted to assign something that wasn&#39;t particularly heavy but I didn&#39;t want my students to forget everything over break. As with most AP exam questions, they&#39;re long, wordy, and somewhat brain dead. They take a long time to read, but they frequently take you step by step through what they want you to do.</description>
    </item>
    
  </channel>
</rss>
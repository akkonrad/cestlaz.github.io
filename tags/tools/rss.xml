<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tools on C&#39;est la Z</title>
    <link>https://cestlaz.github.io/tags/tools/</link>
    <description>Recent content in Tools on C&#39;est la Z</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 21 May 2020 14:47:59 -0400</lastBuildDate>
    
	<atom:link href="https://cestlaz.github.io/tags/tools/rss.xml" rel="self" type="application/rss" />
    
    
    <item>
      <title>Using Emacs 72 - Customizing Elfeed</title>
      <link>https://cestlaz.github.io/post/using-emacs-72-customizing-elfeed/</link>
      <pubDate>Thu, 21 May 2020 14:47:59 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/using-emacs-72-customizing-elfeed/</guid>
      <description>I made this video write after I made the openwith one so even though I don&#39;t mention anything in this video, I wanted to share some updates on dired and openwith.
I got a lot of suggestions on alternate ways to achieve the workflow I was seeking - being able to open a file using an external viewer. One person noted that under newer versions of Emacs, the W key is bound to the command (browse-url-of-dired-file) which does exactly what I wanted.</description>
    </item>
    
    <item>
      <title>Using Emacs 71 Openwith</title>
      <link>https://cestlaz.github.io/post/using-emacs-71-openwith/</link>
      <pubDate>Wed, 13 May 2020 11:45:39 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/using-emacs-71-openwith/</guid>
      <description>I spend most of my time in Emacs but still use the shell and browser for some things. One of the things I use my shell for is to launch libreoffice to view and edit docx files and spreadsheets, evince for pdf files and imagemagick for image files. Yes, I know I can view all of these in Emacs but there are a few limitations:
 Emacs chokes on large files I can&#39;t edit the docx file or the image  So, I hop to the shell and launch the program I need on the files in question.</description>
    </item>
    
    <item>
      <title>To Zoom or not to Zoom</title>
      <link>https://cestlaz.github.io/post/zoom-or-not/</link>
      <pubDate>Tue, 07 Apr 2020 14:03:13 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/zoom-or-not/</guid>
      <description>Zoom has been on a wild ride. As teachers scrambled to try to deliver instruction from there homes to student homes Zoom quickly became a favorite. It was easy, performed well, and had features that other services seemed to lack. Features like being able to mute students and for me a big one - breakout rooms. Now, these features weren&#39;t flawless as I mentioned in my last post but that&#39;s okay.</description>
    </item>
    
    <item>
      <title>Using Emacs 70 Org Protocol</title>
      <link>https://cestlaz.github.io/post/using-emacs-70-org-protocol/</link>
      <pubDate>Fri, 27 Mar 2020 15:15:28 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/using-emacs-70-org-protocol/</guid>
      <description>I spent part of today cleaning up my Emacs workflow. Specifically, how I capture emails and links into org-mode
I already wrote about how I used org-capture (here and here). It&#39;s pretty clean and easy but there was one thing that always nagged at me. When I capture from mu4e within Emacs by hitting C-c m it&#39;s set up to automatically populate the capture template with a link to the email labelled with the email&#39;s subject.</description>
    </item>
    
    <item>
      <title>Using Emacs 69 Floobits</title>
      <link>https://cestlaz.github.io/post/using-emacs-69-floobits/</link>
      <pubDate>Sat, 21 Mar 2020 10:52:37 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/using-emacs-69-floobits/</guid>
      <description>Hunter, like most other schools has gone remote. I taught my first two online classes on Thursday. Currently, I&#39;m using Zoom for synchronous stuff and a mailing list and slack for async.
There are still some missing pieces. When we&#39;re all together, it&#39;s easy to look at a student&#39;s work and talk them through issues. It&#39;s also easy to get students to work together, at least to a point. With everyone locked up in their own homes, real time collaboration is harder.</description>
    </item>
    
    <item>
      <title>Using Emacs Episode 68 - Tramp and org-publish</title>
      <link>https://cestlaz.github.io/post/using-emacs-68-tramp-org-publish/</link>
      <pubDate>Sat, 14 Mar 2020 20:57:08 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/using-emacs-68-tramp-org-publish/</guid>
      <description>I maintain a couple of small simple web sites. One provides information about my undergraduate honors CS program and another that isn&#39;t live yet is a FAQ for my CS teacher certification program.
Traditionally I would use ssh to connect to the host machine, fire up Emacs and edit the html files to update the sites. I always forget that with Emacs we can do better.
One way is with Tramp Mode.</description>
    </item>
    
    <item>
      <title>Using Emacs Episode 67 - Emacs vs Vi a rant with some historical perspective</title>
      <link>https://cestlaz.github.io/post/using-emacs-67-emacs-rant/</link>
      <pubDate>Sun, 23 Feb 2020 07:57:08 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/using-emacs-67-emacs-rant/</guid>
      <description>I&#39;ve been meaning to do my version of the Emacs VI rant for a while. A few years ago I staged out a video showing what it would be like for a beginner to start with Emacs, Vim, Atom, and Sublime Text but decided it would be long, unwieldy and clunky to present - particularly when it came to customization.
I tabled it for a while but recently have been seeing a bunch of threads, videos and posts talking about Emacs and Vim.</description>
    </item>
    
    <item>
      <title>Github Org Explorer - now with oauth</title>
      <link>https://cestlaz.github.io/post/github-org-explorer-oauth/</link>
      <pubDate>Sun, 16 Feb 2020 12:53:59 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/github-org-explorer-oauth/</guid>
      <description>A while ago I wrote about a small side project - GitHub Org Explorer - a small tool to make it easier to manager GitHub repositories based on organization. I&#39;m using it as a replacement for the GitHub provided Classroom Assistant. I find it more flexible in terms of exporting assignments to my own machine and it allows me to delete repos en masse which is critical after the semester is over.</description>
    </item>
    
    <item>
      <title>CS Ed Podcast 2 - Dan Garcia on test creation</title>
      <link>https://cestlaz.github.io/post/cs-ed-podcast-2/</link>
      <pubDate>Thu, 13 Feb 2020 08:41:21 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/cs-ed-podcast-2/</guid>
      <description>Episode 2 of the CS Ed podcast had Dan Garcia talk about exam creation.
This wasn&#39;t a podcast about the value of exams - in class, high stakes or otherwise. In fact Dan says in the podcast it would be great to &#34;get grades out of the equation. Grades are gonna be an impediment to learning.&#34; But recognizes that we have not say in this most of the time (and I&#39;ll add that though I agree grades can and do perform a function) so we should be creative in terms of assessment.</description>
    </item>
    
    <item>
      <title>Using Emacs 66 - an eshell switcher in elisp</title>
      <link>https://cestlaz.github.io/post/using-emacs-66-eshell-elisp/</link>
      <pubDate>Sat, 08 Feb 2020 08:12:22 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/using-emacs-66-eshell-elisp/</guid>
      <description>I thought it was time to give eshell in Emacs another try. It has some pretty cool features but for whatever reason, I&#39;ve never really been able to adopt Emacs as my go to shell.
Eshell out of the box is pretty cool but could use some enhancements. When launching at login it doesn&#39;t know about the path you set in your .bashrc or .zshrc in my case files. It just seemed to have problems with paths in general but that was fixed with the exce-path-from-shell package.</description>
    </item>
    
    <item>
      <title>Riffing on the CS Ed Podcast - Episode 1 - David Malan</title>
      <link>https://cestlaz.github.io/post/cs-ed-podcast-1/</link>
      <pubDate>Thu, 06 Feb 2020 16:42:08 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/cs-ed-podcast-1/</guid>
      <description>I saw a couple of posts the other day about the CS Ed Podcast.
Kristin Stephens-Martinez of Duke interviewed (or will interview) six CS educators on a variety of topics. There are four posted so far:
 David Malan Dan Garcia Amy Ko Mark Guzdial  Before I started I thought I&#39;d listen to a few and then share some thoughts but I found so much to unpack in the second episode where Dan talks about testing that I decided to share my thoughts on the first episode, then Dan&#39;s and then see if find anything to comment on in episodes three and beyond.</description>
    </item>
    
    <item>
      <title>Using Emacs 65 - Live Python</title>
      <link>https://cestlaz.github.io/post/using-emacs-65-live-python/</link>
      <pubDate>Sun, 02 Feb 2020 13:13:09 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/using-emacs-65-live-python/</guid>
      <description>The other day I stumbled upon Emacs&#39;s Live Coding plugin. It takes interactive coding up to the next level.
Normally, when you code Python, if you&#39;re working in a REPL, every time you hit  the line you just typed is evaluated. When you&#39;re working ina source file, you&#39;re just editing until you send the file into a Python interpreter.
With this module, your file is continually evaluated as you type and it shows you the results in a side window.</description>
    </item>
    
    <item>
      <title>Using Emacs 64 - Notmuch</title>
      <link>https://cestlaz.github.io/post/using-emacs-64-notmuch/</link>
      <pubDate>Sat, 18 Jan 2020 08:52:01 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/using-emacs-64-notmuch/</guid>
      <description>I&#39;ve been using the gmail web interface for a long time. My first email or at least the oldest one still in the system dates back to Oct 18, 2004 7:29am. It was a letter to a buddy about an indoor turkey fryer and if he needed a lift to Fairway the following morning to shop.
Before that, I used my Panix shell account - probably with PINE. Work email was using my own servers at Stuy along with either PINE or Emacs using VM mode which has long been deprecated.</description>
    </item>
    
    <item>
      <title>Using Emacs 63 ClojureScript</title>
      <link>https://cestlaz.github.io/post/using-emacs-63-clojurescript/</link>
      <pubDate>Thu, 09 Jan 2020 08:11:52 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/using-emacs-63-clojurescript/</guid>
      <description>I&#39;ve been playing with ClojureScipt for my web projects recently and really like it. Much more fun than any of the JavaScript frameworks I&#39;ve used.
Still, getting started was somewhat difficult due to the number of options in tooling and uneven documentation and learning resources.
Here&#39;s a video that shows how I use Emacs for ClojureScript development but the focus of the video is on how to get started with ClojureScript and Emacs takes a back seat other than an example of my workflow.</description>
    </item>
    
    <item>
      <title>GitHub Org Explorer</title>
      <link>https://cestlaz.github.io/post/github-org-explorer/</link>
      <pubDate>Fri, 03 Jan 2020 14:40:40 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/github-org-explorer/</guid>
      <description>I&#39;m a big fan of GitHub Classroom and use it for all of my class assignments. It&#39;s great for organizing, distributing, and collecting assignments and gets the kids used to using real world tools at the same time. I&#39;ve written a bunch of posts on how I use it:
 How I use GitHub Classroom Communicating with Students - meybe GitHub to the rescue GitHub as a tool for education (part of a 4 part series)  As well as a couple of others.</description>
    </item>
    
    <item>
      <title>Using Emacs 62 Magit Forge</title>
      <link>https://cestlaz.github.io/post/using-emacs-62-magit-forge/</link>
      <pubDate>Tue, 19 Nov 2019 12:25:58 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/using-emacs-62-magit-forge/</guid>
      <description>Ever since I started looking at Magit as a &#34;git dashboard&#34; instead of as a &#34;git interface&#34; it&#39;s been yet another Emacs killer app to me. I just recently started playing with forge which allows Magit to interface and interact with git &#34;forges&#34; like GitHub. This allows you to work on issues and pull requests without ever leaving Emacs.
Here&#39;s a video on how easy it is. The video doesn&#39;t show this but the first time you fire forge up it will prompt you for credentials.</description>
    </item>
    
    <item>
      <title>Using Emacs 61 - org-msg</title>
      <link>https://cestlaz.github.io/post/using-emacs-61-org-msg/</link>
      <pubDate>Sat, 16 Nov 2019 05:00:57 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/using-emacs-61-org-msg/</guid>
      <description>By living in Emacs I get a consistent interface across all sorts of tasks - programming, lesson planning, making presentations, preparing documents, and yes, even email. I&#39;ve been using mu4e as my Emacs email client for a while now. Currently, I&#39;m using Emacs for my work email and Gmail for personal. I&#39;ve been thinking of going whole hog to mu4e and possibly migrating from Gmail to a new email provider for the personal stuff but there are still a few pain points with Emacs email:</description>
    </item>
    
    <item>
      <title>Using Emacs 60 - Restclient</title>
      <link>https://cestlaz.github.io/post/using-emacs-60-restclient/</link>
      <pubDate>Fri, 25 Oct 2019 11:57:57 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/using-emacs-60-restclient/</guid>
      <description>I started to work on a web application the other day. It&#39;s nothing special but if I ever finish it, it will be a pretty complete project. The backend will be a REST API and I&#39;m planning on writing the frontend in Clojurescript.
The problem with developing a web application like this is that you can&#39;t really write the front end until you have enough of the backend to provide data.</description>
    </item>
    
    <item>
      <title>Using Emacs 59 - markdown</title>
      <link>https://cestlaz.github.io/post/using-emacs-59-markdown/</link>
      <pubDate>Fri, 18 Oct 2019 11:57:57 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/using-emacs-59-markdown/</guid>
      <description>Org-mode is my markup of choice. I spend the vast majority of my time working on text files working in org-mode. Since GitHUb started rendering org-mode files in their site I&#39;ve also used org-mode for things like Readme files in my projects. I even force it on my students at times. When I make an assignment, I seed it with an org-mode file that they have to modify - that is - fill in things like their names, group members etc.</description>
    </item>
    
    <item>
      <title>Using Emacs 58 - lsp-mode</title>
      <link>https://cestlaz.github.io/post/using-emacs-58-lsp-mode/</link>
      <pubDate>Mon, 07 Oct 2019 11:57:57 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/using-emacs-58-lsp-mode/</guid>
      <description>I&#39;ve been wanting to check out lsp-mode under Emacs for a while now. LSP stands for Language Protocol Service. The idea is that you have a standard interface between your editor and some language server. If you program in multiple languages and each has an LSP server you end up, in theory, with a simpler configuration and a consistent interface.
This certainly sounds more appealing than how we did it in the old days where you have some ad hoc configuraiton for each language you work in.</description>
    </item>
    
    <item>
      <title>CSTA 2019 - Using GitHub as a CMS</title>
      <link>https://cestlaz.github.io/post/csta-2019-github/</link>
      <pubDate>Wed, 26 Jun 2019 12:09:48 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/csta-2019-github/</guid>
      <description>With ISTE ending, the next big event for CS treachers is the annual CSTA Conference. I first attended two years ago in Baltimore. Last year the conference, in Omaha was bigger and better in every way imaginable. I expect this year to be the best yet.
I don&#39;t go to a lot of conferences so I don&#39;t have much to compare CSTA with but I like the fact that it&#39;s is about half the size of SIGCSE.</description>
    </item>
    
    <item>
      <title>Using Emacs 57 Dired Narrow</title>
      <link>https://cestlaz.github.io/post/using-emacs-57-dired-narrow/</link>
      <pubDate>Sun, 07 Apr 2019 11:57:57 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/using-emacs-57-dired-narrow/</guid>
      <description>One of Emacs power features that I&#39;ve never quite gotten into is dired, the Directory Editor. I&#39;ve already done a video on the package. It&#39;s really cool and I do use it at times but I still haven&#39;t started using it for my day to day.
Well, I just started using a couple of packages that might change this. They&#39;re part of a set of dired addons that you can check out at the dired hacks page.</description>
    </item>
    
    <item>
      <title>Evaluating Java IDES for teaching teachers.</title>
      <link>https://cestlaz.github.io/post/java-ides/</link>
      <pubDate>Fri, 08 Mar 2019 13:29:18 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/java-ides/</guid>
      <description>Since Hunter uses C++ as it&#39;s core language, I haven&#39;t used Java much in the past three years. That&#39;s going to change pretty soon. Once we start offering our CS teacher Certificate and Masters programs I&#39;ll once again start teaching with Java as that&#39;s one of the langauges that we want to prepare our teachers with.
That means deciding on a set of tools and so I&#39;ve been spending time evaluating Java programming environments with an eye on the beginner since not only do the teachers I work with have to be comfortable with the tool but more importantly they will have to be able to support the tool for all of their students.</description>
    </item>
    
    <item>
      <title>How I use Github Classroom</title>
      <link>https://cestlaz.github.io/post/github-classroom/</link>
      <pubDate>Sun, 17 Feb 2019 16:42:48 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/github-classroom/</guid>
      <description>It&#39;s been an amazingly unproductive weekend. Mostly because I&#39;ve been sick with the flu. It sucks but since the rest of the family&#39;s away anway at least I&#39;m not making everyone miserable.
I did manage to stage my next couple of classes and figured that writing this post wouldn&#39;t take too much energy since it&#39;s mostly a video.
Earlier, I talked about using GitHub and TravicCI and this time around I show how I use GitHub classroom to set up, disseminate, and collect assignments.</description>
    </item>
    
    <item>
      <title>GitHub Helps Me Help Students</title>
      <link>https://cestlaz.github.io/post/github-helps-me-help-students/</link>
      <pubDate>Mon, 11 Feb 2019 18:55:22 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/github-helps-me-help-students/</guid>
      <description>Earlier today I was reminded why I love GitHub in support of my classes. One of my students posted a question about our current lab. They posted a synopsis of the problem along with the error message.
Since we&#39;re all working on GitHub the student&#39;s work was already up online Since I started using GitHub Classroom I was able to quickly navigate to the repo. This might have been enough but to really in to the students work I cloned the repo and went into Emacs.</description>
    </item>
    
    <item>
      <title>Github Classroom and Travis CI</title>
      <link>https://cestlaz.github.io/post/github-classroom-travis/</link>
      <pubDate>Sat, 02 Feb 2019 09:44:29 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/github-classroom-travis/</guid>
      <description>I&#39;ve been using GitHub with my classes since GitHub&#39;s early days. Over time I&#39;ve gotten my workflows down. I use a combination of shell scripts - many just written on the fly, GitHub organizations, and some naming conventions and protocols that have served me well.
A few years ago, the GitHub Education team started GitHub Classroom. I looked at it at the time. It was pretty cool but I had my workflow so I didn&#39;t adopt it.</description>
    </item>
    
    <item>
      <title>Using Emacs Episode 56 - Dictionaries</title>
      <link>https://cestlaz.github.io/post/using-emacs-56-dictionaries/</link>
      <pubDate>Mon, 28 Jan 2019 16:58:11 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/using-emacs-56-dictionaries/</guid>
      <description>One of the great things about Emacs is that it&#39;s not just for writing programs. Sure, you can set it up as an IDE for just about every programming language under the sun but that&#39;s just the tip of the iceberg. I use Emacs for just about all my text processing. This includes writing blog posts, reading and writing emails, creating lesson plans and pretty much anything and everything having to do with text.</description>
    </item>
    
    <item>
      <title>Using Emacs Episode 55 - Irony Completions</title>
      <link>https://cestlaz.github.io/post/using-emacs-55-irony-completions/</link>
      <pubDate>Mon, 21 Jan 2019 08:27:41 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/using-emacs-55-irony-completions/</guid>
      <description>Last year I put together a post and video on some basics of Emacs for C++ development. In the video I didn&#39;t quite get completions fully working. I also used ggtags in that video but find myself using dumb-jump more frequently.
Here&#39;s a quick video showing how to set up irony-mode which uses libclang for completions. It&#39;s pretty slick. Now the only thing I think I&#39;m missing is header file completions.</description>
    </item>
    
    <item>
      <title>Using Emacs 54 Org Tables</title>
      <link>https://cestlaz.github.io/post/using-emacs-54-org-tables/</link>
      <pubDate>Mon, 14 Jan 2019 11:34:13 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/using-emacs-54-org-tables/</guid>
      <description>As you know I use Emacs for all sorts of things. In addition to coding, I use it for email, my schedule, note taking, and much much more. As part of my job at Hunter, I read and evaluate some of the Macaulay Honors College applications. I also have to evaluate all the applicants to my CS honors program. I described how I use Org-mode and Emacs to help with that here.</description>
    </item>
    
    <item>
      <title>Using Emacs 53 Emailing Org Agenda</title>
      <link>https://cestlaz.github.io/post/using-emacs-53-emailing-org-agenda/</link>
      <pubDate>Sat, 03 Nov 2018 08:55:23 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/using-emacs-53-emailing-org-agenda/</guid>
      <description>I use both org-mode and Google Calendar for scheduling. I like Google Calendar because: It&#39;s pretty universal so I can issue and accept calendar invites. It works well with my phone and other mobile devices. The rest of my family doesn&#39;t live in Emacs :-(.   I prefer using org-mode beacuse: Emacs I prefer, for the most part, to control my data.  I partially sync the two platforms.</description>
    </item>
    
    <item>
      <title>Using Emacs Episode 52 - Eyebrowse</title>
      <link>https://cestlaz.github.io/post/using-emacs-52-eyebrowse/</link>
      <pubDate>Tue, 30 Oct 2018 14:35:15 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/using-emacs-52-eyebrowse/</guid>
      <description>I was originally going to do a video on how I set things up so that I get an email every morning with my org-mode agenda but that&#39;s going to be something of an ordeal. I have to create a droploet on Digital Ocean, set up SyncThing and a mail server and lots of other things.
I&#39;ll get to that video at some point but in the meantime I saw this thread on the Emacs subreddit.</description>
    </item>
    
    <item>
      <title>Using Emacs 51 - Day to day work with org-mode</title>
      <link>https://cestlaz.github.io/post/using-emacs-51-dtd-org/</link>
      <pubDate>Wed, 24 Oct 2018 17:30:45 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/using-emacs-51-dtd-org/</guid>
      <description>I can&#39;t believe that I haven&#39;t made a video since the beginning of summer!!!
Part of the reason is that I haven&#39;t had any video ideas that have motivated me and the other reason is that the Fall is my busiest season.
In any event, here&#39;s the latest installment.
Take a look at how I use Emacs and more specifically org-mode for my day to day work. Sometimes I use the fancy power tools but to be honest, most of the time, I stick to the basics.</description>
    </item>
    
    <item>
      <title>Using Emacs Series</title>
      <link>https://cestlaz.github.io/stories/emacs/</link>
      <pubDate>Wed, 19 Sep 2018 19:02:09 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/stories/emacs/</guid>
      <description>Link to current configuration: https://github.com/zamansky/using-emacs Introduction Video 1 - Setting up the package manager Video 2 - Intro to Org Mode Video 3 - How to think about Emacs Video 4 - Buffers Video 5 - Windows Video 6 - Search / Swiper Video 7 - Navigation / avy Video 8 - Autocomplete Video 9 - Themes Video 10 - Org init files Video 11 - org-reveal / reveal.js Video 12 - Python, Flycheck, Jedi Video 13 - Python, Yasnippet Video 14 - Thoughts on Using Emacs Video 15 - Macros Video 16 - Undo Tree Video 17 - Small packages Video 18 - narrowing and iedit Video 19 - moving to a live config Video 20 - Yanking Video 21-web-mode Video 22-emacsclient Video 23 - capture 1 Video 24 - capture 2 Video 25 - Tramp Video 26 - Google Calendar and Org Agenda Video 27 - Shell and eshell Video 28 - Rectangles Video 29 - elfeed 1  Video 30 - elfeed 2 - Hydras  Video 31 - elfeed 3 - macros Video 32 - C++ Video 33 - Projectile Dumb-jump Video 34 - ibuffer and emmet Video 35 - blogging Video 36 - A Touch of Elisp Video 37 - Treemacs file browser Video 38 - dired Video 39 - mu4e Video 40 - Atomic chrome Video 41 - Pandoc Video 42 - Git Gutter and Timemachine Video 43 - Music Video 44 - pdf Video 45 - Company or Autocomplete Video 46 - auto yasnippets Video 47 - Magit Video 48 - silversearcher Video 49 - mu4e conversation Video 50 - presentations Video 51 - Day to day with org-mode Video 52 - eyebrowse Video 53 - Emailing org-agenda Video 54 - Org Tables Video 55 - Irony Completions Video 56 - Dictionaries Video 57 - Dired Narrow Video 58 - lsp-mode Video 59 - markdown Video 60 - restclient Video 61 - org-msg Video 62 - Magit Forge Video 63 - ClojureScript Video 64 - Notmuch Video 65 - Live Python Video 66 - Eshell - Elisp Video 67 - Emacs vs Vi(m) Video 68 - Tramp and org-publish Video 69 - Floobits Video 70 - org-protocol Video 70 - openwith </description>
    </item>
    
    <item>
      <title>Using Emacs Episode 50 - presentations</title>
      <link>https://cestlaz.github.io/posts/using-emacs-50-presentations/</link>
      <pubDate>Sat, 30 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/using-emacs-50-presentations/</guid>
      <description>Next weekend I&#39;ll be attending the Computer Science Teachers Association&#39;s annual conference. It&#39;s probably the biggest conference focussed on K12 Computer Science education. This year, in addition to attending, I&#39;ll be giving a talk on preservice and inservice CS teacher preparation programs. I&#39;ll be talking about the new New York State certification requirements along with what we&#39;re rolling out at Hunter College.
This means putting together a slide deck for the session.</description>
    </item>
    
    <item>
      <title>Using Emacs Episode 49 mu4e-conversation</title>
      <link>https://cestlaz.github.io/posts/using-emacs-49-mu4e-conversation/</link>
      <pubDate>Thu, 21 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/using-emacs-49-mu4e-conversation/</guid>
      <description>I&#39;ve been using Emacs for email for a couple of years now. Not for everything, for now my personal email is still Gmail but work is sent and read through Emacs. I&#39;m currently using mu4e and while it has a few quirks and limitations, I like it very much. You can take a look on how I configure and use it here.
The other day I saw this thread on Emacs about a new package - mu4e-conversation.</description>
    </item>
    
    <item>
      <title>Using Emacs 48 Silversearcher</title>
      <link>https://cestlaz.github.io/posts/using-emacs-48-silversearcher/</link>
      <pubDate>Sun, 22 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/using-emacs-48-silversearcher/</guid>
      <description>A couple of days ago I wrote about on my lab grading workflow. In the post I mentioned that I used Emacs to easily navigate between student folders and files so I can actually look at their work in addition to their programs output and test results.
The key is a combination of dired and ag, Emacs&#39;s interface to the Silver Searcher which is something like a recursive code grep on steroids.</description>
    </item>
    
    <item>
      <title>Using Emacs Episode 47 - Magit</title>
      <link>https://cestlaz.github.io/posts/using-emacs-47-magit/</link>
      <pubDate>Sat, 07 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/using-emacs-47-magit/</guid>
      <description>I&#39;ve been holding off on doing a Magit video for a while. Mostly because I wasn&#39;t using it exclusively and also because there are already a number of good Magit videos and resources out there.
What changed? Along with the new version of Magin, Jonas Bernoulli wrote up a walkthrough of the Magit interface. For whatever reason, it all finally clicked.
In spite of what the documentation says, Magit is not an interface for git.</description>
    </item>
    
    <item>
      <title>Tools and Complexity</title>
      <link>https://cestlaz.github.io/posts/tools-and-complexity/</link>
      <pubDate>Thu, 05 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/tools-and-complexity/</guid>
      <description>Alfred Thompson wrote about CS education tools earlier today. I&#39;ve also been meaning to write on the topic but from a different point of view.
I do my best to keep up with the latest and greatest in the CS world both on the academic side as well as the professional one. That&#39;s not really possible, but I do my best. When I have a small project to work on I&#39;ll some times use it as an excuse to play with some recent technology.</description>
    </item>
    
    <item>
      <title>Testing Part 2</title>
      <link>https://cestlaz.github.io/posts/testing-part2/</link>
      <pubDate>Sun, 18 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/testing-part2/</guid>
      <description>A few weeks ago I wrote about introducing testing in CS classes, specifically using a testing framework. In that post I talked about the plan but now I can talk about the results.
My class interleaves with Hunter&#39;s CSCI 13500 - Software Analysis and Design I class. One day each week, my students have complete a hands on lab focusing on whatever is being covered in the 13500 class. I decided to use one of those labs as a first foray into testing.</description>
    </item>
    
    <item>
      <title>Using Emacs 46 Auto Yasnippets</title>
      <link>https://cestlaz.github.io/posts/using-emacs-46-auto-yasnippets/</link>
      <pubDate>Thu, 15 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/using-emacs-46-auto-yasnippets/</guid>
      <description>The other day I discovered auto-yasnippet, another great package by Oleh Krehel or abo-abo.
It looks like it&#39;s going to be a great way to solve a particular problem that come up now and again.
There are plenty of times when I want to create a number of similar but slightly different blocks of text. The example on the project site is:
count_of_red = get_total(&amp;#34;red&amp;#34;); count_of_blue = get_total(&amp;#34;blue&amp;#34;); count_of_green = get_total(&amp;#34;green&amp;#34;);  You could use multiple cursors, a macro, or other methods to put in the common text but you still have to deal with the parts of each line that are unique, the red, green, and blue.</description>
    </item>
    
    <item>
      <title>Using Emacs 45 - Company or Autocomplete</title>
      <link>https://cestlaz.github.io/posts/using-emacs-45-company/</link>
      <pubDate>Sun, 11 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/using-emacs-45-company/</guid>
      <description>This is a good time to be an Emacs user. In addition to all of the great packages and tools being developed there seem to be more people regularly blogging and making videos about Emacs than ever before.
Planet Emacsen aggregates a ton of Emcas blogs and Emacs Legend Sacha Chua posts what&#39;s going on in emacs every week on her blog.
on the video front, uncle dave has recently joined the ranks of emacs video producers.</description>
    </item>
    
    <item>
      <title>Using Emacs 44 - An org-mode workflow for application processing</title>
      <link>https://cestlaz.github.io/posts/using-emacs-44-pdf/</link>
      <pubDate>Sat, 03 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/using-emacs-44-pdf/</guid>
      <description>One of my titles at Hunter College is Director of the Daedalus CS Honors program. It&#39;s something like a Hunter specific, CS specific version of the CUNY Macaulay Honors program.
Hunter gives all its students the ability to get a great computer science education at a fraction of the cost of a private institution and if you&#39;re a Daedalus scholar you also get a scholarship, a laptop, special classes (with me :-) ), activities and more.</description>
    </item>
    
    <item>
      <title>Testing, Testing</title>
      <link>https://cestlaz.github.io/posts/testing-testing/</link>
      <pubDate>Mon, 19 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/testing-testing/</guid>
      <description>With CS4All being the buzzword of the day we&#39;re paying a lot of attention to the fact that when we teach a CS class for all students, most of them won&#39;t end up studying CS or going directly into a tech heavy field.
Among those that do study CS though, there is another division. Those studying CS as an academic exercise or to go on to graduate studies and those who are going in to the tech sector.</description>
    </item>
    
    <item>
      <title>Using Emacs 40 - Atomic Chrome</title>
      <link>https://cestlaz.github.io/posts/using-emacs-40-atomic-chrome/</link>
      <pubDate>Wed, 31 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/using-emacs-40-atomic-chrome/</guid>
      <description>Thanks to everyone who voted for topics or commented with suggestions for videos. I&#39;ll try to get to them in the coming months.
Today is just a quick hit on Atomic Chrome - an Emacs package and browser extension that allows you to edit web form inputs with Emacs.
UPDATE I forgot to mention that you can set a shortcut key, at least in chrome rather than clicking on the icon.</description>
    </item>
    
    <item>
      <title>Using Emacs 39 - mu4e</title>
      <link>https://cestlaz.github.io/posts/using-emacs-39-mu4e/</link>
      <pubDate>Sun, 24 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/using-emacs-39-mu4e/</guid>
      <description>I generally use three email accounts. My personal one, work one, and one for my non-profit. For a couple of years, I&#39;ve been using mu4e under Emacs for both my work and non-profit email accounts and gmail for my personal account.
 I&#39;ve had lots of requests for a video on what I do but I&#39;ve been hesitant for two reasons: There are parts of my configuration that are copied from others and I really don&#39;t understand.</description>
    </item>
    
    <item>
      <title>Tools can shape how we think</title>
      <link>https://cestlaz.github.io/posts/advent-2017-4-6/</link>
      <pubDate>Wed, 06 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/advent-2017-4-6/</guid>
      <description>I&#39;ve been having fun with this years Advent of Code competition. So far, I&#39;ve been able to keep up but with I expect that to change in another couple of days since I&#39;ll be traveling for the weekend.
After solving a problem, I like looking over some of the other solutions on the Advent of Code subreddit. Even with similar agorithmic solutions there&#39;s a decent amount of variation in the actual code and solutions in different languages can look radically different.</description>
    </item>
    
    <item>
      <title>Using Emacs 38 - dired</title>
      <link>https://cestlaz.github.io/posts/using-emacs-38-dired/</link>
      <pubDate>Fri, 24 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/using-emacs-38-dired/</guid>
      <description>The 38th installment of Using Emacs is about dired, Emacs&#39; built in mode for navigating and working with directories.
I&#39;m not a dired power user and in fact am just now making a real effort to explore it and work it into my daily workflow and with that in mind, I&#39;d love to hear some configuration and use suggestions from people who use it regularly.
Here&#39;s the configuration I use:</description>
    </item>
    
    <item>
      <title>Using Emacs 37 - Treemacs file browser</title>
      <link>https://cestlaz.github.io/posts/using-emacs-37-treemacs/</link>
      <pubDate>Sun, 24 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/using-emacs-37-treemacs/</guid>
      <description>I&#39;ve been meaning to get back to making Emacs videos but I&#39;ve been having trouble figuring out what to record.
People have asked for Magit but I only use the basics and I think there are already some great videos on it out there. I&#39;d also like to get more comfortable with DIRED mode and then do a video on it but I&#39;m not there yet. I&#39;ve also been looking into packages that manage workspaces like Eyebrowse and Persp-mode but neither are really doing it for my workflow.</description>
    </item>
    
    <item>
      <title>New Term New Tool - Thonny, a Python IDE</title>
      <link>https://cestlaz.github.io/posts/new-tool-thonny/</link>
      <pubDate>Thu, 21 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/new-tool-thonny/</guid>
      <description>Last year I wrote about repl.it, an online IDE that supports multiple languages. At the time it had some rudimentary classroom support and since I started using it, repl.it has become better and better. I used it last year with my class because I had to start the year in a lab where I couldn&#39;t easily install my own software. I&#39;ll continue to use repl.it - mostly for it&#39;s ability to schedule publish and manage assignments but when possible, I like having my students work locally.</description>
    </item>
    
    <item>
      <title>Using Emacs 36 - A Touch of Elisp</title>
      <link>https://cestlaz.github.io/posts/using-emacs-36-touch-of-elisp/</link>
      <pubDate>Sun, 30 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/using-emacs-36-touch-of-elisp/</guid>
      <description>I&#39;ve been working on a vue.js project this summer. During the school year I really can&#39;t dive into code so it&#39;s been fun.
I&#39;ve already showed you most of the Emacs tools I use for development. Projectile, Ace-Window, IBuffer, Swiper / Ivy and all. One thing I couldn&#39;t easily do was arrange windows the way I wanted.
I&#39;ve been setting up Emacs with one large window and a couple of smaller ones:</description>
    </item>
    
    <item>
      <title>Using Emacs 35 - Blogging</title>
      <link>https://cestlaz.github.io/posts/using-emacs-35-blogging/</link>
      <pubDate>Tue, 27 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/using-emacs-35-blogging/</guid>
      <description>Very little new Emacs in today&#39;s episode of Using Emacs. The video shows my old blogging workflow and what I&#39;m playing with now.
The only new Emacs covered is the prodigy package which lets you run services under Emacs. I use it to run Nikola&#39;s development server but I think prodigy will also be useful when I start writing that knitting application I promised my wife.
When I started this blog, I used Jekyll.</description>
    </item>
    
    <item>
      <title>Using Emacs - 34 - ibuffer and emmet</title>
      <link>https://cestlaz.github.io/posts/using-emacs-34-ibuffer-emmet/</link>
      <pubDate>Thu, 15 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/using-emacs-34-ibuffer-emmet/</guid>
      <description>A couple of quick, unrelated packages today.
first up, ibuffer. If you keep Emacs open all the time, you&#39;ll start to accumulate buffers. Last time, I talked about using projectile and how that can help when navigating between buffers. IBuffer is another one.
Out of the box, C-x C-b is bound to the Emacs list-buffers** command. It brings up a buffer with all the buffers listed inside it. You can navigate that buffer and hit enter on a particular buffer to go to it.</description>
    </item>
    
    <item>
      <title>Python - Editor or IDE</title>
      <link>https://cestlaz.github.io/posts/python-editors/</link>
      <pubDate>Thu, 25 May 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/python-editors/</guid>
      <description>Earlier today I read Garth Flint&#39;s latest post on choosing a Python environment for his classes. While our classes and populations are different it looks like Garth and I share a lot of thoughts on the subject.
I started to write a comment to leave on Garth&#39;s blog but since it was getting a little long I thought I&#39;d write it up as a post.
The question of development environment can be an important one and can make a big difference.</description>
    </item>
    
    <item>
      <title>Using Emacs - 33 - projectile, dumb-jump</title>
      <link>https://cestlaz.github.io/posts/using-emacs-33-projectile-jump/</link>
      <pubDate>Fri, 28 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/using-emacs-33-projectile-jump/</guid>
      <description>If you keep Emacs open all the time you end up accumulating lots of buffers. That can make navigating a little bit awkward.
Projectile is a really nice package that makes navigating in and between projects much easier. I also have counsel-projectile installed.
Here&#39;s my configuration:
;; projectile (use-package projectile :ensure t :config (projectile-global-mode) (setq projectile-completion-system &amp;#39;ivy)) (use-package counsel-projectile :ensure t :config (counsel-projectile-on))  Projectile considers a sub-directory tree to be a project if it&#39;s a git or other source control repo, if it&#39;s created by tool like lein, maven, or sbt, or if you put an empty file named **.</description>
    </item>
    
    <item>
      <title>GitHub as a tool for education</title>
      <link>https://cestlaz.github.io/posts/sigcse-2017-github-4/</link>
      <pubDate>Tue, 11 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/sigcse-2017-github-4/</guid>
      <description>When I started using git and GitHub with my students it was a natural progression having started with started with CVS and then, as technology changed moving through Subversion and then Mercurial. It was all about using sensible professional software development techniques while making it easier for students to submit work and for me to evaluate their submissions.
Over time, I found that git and GitHub in fact provided some extra support for educators right out of the box.</description>
    </item>
    
    <item>
      <title>SIGCSE 2017 - a path to github part 3</title>
      <link>https://cestlaz.github.io/posts/sigcse-2017-github-3/</link>
      <pubDate>Thu, 30 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/sigcse-2017-github-3/</guid>
      <description>I wanted to write this up earlier but, as so frequently happens all my dormant work projects decided it was time to rise up and demand instant attention.
When we left off, we had students pulling code and submitting homework via github.
Form here, it&#39;s an easy step to have them working on a small project in their own repo. In fact, sometimes, I&#39;ll jump right to a two person project where one person creates the repo and invites the other (and me) as a collaborator.</description>
    </item>
    
    <item>
      <title>SIGCSE 2017 - a path to github part 2</title>
      <link>https://cestlaz.github.io/posts/sigcse-2017-github-2/</link>
      <pubDate>Sun, 19 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/sigcse-2017-github-2/</guid>
      <description>Note: Just for some quick context. The process I started to describe in the last post and continue here chronicles what I did at Stuy with high schoolers. Now that I&#39;m at Hunter college, I&#39;m adapting the process but the overarching themes remain the same.
Post starts here: Now that your students have been pulling the classcode repo regularly it&#39;s time to move to the next step - adding and pushing files to a repo.</description>
    </item>
    
    <item>
      <title>SIGCSE 2017 - a path to github part 1</title>
      <link>https://cestlaz.github.io/posts/sigcse-2017-github-1/</link>
      <pubDate>Thu, 16 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/sigcse-2017-github-1/</guid>
      <description>Both at and prior to SIGCSE 2017, I promised to write up the steps I take to introduce and use revision control systems in my classes.
This series is not meant to be a git or GitHub tutorial. There are plenty of those already (two of which I&#39;ve linked to below). This is about the process I use with my students to get them up to speed.
As with any new tool, there will be some resistance but once git saves them once, they get religion.</description>
    </item>
    
    <item>
      <title>Using Emacs - 32 - C&#43;&#43;</title>
      <link>https://cestlaz.github.io/posts/using-emacs-32-cpp/</link>
      <pubDate>Sat, 04 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/using-emacs-32-cpp/</guid>
      <description>This video is specifically for my students or any students out there who are starting with C++ and emacs. The videos also longer than usual, coming in at a little over 20 minutes.
The big difference is instead of building on my existing config, the code at the bottom is a complete standalone configuration. It&#39;s all pulled from the main config with one additional package.
By taking the code at the bottom and putting in into a file named init.</description>
    </item>
    
    <item>
      <title>Using Emacs - 31 - elfeed part 3 - macros</title>
      <link>https://cestlaz.github.io/posts/using-emacs-31-elfeed-3/</link>
      <pubDate>Wed, 01 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/using-emacs-31-elfeed-3/</guid>
      <description>In part 2 I talked about how I used Hyrdas to quickly navigate through elfeed tags. It was a nice step up but the fact that I still had to manually edit my configuration code for every new tag to update the hydra was a problem.
Basically, I had to somehow or other, take a list of all the active tags and with it build a defhydra command that will then make my Hydra.</description>
    </item>
    
    <item>
      <title>Using Emacs - 30 - elfeed part 2 - Hydras</title>
      <link>https://cestlaz.github.io/posts/using-emacs-30-elfeed-2/</link>
      <pubDate>Sat, 25 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/using-emacs-30-elfeed-2/</guid>
      <description>In part 1, I talked about elfeed, a really awesome feed reader for emacs. Generally, I&#39;m really liking it but there&#39;s been one problem - not being able to navigate quickly between groups of feeds with a keystroke or two.
It&#39;s emacs so there has to be a solution.
Enter hydra - a terrific emacs package from the same guy who brought us swiper, another one of my favorite emacs packages.</description>
    </item>
    
    <item>
      <title>Using Emacs - 29 -elfeed part 1</title>
      <link>https://cestlaz.github.io/posts/using-emacs-29-elfeed/</link>
      <pubDate>Wed, 22 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/using-emacs-29-elfeed/</guid>
      <description>Since the demise of Google Reader, I&#39;ve been using Feedly to read my streams. Feedly&#39;s a nice product and it&#39;s been working well for me for quite some time.
A few days ago, I decided to see what emacs had to offer on the feed reader front. One solution was Gnus but then I&#39;ve never been able to get my head around Gnus. Another was elfeed.
I thought I&#39;d give elfeed a go.</description>
    </item>
    
    <item>
      <title>Using Emacs - 28 -Rectangles</title>
      <link>https://cestlaz.github.io/posts/using-emacs-28-rectangles/</link>
      <pubDate>Thu, 09 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/using-emacs-28-rectangles/</guid>
      <description>One of my favorite but little used emacs features is rectangular editing. It&#39;s little used because I don&#39;t need it all that often. It&#39;s one of my favorites because when I do need it, it&#39;s just so amazingly useful.
The idea is you can mark a rectangle of text, cut it and later paste it. This means that if you have three columns of text:
a b c d e f g h i j k l  You can easily mark the middle column (b e h k) or even just the b e and h, cut it and paste it elsewhere as a rectangle.</description>
    </item>
    
    <item>
      <title>Using Emacs - 27 - shell and eshell</title>
      <link>https://cestlaz.github.io/posts/using-emacs-27-shell/</link>
      <pubDate>Fri, 27 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/using-emacs-27-shell/</guid>
      <description>While I use emacs for all all sorts of things, one of the things I haven&#39;t done much is run shells from within emacs. I&#39;m not sure why. I&#39;m a command line wonk and adding command line goodness and emacs together seems like a natural. Maybe it&#39;s because back in the day I spent a lot of time on MS-DOS systems. You could get a reasonable Unixy facsimile using tools like the MKS toolkit and I like so many other young computer scientists wrote our own small shells when we learned C so I used that insted of command.</description>
    </item>
    
    <item>
      <title>Using Emacs - 26 - Google Calendar, Org Agenda</title>
      <link>https://cestlaz.github.io/posts/using-emacs-26-gcal/</link>
      <pubDate>Thu, 05 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/using-emacs-26-gcal/</guid>
      <description>A while ago I did a couple of videos on how I use org-capture (part 1, part 2). I didn&#39;t get into a big part of org-capture - how I use org-mode and capture to manage my calendar and todo lists.
I was waiting to see if I liked my current setup - using org-gcal to sync with my Google Calendar for appointments while using my main org file for my todo list.</description>
    </item>
    
    <item>
      <title>Using Emacs - 25 - Tramp</title>
      <link>https://cestlaz.github.io/posts/using-emacs-25-tramp/</link>
      <pubDate>Mon, 26 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/using-emacs-25-tramp/</guid>
      <description>Today&#39;s video talks about using emacs Tramp mode.
Tramp mode allows you to edit remote files using your local emacs. I usually do this over ssh.
To edit a file on a machine www.cstuy.org I would first **find-file** using C-c C-f and then for the file name to open:
/ssh:www.cstuy.org:/home/zamansky/sc/testfile  this would open the file testfile in the absolute directory **/home/zamansky/sc**. If my username on the remote machine is different:</description>
    </item>
    
    <item>
      <title>Using Emacs - 24 - Org Capture 2</title>
      <link>https://cestlaz.github.io/posts/using-emacs-24-capture-2/</link>
      <pubDate>Sat, 03 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/using-emacs-24-capture-2/</guid>
      <description>Not much in today&#39;s actual post. The video is a continuation of the last one on org-capture.
The video goes over how I set things up to pop up a new frame to do a capture even if emacs isn&#39;t on screen (as long as it&#39;s running) by hitting F1. I would have preferred to bind to C-c c - the same as within emacs but I havn&#39;t figured out how to do that in Ubuntu or Mint Linux yet.</description>
    </item>
    
    <item>
      <title>Using Emacs - 23 - Org Capture 1</title>
      <link>https://cestlaz.github.io/posts/using-emacs-23-capture-1/</link>
      <pubDate>Tue, 29 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/using-emacs-23-capture-1/</guid>
      <description>Org mode has an amazing feature - org-capture. I only started using it recently but it&#39;s really awesome.
What took me so long?
Probably that the manual seemed a little intimidating.
It really isn&#39;t hard, though. Combined with what I&#39;ll go over in the next video and post (and a future one for Google calendar sync) it&#39;s what I use for:
 recording blog ideas managing bookmarks taking short Notes managing my calendar.</description>
    </item>
    
    <item>
      <title>Using Emacs - 21 - web mode</title>
      <link>https://cestlaz.github.io/posts/using-emacs-21-web-mode/</link>
      <pubDate>Wed, 16 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/using-emacs-21-web-mode/</guid>
      <description>Quick post today.
The video goes over web-mode - my preferred weapon for html and all the goodies you embed in an html file.
It&#39;s multi-modal so it acts sensibly regardless of wether you&#39;re editing html, css, javascript or even templates in a single file.
Note: In the video, web-mode wasn&#39;t automatically inserting quotes. I had to set hte following variable to fix this:
(setq web-mode-enable-auto-quoting t)  Giving the final configuration I&#39;m currently using:</description>
    </item>
    
    <item>
      <title>Using Emacs - 22 - emacsclient</title>
      <link>https://cestlaz.github.io/posts/using-emacs-22-emacsclient/</link>
      <pubDate>Wed, 16 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/using-emacs-22-emacsclient/</guid>
      <description>Another quick hit today.
This video is really setting the stage for hte next two, where I talk about org-mode capturing.
Today, we&#39;re demoing the use of the emacs server and client.
Back in the old days, emacs took a LOOONG time to load. A complex conviguration could take on the order of 10 to 20 seconds. This resulted in people loading emacs at the start of the day and leaving it up forever.</description>
    </item>
    
    <item>
      <title>Using Emacs - 20 - yanking</title>
      <link>https://cestlaz.github.io/posts/using-emacs-20-yanking/</link>
      <pubDate>Sun, 13 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/using-emacs-20-yanking/</guid>
      <description>Today&#39;s video is a bit of a follow up on the last one as well as a few miscillaneous configuration.
We got some comments on alternate ways to load a file if it exists - it&#39;s always cool to see how different people end up doing similar things.
We then talk about three little configurations. Two I found out about reading Jon Sander&#39;s (jcs) blog Irreal. Jon&#39;s blog is a terrific source of emacs info - if you don&#39;t subscribe, you should.</description>
    </item>
    
    <item>
      <title>Using Emacs - 19 - moving to a live config</title>
      <link>https://cestlaz.github.io/posts/using-emacs-19-live/</link>
      <pubDate>Thu, 10 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/using-emacs-19-live/</guid>
      <description>Some of the videos I want to make are going to be much easier to do if I&#39;m working in my own account where my whole file tree is available.
It&#39;s also a little annoying changing between my full emacs config and the one I&#39;m developing here.
So, I decided to move to this config for my real config and as I make more videos move parts of my old configuration over to this new one.</description>
    </item>
    
    <item>
      <title>Flask - deploying to DigitalOcean</title>
      <link>https://cestlaz.github.io/posts/digitaloceanflask/</link>
      <pubDate>Tue, 08 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/digitaloceanflask/</guid>
      <description>This post points to the next three videos in the Flask series.
The first covers setting up a droplet (virtual server) on DigitalOcean. The second, deploying a flask application using Green Unicorn, and the third, using sshfs to remotely mount your files from your DO box to your local machine and how to set up DNS using FreeDNS.
To help you on your way with DigitalOcean, here are links to a few of their tutorials</description>
    </item>
    
    <item>
      <title>Using Emacs - 18 - Narrowing and iedit</title>
      <link>https://cestlaz.github.io/posts/using-emacs-18-narrow/</link>
      <pubDate>Wed, 02 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/using-emacs-18-narrow/</guid>
      <description>I meant to cover these last time but decided not to so as to keep the videos to about 10 minutes each.
First up this time round is iedit - a really cool mode that lets you select all the instances of the marked selection at the same time and edit them all at once. By default it&#39;s bound to C-l.
For example, let&#39;s say you had the following code:</description>
    </item>
    
    <item>
      <title>Using Emacs - 17 - misc small packages</title>
      <link>https://cestlaz.github.io/posts/using-emacs-17-misc/</link>
      <pubDate>Fri, 28 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/using-emacs-17-misc/</guid>
      <description>I&#39;m working on getting enough of my real configuration into this series so that I can dump my current one and use this one all them time and grow it back up an episode at a time.
I think we&#39;re almost there.
This time, we&#39;re looking at a few small packages that I use all the time.
Highlight line Mode (global-hl-line-mode t)  this turns on highlight line mode. It makes it easy to see the line the cursor&#39;s on.</description>
    </item>
    
    <item>
      <title>Setting up Linux for Flask Web Development</title>
      <link>https://cestlaz.github.io/posts/flask-setup-virtualenv/</link>
      <pubDate>Fri, 14 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/flask-setup-virtualenv/</guid>
      <description>Those laptops that my Hunter students were supposed to get have finally arrived. We&#39;re distributing them on Monday. Each student will have a Dell laptop running Ubuntu 16.04 for as long as they&#39;re in the program.
This means we can finally start using the web as a way of displaying and sharing our projects.
For this type of web development, I&#39;m a big fan of using Flask. Flask is a Python microframework.</description>
    </item>
    
    <item>
      <title>Using Emacs - 16 - Undo Tree</title>
      <link>https://cestlaz.github.io/posts/using-emacs-16-undo-tree/</link>
      <pubDate>Sun, 09 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/using-emacs-16-undo-tree/</guid>
      <description>If you use emacs, you should keep an eye on Jon Snader&#39;s blog, irreal.org. A few days he posted on Undo Tree - a package that extends Emacs&#39;s built in undo functionality.
Basic emacs has undo, bound to C-/ or C-_ but that&#39;s about it. Undo tree, which you can set up with:
(use-package undo-tree :ensure t :init (global-undo-tree-mode))  adds two key features. First is redo, which you get by adding the shift key to the undo keychords.</description>
    </item>
    
    <item>
      <title>User friendly - I do not think that means what you think it means</title>
      <link>https://cestlaz.github.io/posts/user-friendly/</link>
      <pubDate>Wed, 28 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/user-friendly/</guid>
      <description>Saw this post the other day: Emacs is hurting Clojure and this response: Is Emacs Really HJard to Learn / Use.
This called to mind those countless discussions about tools being user friendly. I&#39;m frequently on the unpopular side of these discussions. Linux vs Windows vs Mac, Shell vs GUI, Emacs vs fill-in-the-blank-editor-or-IDE and on and on.
Don&#39;t use Emacs, it isn&#39;t user friendly. Don&#39;t use Linux, it isn&#39;t user friendly.</description>
    </item>
    
    <item>
      <title>New Term, New Tool - repl.it</title>
      <link>https://cestlaz.github.io/posts/new-term-new-tool-repl.it/</link>
      <pubDate>Fri, 02 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/new-term-new-tool-repl.it/</guid>
      <description>We&#39;re now a week in to my first class at Hunter. It&#39;s a little early for me to really compare and contrast the high school to college experience but I thought I&#39;d share some thoughts on a tool that I&#39;ve recently started to play with.
My students were all supposed to be issued laptops at the beginning of the semester. The plan was to have them learn Linux, the command line, and a little DevOps along the way.</description>
    </item>
    
    <item>
      <title>Using Emacs - 15 - Macros</title>
      <link>https://cestlaz.github.io/posts/using-emacs-15-macros/</link>
      <pubDate>Fri, 02 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/using-emacs-15-macros/</guid>
      <description>I originally planned on do some videos on C++ development but I&#39;m just not feeling it. Probably because I&#39;m excited to be working with my new class and we&#39;re working in Python. We&#39;re not going to be using C+++ for a few months so I&#39;ll get to those videos a little later.
Today, I want to cover what I consider a leatherman or multi-tool for Emacs. Something that isn&#39;t perfect for any particular job but can get almost any job done: Macros.</description>
    </item>
    
    <item>
      <title>Using Emacs - 14 - Thoughts</title>
      <link>https://cestlaz.github.io/posts/using-emacs-14-thoughts/</link>
      <pubDate>Wed, 17 Aug 2016 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/using-emacs-14-thoughts/</guid>
      <description>Sorry for the incosistancy of the posts. I hope to get to that one video a week soon but I&#39;ve still got a hectic couple of weeks ahead.
No new material this week, or at least very little. This week, I talk about some thoughts on the &#34;Using Emacs&#34; series.
In the video I talk about Sacha Chua and her work as a leader in the Emacs community. Check out her stuff here: http://sachachua.</description>
    </item>
    
    <item>
      <title>Using Emacs - 13 - Yasnippet</title>
      <link>https://cestlaz.github.io/posts/using-emacs-13-yasnippet/</link>
      <pubDate>Thu, 04 Aug 2016 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/using-emacs-13-yasnippet/</guid>
      <description>It turns out that Elpy, a popular emacs package for python development is much easier to set up than I remember. It turns out all you need is:
(use-package elpy :ensure t :config (elpy-enable))  The video shows how to install and a bit of use. I don&#39;t think it&#39;s a package I&#39;m going to use much since I use other tools to do similar things but it&#39;s worth checking out.</description>
    </item>
    
    <item>
      <title>Using Emacs - 12 - Flycheck, Jedi, Python</title>
      <link>https://cestlaz.github.io/posts/using-emacs-12-python/</link>
      <pubDate>Wed, 27 Jul 2016 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/using-emacs-12-python/</guid>
      <description>This week, we&#39;re going to look at my setup for Python programming.
I&#39;m an educator, not a professional developer so I&#39;m not working in huge code bases with dozens or more files at a time. I do periodically work in medium size code bases and will talk about cross file navigation and project management later on. There are also more powerful emacs Python packages. One being elpy. Elpy looks pretty cool but for me, it&#39;s overkill.</description>
    </item>
    
    <item>
      <title>Using Emacs - 11 - Reveal.js presentations</title>
      <link>https://cestlaz.github.io/posts/using-emacs-11-reveal/</link>
      <pubDate>Tue, 19 Jul 2016 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/using-emacs-11-reveal/</guid>
      <description>Happy to be back after a couple of weeks.
My wife and son spent some time in San Francisco, Mountain View, and Seattle. The main reason was to see our daughter who&#39;s interning out there for the summer but it was also a great opportunity to catch up with over 100 former students. If you&#39;re interested in seeing more, I wrote a bit about it here.
I was originally going to start talking about Python development but then saw this post on reddit about reveal.</description>
    </item>
    
    <item>
      <title>Using Emacs - 10 - org init files</title>
      <link>https://cestlaz.github.io/posts/using-emacs-10-org-init/</link>
      <pubDate>Fri, 01 Jul 2016 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/using-emacs-10-org-init/</guid>
      <description>I&#39;ll be traveling for the next couple of weeks so I probably won&#39;t have time for another video until mid to late July. I&#39;ll probably write a post about this series and do some regular blogging over that time but probably no new videos for a couple of weeks.
 Also, a couple of notes about the series: Instead of making a separate git branch for each episode, I&#39;m just adding on to the master branch on GitHub.</description>
    </item>
    
    <item>
      <title>Using Emacs - 9 - Themes</title>
      <link>https://cestlaz.github.io/posts/using-emacs-9-themes/</link>
      <pubDate>Tue, 28 Jun 2016 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/using-emacs-9-themes/</guid>
      <description>Now that we have a nice basic configuration, let&#39;s make Emacs look a little nicer.
Like most editors, Emacs can be extensively themed.
As shown in the video, you can quickly see the built in themes using the customize-themes command.
You can load one of these themes by using the load-theme command interactively or, more likely by putting:
(load-theme &amp;#39;leuven t)  in your init.el. The above code loads the built in leuven theme.</description>
    </item>
    
    <item>
      <title>Using Emacs - 8 - Autocomplete</title>
      <link>https://cestlaz.github.io/posts/using-emacs-8-autocomplete/</link>
      <pubDate>Sun, 26 Jun 2016 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/using-emacs-8-autocomplete/</guid>
      <description>Out of the box, Emacs supports various types of completion.
Tab completion for filenames and commands basically work right out of the box and Emacs has built in modes like Abbrev, Hippie Expand, and Dabbrev provide a manner of completion for in buffer text.
I briefly show Dabbrev (Dynamic Abbrevs) in the video and if you&#39;re interested in the others, follow the links.
We saw ow the built in Ido mode and third party packages like Ivy, which I prefer, and Helm make for better completions on functions, filenames, and the like and Emacs also has third party packages for in buffer completion.</description>
    </item>
    
    <item>
      <title>Using Emacs - 7- Navigation with Avy</title>
      <link>https://cestlaz.github.io/posts/using-emacs-7-avy/</link>
      <pubDate>Fri, 24 Jun 2016 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/using-emacs-7-avy/</guid>
      <description>Here&#39;s a really cool navigation method that I&#39;ve been meaning to use more. Avy is a replacement for ace-jump mode which is an implementation of easymotion, a vim plugin.
It&#39;s pretty cool and lets you quickly navigate to any spot on the screen.
After triggering avy, or more specifically the **avy-goto-char** function, emacs prompts you for a single character. When you type it, all instances of the character that start out words change to a highlighted letter.</description>
    </item>
    
    <item>
      <title>Better Comments or tooling as a time sink</title>
      <link>https://cestlaz.github.io/posts/better-comments/</link>
      <pubDate>Wed, 22 Jun 2016 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/better-comments/</guid>
      <description>The other day my friend and fellow CS Ed Blogger Alfred Thompson wrote about Better Comments, an extension for visual studio that displays comments that are marked up with special characters in order to highlight them. Here&#39;s a screenshot:
https://raw.githubusercontent.com/omsharp/BetterComments/master/screenshots/ClassificationC.png
So, the first thing I though was &#34;I bet emacs could do that pretty easily&#34; and down the rabbit hole I went.
I had to figure out something about how emacs themes and font-locking (emacs for syntax highlighting) works and of course spent far too much time learning about Emacs, my favored tool, rather than getting actual work done, but I came up with this:</description>
    </item>
    
    <item>
      <title>Using Emacs - 6 - Searching a Swiper</title>
      <link>https://cestlaz.github.io/posts/using-emacs-6-swiper/</link>
      <pubDate>Mon, 20 Jun 2016 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/using-emacs-6-swiper/</guid>
      <description>This video is all about using incremental search to navigate through your emacs buffers.

You can use the default incremental searchb, bound to C-s for isearch-forward C-r to search backwards (reverse).
They work really well as is but I prefer using Swiper. The video demos both and the Swiper home page has loads of details.
Part of the Swiper package includes ivy and counsel which I use instead of ido.</description>
    </item>
    
    <item>
      <title>Robots platforms and practicalities</title>
      <link>https://cestlaz.github.io/posts/robot-survey/</link>
      <pubDate>Wed, 15 Jun 2016 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/robot-survey/</guid>
      <description>I received an email from a friend the other day asking me about a particular robotics platform she recently saw.
I&#39;ve played with robotics on and off over the years ranging from building them from (not using) scratch using Atmel chips and programming them in assembly to using Arduino based platforms to using pre-built robot platforms. They&#39;re really cool and since they interact with the real world you can do all sorts of interesting and motivational things with students.</description>
    </item>
    
    <item>
      <title>Using Emacs - 5 - Windows</title>
      <link>https://cestlaz.github.io/posts/using-emacs-5-windows/</link>
      <pubDate>Tue, 14 Jun 2016 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/using-emacs-5-windows/</guid>
      <description>Sorry for the delay in getting this next video / post up. I spent the last part of last week at The Personal Democracy Forum 2016 which is really an exceptional conference.
I posted a bit about it in my last post and plan to write some more on it, but for now, more Emacs.

This video concerns using windows. By using buffers and windows and the basics you got from the tutorial, you shouldn&#39;t have to ever leave emacs.</description>
    </item>
    
    <item>
      <title>Using Emacs - 3 - How to think about Emacs</title>
      <link>https://cestlaz.github.io/posts/using-emacs-3-elisp/</link>
      <pubDate>Mon, 23 May 2016 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/using-emacs-3-elisp/</guid>
      <description>Many people think of Emacs as an editor. I like to think of it as an Elisp interpreter where you live code documents.
In some ways, it&#39;s like those new fangled interactive programming environments where you type in code and the updates are reflected instantly.
In this video, I try to explain the way I think about Emacs and why it&#39;s so cool.
The only change we made to our configuration was adding:</description>
    </item>
    
    <item>
      <title>Using Emacs - 4 - Buffers</title>
      <link>https://cestlaz.github.io/posts/using-emacs-4-buffers/</link>
      <pubDate>Mon, 23 May 2016 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/using-emacs-4-buffers/</guid>
      <description>Now that we&#39;re past the intro material, we&#39;ll start looking at emacs features one at a time. This will let you focus on using the one feature we&#39;re covering, fit it into your work flow, and really get comfortable with it.
This time we&#39;ll dive into using Emacs effectively with buffers.
Watch the video and then make a real effort to use buffers over the next few emacs sessions. Before you know it, they&#39;ll be a natural part of your work flow.</description>
    </item>
    
    <item>
      <title>Using Emacs - Intro to Org Mode</title>
      <link>https://cestlaz.github.io/posts/using-emacs-2-org/</link>
      <pubDate>Mon, 23 May 2016 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/using-emacs-2-org/</guid>
      <description>This video is a brief introduction to org-mode, a mode I use for all sorts of things.
We&#39;ll dive into org-mode later in the series. Right now I just want you to see the basics since we&#39;ll be using org-mode for any notes that are written up during this series.
Actually, all my blog posts are written in org-mode.
Here are the important lines to add to your Emacs init.</description>
    </item>
    
    <item>
      <title>Using Emacs - Introduction</title>
      <link>https://cestlaz.github.io/posts/using-emacs-introduction/</link>
      <pubDate>Mon, 23 May 2016 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/using-emacs-introduction/</guid>
      <description>I&#39;m sure I&#39;ve mentioned that I&#39;ve been an Emacs wonk for decades. Since the mid-80&#39;s in fact. I&#39;ve spent time using other editors, word processors, and development tools but always find my way back.
I recommend that budding computer science students develop a good tool set and encourage them to explore Emacs but while it&#39;s pretty easy to load Emacs and find your way around, particularly if you use the mouse and menus there isn&#39;t a clear path to take you from beginner to using it as an efficient tool let alone customizing it.</description>
    </item>
    
    <item>
      <title>Using Emacs - Setting up the Package Manager</title>
      <link>https://cestlaz.github.io/posts/using-emacs-1-setup/</link>
      <pubDate>Mon, 23 May 2016 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/using-emacs-1-setup/</guid>
      <description>This video will step you through setting up Emacs to use MELPA for packages.

We configured emacs by creating a folder named .emacs.d and creating a file within it named init.el.
Here&#39;s the contents of that file:
(setq inhibit-startup-message t) (require &amp;#39;package)(setq package-enable-at-startup nil)(add-to-list &amp;#39;package-archives &amp;#39;(&amp;#34;melpa&amp;#34; . &amp;#34;https://melpa.org/packages/&amp;#34;))(package-initialize);; Bootstrap `use-package&amp;#39; (unless (package-installed-p &amp;#39;use-package)(package-refresh-contents)(package-install &amp;#39;use-package)) (use-package try :ensure t) (use-package which-key :ensure t :config (which-key-mode))   The last two inituse-package clauses install two helpful packages: *try*: let&#39;s you try packages without installing them.</description>
    </item>
    
    <item>
      <title>Collaborative Coding or Cheating</title>
      <link>https://cestlaz.github.io/posts/collaborative-coding-or-cheating/</link>
      <pubDate>Fri, 20 May 2016 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/collaborative-coding-or-cheating/</guid>
      <description>I haven&#39;t been teaching this past semester. That&#39;s why I haven&#39;t been writing much about lessons. I miss working with students but that will resume in the fall and this semester has allowed me to get a jump on new projects.
It&#39;s also allowed me to look at some student issues from a bit of a distance.
One issue that keeps coming up is cheating.
Some of it, classroom cheating. my friend Ria recently asked a question on Facebook about it.</description>
    </item>
    
    <item>
      <title>Shell short - tagging old posts in Nikola</title>
      <link>https://cestlaz.github.io/posts/shell-short-tagging/</link>
      <pubDate>Sun, 15 May 2016 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/shell-short-tagging/</guid>
      <description>Quick post to add to the recent command line fu I&#39;ve been writing about.
Douglas Peterson had another Whatever happened to post. This time on Logo. I wanted to reply, talk about NetLogo and link to some of my old NetLogo posts to help show how cool it is.
Nikola supports tags, makes a nice tags page and for each tag, a nice page of all the links.
Nikola has a plugin tags which lets you manage tags from the command line.</description>
    </item>
    
    <item>
      <title>BASH scripting?</title>
      <link>https://cestlaz.github.io/posts/bash-scripting/</link>
      <pubDate>Thu, 12 May 2016 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/bash-scripting/</guid>
      <description>Over in the Facebook AP Computer Science Teachers group someone asked for thoughts on covering BASH scripting as a post AP topic.
A number of us made suggestions. I linked to this old blog post.
One group member said she asked around for similar suggestions and the response she got was &#34;vi and awk.&#34; I wanted to jokingly respond &#34;and after they suggested that they got into their time machine and went back to the 70&#39;s.</description>
    </item>
    
    <item>
      <title>REPOST - Shell games - who confirmed attendance</title>
      <link>https://cestlaz.github.io/posts/duplicate-emails/</link>
      <pubDate>Thu, 12 May 2016 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/duplicate-emails/</guid>
      <description>Repost This is a repost from March 2015. It didn&#39;t transfer when I rebooted the blog.
Original Quick post on why I love the Unix command line.
We&#39;re busy organizing CSTUY&#39;s first hackathon. It&#39;s going to be at SumAll, where we hold our weekly hacking sessions but while taking registration, we had a little program.
The kids signed up on a Google doc but we all know the story -- when people sign up for a free event, even one with free food and t-shirts, many don&#39;t show.</description>
    </item>
    
    <item>
      <title>Should We Teach HTML?</title>
      <link>https://cestlaz.github.io/posts/teaching-html/</link>
      <pubDate>Mon, 09 May 2016 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/teaching-html/</guid>
      <description>Yesterday, Doug Peterson wrote a &#34;Whatever happened to&#34; post subtitled HTML as an essential 21st Century skill? It&#39;s a nice post.
I left a comment but thought I&#39;d elaborate here.
No, knowing HTML is not programming - it&#39;s markup. Even so, when I help people design CS programs, I&#39;ll frequently recommend starting with HTML or at least introducing it early.
Why?
It&#39;s a gateway and not just to programming.
HTML is pretty easy, you want something bold, you just wrap the word in &amp;lt;b&amp;gt; and ==:</description>
    </item>
    
    <item>
      <title>I hate ruby or why I&#39;m switching blogging platforms</title>
      <link>https://cestlaz.github.io/posts/2016-04-14-i-hate-ruby.html/</link>
      <pubDate>Thu, 14 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/2016-04-14-i-hate-ruby.html/</guid>
      <description>I&#39;m moving to a new blogging platform. I&#39;m still going to use GitHub pages but after a few years of using Jekyll, I&#39;m switching to Nikola.  I think I&#39;ve got the move worked out but if you&#39;re reading this via an rss or atom reader, make sure to check back in a couple of days - you might have to re-subscribe.  Why am I switching?  Because I hate Ruby.</description>
    </item>
    
    <item>
      <title>IDE or the Cloud</title>
      <link>https://cestlaz.github.io/posts/2016-04-12-ide-or-cloud.html/</link>
      <pubDate>Tue, 12 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/2016-04-12-ide-or-cloud.html/</guid>
      <description>div.center {text-align:center;}    This weekend, I had a conversation on Twitter with my friend Roy Bahat: @zamansky Mike, unrelated, what do you think of https://t.co/BT1ublbajF ?
&amp;mdash; Roy Bahat (@roybahat) April 9, 2016 
@roybahatMaybe I&amp;#39;ll blog about my thoughts about online environments vs local installs
&amp;mdash; Mike Zamansky (@zamansky) April 9, 2016
@roybahat Agree with this but there are many issues. I&amp;#39;ll try to write more later.</description>
    </item>
    
    <item>
      <title>Debugging deployment</title>
      <link>https://cestlaz.github.io/posts/2016-01-23-debugging-deployment.html/</link>
      <pubDate>Sat, 23 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/2016-01-23-debugging-deployment.html/</guid>
      <description>div.center {text-align:center;} 
 SoftDev students are hard at work on their final projects. By now, they all have fairly complex code bases. This limits how much I can help them with debugging.  There are some problems, though, that they have to contend with that even with experience, are hard to spot. Notably because the very tools you use to debug these errors are part of the problem.  Last week, this happened twice.</description>
    </item>
    
    <item>
      <title>Know your tools - intermediate Emacs</title>
      <link>https://cestlaz.github.io/posts/2015-10-28-emacs-intermediate.html/</link>
      <pubDate>Wed, 28 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/2015-10-28-emacs-intermediate.html/</guid>
      <description>div.center {text-align:center;}    A good workman is known by his tools, or so the saying goes. My tools of choice are my terminal shell and Emacs.  I suppose if I was a full time developer working with a limited set of tools I might like an IDE like JetBrains or Eclipse but no matter how many alternatives I try, I always end back in Emacs.  I recommend that my students spend time not only in Emacs but also in tools like Vim or Sublime Text.</description>
    </item>
    
    <item>
      <title>Shell games - who confirmed attendence</title>
      <link>https://cestlaz.github.io/posts/2015-03-19-duplicate-emails.html/</link>
      <pubDate>Thu, 19 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/2015-03-19-duplicate-emails.html/</guid>
      <description>div.center {text-align:center;} 
 Quick post on why I love the Unix command line.  We&#39;re busy organizing CSTUY&#39;s first hackathon. It&#39;s going to be at SumAll, where we hold our weekly hacking sessions but while taking registration, we had a little program.  The kids signed up on a Google doc but we all know the story &amp;#x2013; when people sign up for a free event, even one with free food and t-shirts, many don&#39;t show.</description>
    </item>
    
    <item>
      <title>Spreadsheet? I&#39;d rather use the command line.</title>
      <link>https://cestlaz.github.io/posts/2014-07-06-spreadsheet-vs-cli.html/</link>
      <pubDate>Sun, 06 Jul 2014 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/2014-07-06-spreadsheet-vs-cli.html/</guid>
      <description>div.center {text-align:center;} 
 Spreadsheets are terrific - we&#39;ve all used them. I particularly like Google spreadsheets - I use them all the time to collect data, usually from students.  Go to Google Drive  Make a form  Send the form out to the students  Wait  
 All the data gets dumped into a Google spreadsheet. The trouble is, what to do with it once it&#39;s in the spreadsheet.</description>
    </item>
    
    <item>
      <title>Shell Games - an introduction</title>
      <link>https://cestlaz.github.io/posts/2014-02-04-shellgames-1-intro/</link>
      <pubDate>Tue, 04 Feb 2014 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/2014-02-04-shellgames-1-intro/</guid>
      <description>A few weeks ago, I noticed this Twitter conversation between Alfred Thompson and Steve Keinath

I&amp;#39;d love to see an Intro to Linux (way more than just install) as a 3-hour workshop at #CSTA14 @csteachersa
&amp;mdash; Steve Keinath (@keinath) November 12, 2013 @alfredtwo @csteachersa Right. I know very little &amp;amp; would love a &amp;quot;zero to hero&amp;quot; Linux workshop.
&amp;mdash; Steve Keinath (@keinath) November 12, 2013  
I briefly considered proposing a session for the conference but it was just a day or two before the deadline, I don&#39;t know if I&#39;m going to be able to attend the conference, and besides, who said anything I proposed would be accepted.</description>
    </item>
    
    <item>
      <title>Subversion for Homework part II and the start of the new term</title>
      <link>https://cestlaz.github.io/posts/2010-02-01-subversion-for-homework-part-ii-and.html/</link>
      <pubDate>Mon, 01 Feb 2010 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/2010-02-01-subversion-for-homework-part-ii-and.html/</guid>
      <description>Starting the new semester tomorrow and I&#39;ve got a whole bunch of interesting topics to blog about. Some about pedagogy, some technical, and some that I can&#39;t really catagorize.
For now, though, just a brief follow up on using Subversion for homework collection.
The basic model used in New York City for teacher improvement and evaluation is the official &#34;observation.&#34; Either your supervisor or the principal sits in on one of your classes.</description>
    </item>
    
    <item>
      <title>Subversion in the classroom</title>
      <link>https://cestlaz.github.io/posts/2010-01-19-subversion-in-classroom.html/</link>
      <pubDate>Tue, 19 Jan 2010 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/2010-01-19-subversion-in-classroom.html/</guid>
      <description>Ok, not subversion, rather subversion, the version control system.
I&#39;ve used subversion as a way for students to hand in their projects for years. I haven&#39;t used it with my intro classes as I think the learning curve is a little steep and the benefits few, but for A.P. and beyond (juniors and seniors) it&#39;s worked very well as a method of collection and I think it&#39;s good to get the kids in the habit of using versioning systems.</description>
    </item>
    
  </channel>
</rss>
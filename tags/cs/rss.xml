<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Cs on C&#39;est la Z</title>
    <link>https://cestlaz.github.io/tags/cs/</link>
    <description>Recent content in Cs on C&#39;est la Z</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 26 Feb 2019 15:49:22 -0400</lastBuildDate>
    
	<atom:link href="https://cestlaz.github.io/tags/cs/rss.xml" rel="self" type="application/rss" />
    
    
    <item>
      <title>March PD for CS Teachers</title>
      <link>https://cestlaz.github.io/post/pd-apcs-a-and-beyond-3-14-2019/</link>
      <pubDate>Tue, 26 Feb 2019 15:49:22 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/pd-apcs-a-and-beyond-3-14-2019/</guid>
      <description>Back in December we ran our first PD session for CS teachers. This was to address the need for professional development for teachers who were more experienced in terms of computer science - we aimed this at people who were ready to teach APCS-A, similar, or beyond and also to start to build a community for these teachers.
We had trouble setting things up for February but we&#39;re good to go for March, April and May.</description>
    </item>
    
    <item>
      <title>Java Interfaces</title>
      <link>https://cestlaz.github.io/post/java-interfaces/</link>
      <pubDate>Fri, 08 Feb 2019 09:40:44 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/java-interfaces/</guid>
      <description>Two of the hardest topics to make meaningful to students in APCS-A are inheritance and interfaces. It&#39;s not that they&#39;re super difficult topics but rather that they&#39;re not often needed, useful, or superior to not using them on beginner assignments. More often than not the motivation is a bit forced as are the assignments.
Inheritance is its own can of worms and to be honest, something I&#39;ve not found to be all that useful or necessary.</description>
    </item>
    
    <item>
      <title>Solve A To Solve B</title>
      <link>https://cestlaz.github.io/post/solve-a-to-solve-b/</link>
      <pubDate>Fri, 18 Jan 2019 19:36:59 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/solve-a-to-solve-b/</guid>
      <description>So many programming assignments involve a direct solution. Write a program to do this or write a problem to solve that. It&#39;s pretty typical. There&#39;s nothing wrong with assignments like these. They allow students to practice what they&#39;ve been learning and it gives them the opportunity to create some cool programs. All the same, I like it when there&#39;s an indirect problem. You&#39;re faced with a problem but in order to solve it you first have to solve some other problem</description>
    </item>
    
    <item>
      <title>Advent of Code, Data Structures, and Hidden Complexity</title>
      <link>https://cestlaz.github.io/post/aoc-data-structures-hidden-complexity/</link>
      <pubDate>Sun, 30 Dec 2018 15:17:14 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/aoc-data-structures-hidden-complexity/</guid>
      <description>Since 2015, Eric Wastl has gifted us each December with Advent of Code - a 25 day programming competition that I very much enjoy. This year I haven&#39;t been able to get to too many of the problems. I only completed the first two days on the day they were released, problem three a day late and then I didn&#39;t get back to the problems until almost 12/25 - the final day of the competition.</description>
    </item>
    
    <item>
      <title>Professional Development - APCS-A, similar and beyond</title>
      <link>https://cestlaz.github.io/post/pd-apcs-a-and-beyond/</link>
      <pubDate>Sat, 15 Dec 2018 08:56:06 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/pd-apcs-a-and-beyond/</guid>
      <description>A while ago I wrote about our plans at Hunter to run professional development for CS teachers. Specifically, running once a month sessions for teachers who teach APCS-A, similar and beyond.
The idea started as a joke but morphed into a legit idea.
I was talking to some friends about CTLE hours and how ridiculous the system is. NY State teachers need 100 hours of CTLE credit (PD hours) every so many years.</description>
    </item>
    
    <item>
      <title>PD in NYC</title>
      <link>https://cestlaz.github.io/post/pd-in-nyc/</link>
      <pubDate>Sun, 18 Nov 2018 19:43:36 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/pd-in-nyc/</guid>
      <description>I spent this past Saturday morning up at the Microsoft building in Times Square. What was I doing there? Aankit Patel invited me to check out the professional development that he and his team organized for the teachers involved in the assorted CSforAllNYC programs that his office runs.
Wow.
Lots of great things going on. I was only able to stay for a couple of hours but I spent some time in two rooms run by TEALS, a room of BJC teachers, a group working with p5.</description>
    </item>
    
    <item>
      <title>Who Played Spiderman - part 3</title>
      <link>https://cestlaz.github.io/post/who-played-spiderman-3/</link>
      <pubDate>Tue, 16 Oct 2018 17:25:33 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/who-played-spiderman-3/</guid>
      <description>Parts 1 and 2  Part 1 Part 2  Part 3 In the first two parts of this set of posts I wrote about the motivation and design a question answering system that can answer &#34;who&#34; queries like &#34;who played Spiderman&#34; or &#34;who shot John Lennon?&#34; It&#39;s not perfect. When doing the Spiderman query, chances are the desired answer will be at or near the top of the list of most frequently appearing names but so will &#34;</description>
    </item>
    
    <item>
      <title>Who Played Spiderman part 2</title>
      <link>https://cestlaz.github.io/post/who-played-spiderman-2/</link>
      <pubDate>Sat, 13 Oct 2018 16:04:59 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/who-played-spiderman-2/</guid>
      <description>Parts 1 and 3  Part 1 Part 3  Part 2 When we left off last time we used a search engine API to gather a whole bunch of documents with the term &#34;played Spiderman&#34; or &#34;who played Spiderman.&#34; Now we have to process these documents to answer the question. Fortunately, the documents are basically just big strings of text.
Since we&#39;re doing a &#34;who&#34; query we want to find all the names in all the documents.</description>
    </item>
    
    <item>
      <title>Who Played Spiderman part 1 or my Nifty Assignment (that was rejected)</title>
      <link>https://cestlaz.github.io/post/who-played-spiderman/</link>
      <pubDate>Thu, 11 Oct 2018 17:16:23 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/who-played-spiderman/</guid>
      <description>Parts 2 and 3  Part 2 Part 3  I wasn&#39;t going to teach this lesson today. I was planning on starting a multi day project starting with an exercise in specification writing and design.
Beforehand though, we had to talk about classes. One of my students asked if probability and/or statistics were really important for CS. I started to cite a few examples and then decided to segue into this.</description>
    </item>
    
    <item>
      <title>Compile Each Concept</title>
      <link>https://cestlaz.github.io/post/compile-each-concept/</link>
      <pubDate>Tue, 09 Oct 2018 14:46:59 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/compile-each-concept/</guid>
      <description>We&#39;ve all been there:
  Student: Teacher, I need help  Teacher (comes over)  Student (shows screen listing three bazillion errors)  The student has just written pages of code and finally decided to try to run it only to end up with pages of errors.
Error messages can at times be hard to read for beginners but to see and truth be told, they frequently don&#39;t even read them but over the years I&#39;ve developed a practice that I&#39;ve found helpful as a software developer and if students adopt the same practice it can save them a lot of time and effort.</description>
    </item>
    
    <item>
      <title>Creating a school for CS</title>
      <link>https://cestlaz.github.io/posts/creating-a-school/</link>
      <pubDate>Tue, 11 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/creating-a-school/</guid>
      <description>Do we really need CS focused high schools?
That&#39;s the question Alfred Thompson asked partly in reaction to my post talking about Bill Gates&#39; visit to AFSE, a NYC public school with a CS focus.
On both posts, Michael Preston shared some important and good points about AFSE as a starting point and gateway that helped lead to CS4All in NYC and also specifically about AFSE.
In response to Alfred&#39;s question I thought it was time I shared a bit about what I was pushing for AFSE back when I was involved.</description>
    </item>
    
    <item>
      <title>Do you need to know binary for CS?</title>
      <link>https://cestlaz.github.io/posts/why-binary/</link>
      <pubDate>Wed, 05 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/why-binary/</guid>
      <description>Yesterday, Alfred Thompson asked &#34;Why is it important for CS students to understand binary?&#34; on Twitter which led to a number of interesting responses. Alfred summarized and wrote his own thoughts on his blog.
I wanted to add a comment but I already wrote a post for yesterday so put it off until today.
First let me say that you can have a very successful career in tech and not really know binary or number bases other than 10.</description>
    </item>
    
    <item>
      <title>Rite Of Passage Projects</title>
      <link>https://cestlaz.github.io/posts/rite-of-passage-projects/</link>
      <pubDate>Fri, 17 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/rite-of-passage-projects/</guid>
      <description>JCS&#39;s post on Irreal today brought me back. It was about Brief which was the editing hotness back in the day. I played with it a little really mostly used Emacs clones for real work when I was stuck on MS-DOS systems. Usually either JOVE or Epsilon
In the comments Jon reminded me about the MKS Toolkit which brought most everyday Unix tools to DOS along with a shell and a version of Vi.</description>
    </item>
    
    <item>
      <title>Hunter CS - a lot of progress in a short time</title>
      <link>https://cestlaz.github.io/posts/hunter-cs-year-two/</link>
      <pubDate>Fri, 29 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/hunter-cs-year-two/</guid>
      <description>Yesterday I was back on campus for an early orientation session for Hunter&#39;s incoming Daedalus CS honors students. It was the first time all of us got to meet face to face. The students I met with will be my third cohort. I got to thinking how far we&#39;ve come in under three years.
Hunter&#39;s had a strong but little known undergraduate CS program for as long as I&#39;ve known. Much like any program, we&#39;ve got our strengths and weaknesses but you go through our program and academically you&#39;ll be as well prepared as from anywhere else.</description>
    </item>
    
    <item>
      <title>Teaching recursion early? Make sure to use a good tool.</title>
      <link>https://cestlaz.github.io/posts/recursion-early/</link>
      <pubDate>Wed, 30 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/recursion-early/</guid>
      <description>I replied this tweet yesterday and thought I&#39;d expound a bit.
We started kids using scheme on 10th grade at stuy so did recursion early. Not everyone got all of it but it think it made things much easier for those that you more CS later.
&amp;mdash; Mike Zamansky (@zamansky) May 29, 2018 
We introduced recursion very early in our intro course at Stuy and I think it worked well.</description>
    </item>
    
    <item>
      <title>Why Strong K12 Teacher Certification is Important</title>
      <link>https://cestlaz.github.io/posts/strong-teacher-certification/</link>
      <pubDate>Tue, 10 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/strong-teacher-certification/</guid>
      <description>About a week ago New York State&#39;s new regulation creating a K12 CS teacher certification went live. Just the other day I was honored to be interviewed by Matt Flamm of Crain&#39;s New York in a follow up piece about it.
Having K12 CS teacher certification is big and having quality programs that lead to certification is HUGE. In my view, it&#39;s a game changer.
Let&#39;s Focus on high school, my wheelhouse.</description>
    </item>
    
    <item>
      <title>Competitions and Hackathons</title>
      <link>https://cestlaz.github.io/posts/hs-competitions/</link>
      <pubDate>Fri, 06 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/hs-competitions/</guid>
      <description>Today&#39;s the last day of spring break. After the weekend it&#39;s back to the grind. It really hasn&#39;t been much of a spring break. The rain and the snow made for very little spring and between working on the Hunter / CUNY2X Internship program and reviewing applications for my Hunter Daedalus CS Honors program there has been very little break.
Today was no exception - I spent much of the day working but I did take a few hours to head over to Cornell Tech on Roosevelt Island.</description>
    </item>
    
    <item>
      <title>Tools and Complexity</title>
      <link>https://cestlaz.github.io/posts/tools-and-complexity/</link>
      <pubDate>Thu, 05 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/tools-and-complexity/</guid>
      <description>Alfred Thompson wrote about CS education tools earlier today. I&#39;ve also been meaning to write on the topic but from a different point of view.
I do my best to keep up with the latest and greatest in the CS world both on the academic side as well as the professional one. That&#39;s not really possible, but I do my best. When I have a small project to work on I&#39;ll some times use it as an excuse to play with some recent technology.</description>
    </item>
    
    <item>
      <title>Do It The Dumb Way</title>
      <link>https://cestlaz.github.io/posts/do-it-the-dumb-way/</link>
      <pubDate>Fri, 30 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/do-it-the-dumb-way/</guid>
      <description>There&#39;s so much to like in the shape drawing lessons I talked about in my refactoring post that I thought I&#39;d share a little more here.
It can be argued that the most important things for a program to do is work. The most clever, elegant, creative program is worthless if it doesn&#39;t produce the desired result. All too often, beginners and hot shot beginners in particular try to be too clever too early and get themselves into trouble.</description>
    </item>
    
    <item>
      <title>Refactoring</title>
      <link>https://cestlaz.github.io/posts/refactoring/</link>
      <pubDate>Wed, 21 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/refactoring/</guid>
      <description>One of my laments on teaching computer science is that students are rarely taught and given the chance to develop good programming practices. There&#39;s usually not enough time. Beginners work on small &#34;toys&#34; which don&#39;t lend themselves to good software development practices and later on, there&#39;s so much other material like algorithms, data structures etc. to teach and learn that programming practices usually amount to lines like:
  &#34;Make sure to comment your code.</description>
    </item>
    
    <item>
      <title>Testing Part 2</title>
      <link>https://cestlaz.github.io/posts/testing-part2/</link>
      <pubDate>Sun, 18 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/testing-part2/</guid>
      <description>A few weeks ago I wrote about introducing testing in CS classes, specifically using a testing framework. In that post I talked about the plan but now I can talk about the results.
My class interleaves with Hunter&#39;s CSCI 13500 - Software Analysis and Design I class. One day each week, my students have complete a hands on lab focusing on whatever is being covered in the 13500 class. I decided to use one of those labs as a first foray into testing.</description>
    </item>
    
    <item>
      <title>Sigcse2018 Making theory more acccesible</title>
      <link>https://cestlaz.github.io/posts/sigcse2018-theory/</link>
      <pubDate>Tue, 13 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/sigcse2018-theory/</guid>
      <description>Next up from SIGCSE 2018 is John MacCormick&#39;s session on Strategies for Baing the CS Theory Course on Non-decision Problems
MacCormicks&#39;s stance is that CS theory is tough the first time around and using non-decision problems is a viable approach to make theory more accessible to beginners. As MacCormick said in his paper:
  ... a decision problem may ask the yes/no question, &#34;Does this graph  have a Hamilton cycle?</description>
    </item>
    
    <item>
      <title>Sigcse2018 Bootstrapworld on Creativity in CS classes</title>
      <link>https://cestlaz.github.io/posts/sigcse2018-bootstrap/</link>
      <pubDate>Fri, 02 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/sigcse2018-bootstrap/</guid>
      <description>I really didn&#39;t know what to expect at the Creativity, Customization, and Ownership: Game Design in Bootstrap: Algebra session. I&#39;ve been a big fan of Bootstrep for years and looking at the authors, Emmanuel Schanzer&#39;s been a freind forever. I&#39;ve never met Shriram Krishnamurthi in person but am looking forward to it. We&#39;ve traded emails and blog comments. I&#39;d like to consider him a friend and I certainly respect him and his work even though we frequently disagree around the edges.</description>
    </item>
    
    <item>
      <title>Sigcse2018 - Malloc Lab</title>
      <link>https://cestlaz.github.io/posts/sigcse2018-malloc-lab/</link>
      <pubDate>Thu, 01 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/sigcse2018-malloc-lab/</guid>
      <description>I wasn&#39;t going to go to this session. I started out in a panel on integrating social good into CS Ed. With the panel not meeting my expectations I moved over to my second choice - the system programming sessions where I saw Implementing Malloc: Students and Systems Programming, a paper presented by Brian Railing of CMU.
I really liked both the paper and the talk.
CMU computer science students all take a systems course that uses Computer Systems: A Programmer&#39;s Perspective.</description>
    </item>
    
    <item>
      <title>Testing, Testing</title>
      <link>https://cestlaz.github.io/posts/testing-testing/</link>
      <pubDate>Mon, 19 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/testing-testing/</guid>
      <description>With CS4All being the buzzword of the day we&#39;re paying a lot of attention to the fact that when we teach a CS class for all students, most of them won&#39;t end up studying CS or going directly into a tech heavy field.
Among those that do study CS though, there is another division. Those studying CS as an academic exercise or to go on to graduate studies and those who are going in to the tech sector.</description>
    </item>
    
    <item>
      <title>APCS-P -  Bigger Intake Or Leaky Pipe</title>
      <link>https://cestlaz.github.io/posts/apcsp-bigger-intake-or-leaky-pipe/</link>
      <pubDate>Mon, 01 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/apcsp-bigger-intake-or-leaky-pipe/</guid>
      <description>Advanced Placement Computer Science got top billing on Alfred Thompson&#39;s Things I&#39;m Watching in 2017 post. Alfred talks about how APCS-P exploded onto the scene and wonders what will happen with APCS this year.
I have some questions as well but mine won&#39;t be answered for years to come, if ever.
Like it or not, the College Board has an out sized influence on K12 education. As long as people are convinced that AP=good there will be a push for more and more AP classes and APCS-P is a perfect class to push.</description>
    </item>
    
    <item>
      <title>2017 in review - Hunter Undergraduate CS</title>
      <link>https://cestlaz.github.io/posts/2017-review-hunter-cs/</link>
      <pubDate>Tue, 26 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/2017-review-hunter-cs/</guid>
      <description>I usually don&#39;t do year in review posts. At Stuy, not much changed year after year so I never felt it worth summarizing the past and projecting the future. At Hunter, now that I&#39;m a couple of years in, projects are really picking up steam so I think it&#39;s worth talking about them.
One of my two major missions at Hunter was to build a CS Honors program and raise the profile of Hunter&#39;s undergraduate CS program in general.</description>
    </item>
    
    <item>
      <title>Breaking down problems and writing</title>
      <link>https://cestlaz.github.io/posts/whats-next/</link>
      <pubDate>Thu, 14 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/whats-next/</guid>
      <description>This question appeared on Facebook a few days ago:
  Does anyone have an effective way to teach students how to break down  a problem into steps and then solve each step one by one? I think my  students are struggling with a large question and breaking it in  subsequent parts.  There were some good suggestions. I wanted to add something but didn&#39;t have time then so I thought I&#39;d write it up now.</description>
    </item>
    
    <item>
      <title>New York State moving forward with CS Teacher Certification</title>
      <link>https://cestlaz.github.io/posts/ny-cs-certificate/</link>
      <pubDate>Tue, 12 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/ny-cs-certificate/</guid>
      <description>Last April I woke up early and trekked up to Albany along with a few of my Hunter College colleagues to share our thoughts on K12 Computer Science teacher certification with the Board of Regents. We gave a presentation to the Regents Higher Education Committee and afterwards had a chance to talk with some of the Regents as well as other members of the New York State Department of Education.</description>
    </item>
    
    <item>
      <title>Advent of Code 2017 - Day 1</title>
      <link>https://cestlaz.github.io/posts/advent-2017-1/</link>
      <pubDate>Sat, 02 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/advent-2017-1/</guid>
      <description>It&#39;s once again time for Advent of Code. That one a day programming competition that&#39;s been running now for three years.
Here are some thoughts on day 1. The core of the problem is that you have a large string of digits and you have to calculate a checksum. This is done by adding the sum of a subset of the digits. Only the ones that are identical to the digit to their right.</description>
    </item>
    
    <item>
      <title>Motivating and understanding quicksort</title>
      <link>https://cestlaz.github.io/posts/quick-sort-starting/</link>
      <pubDate>Tue, 21 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/quick-sort-starting/</guid>
      <description>Thks question was posed the other day - how can one get students to truly understand the quicksort algorithm?
I&#39;ve written a few posts about quicksort. The last time I did a lesson writeup on the subject I wrote about first looking and quickselect and then moving to the quicksort. The class was first faced with the problem of writing a routine to find the Kth smallest item in an unsorted data set.</description>
    </item>
    
    <item>
      <title>Professional Development beyond Scratch</title>
      <link>https://cestlaz.github.io/posts/election-day-pd-2017/</link>
      <pubDate>Tue, 07 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/election-day-pd-2017/</guid>
      <description>Today was Election Day. One of the few days each year when students stay home and teachers spend all day attending what is generously known as professional development.
Years ago I was in a room with a few colleagues when my friend Dave - one of the best math teachers I know said &#34;you know, every time we have a PD day in NJ and my wife and I have to scramble to take care of the kids I get a little annoyed but then think I shouldn&#39;t get annoyed since they&#39;re spending the day doing all sorts of valuable PD.</description>
    </item>
    
    <item>
      <title>Early Interesting Problems - Happy Ladybugs</title>
      <link>https://cestlaz.github.io/posts/happy_ladybug/</link>
      <pubDate>Mon, 23 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/happy_ladybug/</guid>
      <description>We all love interesting problems. The trouble is that it&#39;s hard to find suitably interesting problems for students when they&#39;re just learning the basics. In the very beginning the problems practically dictate the solution:
 loop over a list and add all the elements or calculate the sum of a list of integers. Determine if number is prime Convert a word into pig-Latin  It&#39;s not that there&#39;s no thought involved in solving these but the students already know the mechanics of solving these by hand so it&#39;s a direct translation into a program.</description>
    </item>
    
    <item>
      <title>There&#39;s always something to learn (from your students)</title>
      <link>https://cestlaz.github.io/posts/when-they-change-the-script/</link>
      <pubDate>Wed, 18 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/when-they-change-the-script/</guid>
      <description>One thing I&#39;ve learned from teaching is that there&#39;s always something new to learn. For the kids, yes, but I&#39;m talking about for the teacher.
The other day, I taught a lesson I&#39;ve taught many times. Find the mode of a data set. That&#39;s the problem that they solve but the lesson is really about run time complexity, hidden complexity and using data structures in alternate ways.
I blogged about this before so you can get an earlier take there although the code isn&#39;t formatted correctly due to blog conversions.</description>
    </item>
    
    <item>
      <title>A test result is just a test result</title>
      <link>https://cestlaz.github.io/posts/ap-results-measure-of-curriculum/</link>
      <pubDate>Sun, 15 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/ap-results-measure-of-curriculum/</guid>
      <description>This past weekend was Catskillsconf - my favorite event of the year. I spent the weekend up in Ulster County with a bunch of my students. some great friends old and new, and Devorah. It was a great weekend but I was mostly offline.
As a result I missed a rather heated discussion in the CS Ed Facebook groups. The debate was over whether or not Strong AP CSP exam results are indicative of a good curriculum or good professional development (PD).</description>
    </item>
    
    <item>
      <title>Standards - Who are they for?</title>
      <link>https://cestlaz.github.io/posts/standards-who-for/</link>
      <pubDate>Tue, 10 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/standards-who-for/</guid>
      <description>The big push at last year&#39;s CSTA conference was the release of the new CSTA K12 standards. It seemed that every other session was pushing them in one way or another. I&#39;ve been meaning to share my thoughts about them or, more specifically, learning standards in general for a while but with announcement about federal funding for CS coming from the White House last week I thought it was time.</description>
    </item>
    
    <item>
      <title>Programming Idioms</title>
      <link>https://cestlaz.github.io/posts/programming-idioms/</link>
      <pubDate>Sun, 08 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/programming-idioms/</guid>
      <description>I just read Jeff Yearout&#39;s recent post titled The Beginner&#39;s Garden of Concepts. Not directly related but it got me thinking about programming idioms.
I&#39;ve been using the phrase &#34;programming idiom&#34; for years to describe a short useful recurring code construct. I didn&#39;t realize that it was officially &#34;a thing&#34; until doing a web search on the phrase years later.
As our students grow from newbies on I think it&#39;s helpful for them to see recurring and related patterns and programming idioms gives us a name to apply to many beginner patterns.</description>
    </item>
    
    <item>
      <title>Awesome Cs Revisited</title>
      <link>https://cestlaz.github.io/posts/awesome-cs-revisted/</link>
      <pubDate>Thu, 21 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/awesome-cs-revisted/</guid>
      <description>Saw this tweet the other day so I though I would try to plug the Awesome CS Education list I started on GitHub:
#csteachers...didn&amp;#39;t I see a list of CS teacher blogs here recently?
&amp;mdash; Pam Whitlock (@PamWhitlock1) September 21, 2017 
To answer the tweet, the closet thing I know to a list is Alfred Thompson&#39;s blog roll which is actually a post he wrote on his blog in 2012.</description>
    </item>
    
    <item>
      <title>New Term New Tool - Thonny, a Python IDE</title>
      <link>https://cestlaz.github.io/posts/new-tool-thonny/</link>
      <pubDate>Thu, 21 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/new-tool-thonny/</guid>
      <description>Last year I wrote about repl.it, an online IDE that supports multiple languages. At the time it had some rudimentary classroom support and since I started using it, repl.it has become better and better. I used it last year with my class because I had to start the year in a lab where I couldn&#39;t easily install my own software. I&#39;ll continue to use repl.it - mostly for it&#39;s ability to schedule publish and manage assignments but when possible, I like having my students work locally.</description>
    </item>
    
    <item>
      <title>I Believe CS Teachers are Smart and Capable</title>
      <link>https://cestlaz.github.io/posts/cs-teachers-smart/</link>
      <pubDate>Fri, 15 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/cs-teachers-smart/</guid>
      <description>People sometimes accuse me of being an elitist CS snob that I feel that CS teachers have to have advanced CS degrees.
It&#39;s not that at all. Rather, I feel that CS teachers are smart and capable. Circumstances frequently result in a teacher in front of a CS class with limited content and pedagogical content knowledge. It&#39;s not ideal but it&#39;s reality. Of course I feel that we should do everything to support and encourage these teachers but we should also insist that after a reasonable period of time, they know their stuff.</description>
    </item>
    
    <item>
      <title>Theseus&#39;s Curriculum</title>
      <link>https://cestlaz.github.io/posts/theseuss-curriculum/</link>
      <pubDate>Tue, 05 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/theseuss-curriculum/</guid>
      <description>With the school year starting I was originally planning on writing about my class rules.
Instead I think I&#39;ll riff on Alfred Thompson&#39;s post today titled Curriculum is Hard. I&#39;m guessing I found curriculum design and development daunting decades ago but at this point in my career it&#39;s something I enjoy. In any event, Alfred got me to thinking - when is a curriculum your own?
If you grab a curriculum complete with lesson plans, assignments; the whole kit and caboodle and you use it verbatim it&#39;s clearly not your curriculum.</description>
    </item>
    
    <item>
      <title>CS Teachers - we need you to blog</title>
      <link>https://cestlaz.github.io/posts/cs-teachers-blog/</link>
      <pubDate>Fri, 25 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/cs-teachers-blog/</guid>
      <description>At this past year&#39;s CSTA conference, a few of us huddled in a corner voiced a very common lament - &#34;it would be great if more CS teachers blogged.&#34; It really would be. We&#39;re still a relatively small community and while there&#39;s some good conversation going on on mailing lists and on Facebook, those aren&#39;t easily discoverable or accessible and in the case of Facebook, there&#39;s a question of ownership and permanence.</description>
    </item>
    
    <item>
      <title>Teaching APCS-A for the first time</title>
      <link>https://cestlaz.github.io/posts/teaching-ap-first-time/</link>
      <pubDate>Wed, 23 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/teaching-ap-first-time/</guid>
      <description>I got an email from a friend the other day. Among other things, he mentioned that he would be teaching APCS-A for the first time this year. He&#39;s a little trepidatious. He knows his stuff but he hasn&#39;t really done much using Java.
I was going to respond in an email but thought I might share here instead.
  TL;DR - for all you APCS teachers who are new or new to Java - learn  your core CS, lean on your resources and support and it&#39;s OK to tell  your kids &#34;</description>
    </item>
    
    <item>
      <title>Thoughts on non educator  influences on CS Education</title>
      <link>https://cestlaz.github.io/posts/outside-influences-on-cs-ed/</link>
      <pubDate>Sat, 29 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/outside-influences-on-cs-ed/</guid>
      <description>Yesterday Mark Guzdial blogged about a NY Times piece discussing Silicon Valleys influence on education through Code.org.
Mark questioned the validity of the piece. If you don&#39;t read Mark&#39;s blog and you&#39;re in CS Ed you probably should.
I tried to leave a comment on Mark&#39;s blog - not about the NY Times article but rather my thoughts on why I think it&#39;s important that we remain wary and vigilant to industry and outsiders influence and impact on CS education and on education in general.</description>
    </item>
    
    <item>
      <title>CS Ed advocates should pay attention to greater ed issues</title>
      <link>https://cestlaz.github.io/posts/cs-ed-and-all-ed/</link>
      <pubDate>Tue, 18 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/cs-ed-and-all-ed/</guid>
      <description>For anyone involved in K12 CS education, the past few years have been a wild ride. When I first tried to make inroads in the DOE decades ago I couldn&#39;t get through the door. Now, CS Education is everyone&#39;s darling. It&#39;s really amazing. It&#39;s been a combination of grass roots efforts by teachers, non profit education efforts such as TEALS, advocacy of groups like Code.org and amazing individuals like Fred Wilson who has probably done more to move the needle of CS Ed in NY than any other 10 people combined.</description>
    </item>
    
    <item>
      <title>A friendly reminder to use the right language when describing CS</title>
      <link>https://cestlaz.github.io/posts/languages-or-cs/</link>
      <pubDate>Mon, 10 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/languages-or-cs/</guid>
      <description>I was part of this conversation the other day:
When science teachers asked me if I taught AP Java I&amp;#39;d always respond by asking them if they taught AP Microscope.
&amp;mdash; Mike Zamansky (@zamansky) July 7, 2017 
I always use that line to emphasize that I teach CS - a way of thinking and problem solving and looking at the world. The languages we use in our classes are tools to help us communicate ideas not the ends but rather a means.</description>
    </item>
    
    <item>
      <title>Disclosing Bugs - requiring a project roadmap</title>
      <link>https://cestlaz.github.io/posts/disclosing-bugs/</link>
      <pubDate>Tue, 13 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/disclosing-bugs/</guid>
      <description>Over on Facebook, a fellow CS educator 1 made a comment on something he wanted to try with his students this summer: having the students pre-disclose bugs when they submit their projects.
The post was asking for any links to &#34;the literature.&#34; I can&#39;t speak to that but I I&#39;ve done something similar to what the post was asking about so, as per usual, I thought I&#39;d write about it here.</description>
    </item>
    
    <item>
      <title>A* is born</title>
      <link>https://cestlaz.github.io/posts/a-star-is-born/</link>
      <pubDate>Mon, 05 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/a-star-is-born/</guid>
      <description>Over on the CS Educator StachExchange, which is in private beta for a few more days, I saw a post asking about how to introduce the A* search algorithm.
I taught A* as part of the APCS class at Stuy so I thought I&#39;d talk about what I did here.
Some time around mid year, we get to intermediate recursion. This is about the time, give or take, when we talk about the nlogn sorts.</description>
    </item>
    
    <item>
      <title>A new first language? What&#39;s the follow up plan?</title>
      <link>https://cestlaz.github.io/posts/first-language-changing/</link>
      <pubDate>Fri, 21 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/first-language-changing/</guid>
      <description>This morning, Mark Guzdial wrote about Stanford possibly moving away from Java as their intro language. This comes on the heels of a semi-regular thread on one of the lists I&#39;m on asking about what languages are used at assorted colleges around the country. Invariably the Pascal - C++ - Java progression of APCS turns up in these threads.
There are plenty of arguments to be made both for and against pretty much any language or platform.</description>
    </item>
    
    <item>
      <title>SIGCSE 2017 - a path to github part 1</title>
      <link>https://cestlaz.github.io/posts/sigcse-2017-github-1/</link>
      <pubDate>Thu, 16 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/sigcse-2017-github-1/</guid>
      <description>Both at and prior to SIGCSE 2017, I promised to write up the steps I take to introduce and use revision control systems in my classes.
This series is not meant to be a git or GitHub tutorial. There are plenty of those already (two of which I&#39;ve linked to below). This is about the process I use with my students to get them up to speed.
As with any new tool, there will be some resistance but once git saves them once, they get religion.</description>
    </item>
    
    <item>
      <title>SIGCSE 2017 - Recap</title>
      <link>https://cestlaz.github.io/posts/sigcse-2017-recap/</link>
      <pubDate>Tue, 14 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/sigcse-2017-recap/</guid>
      <description>As a high school teacher, I was never able to attend SIGCSE, the conference of the ACM&#39;s Special Interest Group on Computer Science Education. Between the number of instructional days I would lose and the cost, I could never justify going. Instead I looked over the proceedings and read many of the papers.
 Now that I&#39;m at Hunter, I was finally able to attend. This year in Seattle, the conference ran from Wednesday through Saturday.</description>
    </item>
    
    <item>
      <title>Whiteboard interviews</title>
      <link>https://cestlaz.github.io/posts/whiteboard-interviews/</link>
      <pubDate>Sun, 05 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/whiteboard-interviews/</guid>
      <description>A few days ago, I saw a piece on David Heinemeier Hansson&#39;s tweet on whiteboard interviews:
&amp;lt;p&amp;gt; &amp;lt;blockquote class=&amp;quot;twitter-tweet&amp;quot; data-lang=&amp;quot;en&amp;quot;&amp;gt;&amp;lt;p lang=&amp;quot;en&amp;quot; dir=&amp;quot;ltr&amp;quot;&amp;gt;Hello, my name is David. I would fail to write bubble sort on a whiteboard. I look code up on the internet all the time. I don&amp;amp;#39;t do riddles.&amp;lt;/p&amp;gt;&amp;amp;mdash; DHH (@dhh) &amp;lt;a href=&amp;quot;https://twitter.com/dhh/status/834146806594433025&amp;quot;&amp;gt;February 21, 2017&amp;lt;/a&amp;gt;&amp;lt;/blockquote&amp;gt; &amp;lt;/p&amp;gt; &amp;lt;p&amp;gt; &amp;lt;script async src=&amp;quot;//platform.twitter.com/widgets.js&amp;quot; charset=&amp;quot;utf-8&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;/p&amp;gt;  I&#39;m not a huge fan of the whiteboard interview but I think many of the tweets missed the point.</description>
    </item>
    
    <item>
      <title>Quality Devs and Coding Contests</title>
      <link>https://cestlaz.github.io/posts/quality-devs-and-coding-contests/</link>
      <pubDate>Sun, 19 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/quality-devs-and-coding-contests/</guid>
      <description>I&#39;ve been planning to put together a response to Alfred Thompson&#39;s recent post - Software Developers - Quantity vs Quality.
TL;DR, although it isn&#39;t really long and I do encourage you to read Alfred&#39;s post: a couple of articles talk about how the U.S. has the most people entering CS competitions like HackerRank but Americans are not at the top of the leaderboard. does this mean that there&#39;s less talent in America?</description>
    </item>
    
    <item>
      <title>Starting with scheme</title>
      <link>https://cestlaz.github.io/posts/staring-with-scheme/</link>
      <pubDate>Wed, 15 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/staring-with-scheme/</guid>
      <description>Scheme is one of the languages used in Stuy&#39;s intro CS course. Like any other language, there are pros and cons of using it to introduce students to CS. Here are some of the reasons why I like Scheme as a first language and why despite that, I don&#39;t recommend it in many cases.
Scheme certainly isn&#39;t mainstream. That&#39;s not the main reason why I like it but it is a side benefit.</description>
    </item>
    
    <item>
      <title>Selecting a starting language - why not Javascript</title>
      <link>https://cestlaz.github.io/posts/starting-with-js/</link>
      <pubDate>Mon, 13 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/starting-with-js/</guid>
      <description>I was catching up with the team at Stuy the other day and they mentioned that they were periodically getting pushback on their choice of languages, particularly in the intro class. The pushback was mostly in the form of &#34;why don&#39;t you start them with Javascript?&#34;
Back in the day, when I created our intro class where we use Scheme, NetLogo and then later Python, I&#39;d get similar pushback but then it was &#34;</description>
    </item>
    
    <item>
      <title>Should CS Ed be in bed with the College Board</title>
      <link>https://cestlaz.github.io/posts/cs-ed-in-bed-college-board/</link>
      <pubDate>Sat, 04 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/cs-ed-in-bed-college-board/</guid>
      <description>I&#39;m guessing my views on this aren&#39;t very popular -that&#39;s OK, every community needs a curmudgeon.
A few years ago, I cautioned if we weren&#39;t careful, once the big players got involved, CS Ed would go the way of other disciplines, and not in a good way. It looks like indeed we&#39;re well on our way down that road.
I&#39;ve ranted before about things like non-profits, drop in and summer programs.</description>
    </item>
    
    <item>
      <title>BS? - BA</title>
      <link>https://cestlaz.github.io/posts/ba-bs/</link>
      <pubDate>Sun, 01 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/ba-bs/</guid>
      <description>I didn&#39;t know Hunter College had computer science.  I heard that refrain more than once during my fall visits to high schools. Part of the reason for this is due to Hunter CS&#39;s low profile and small size in spite of its high quality.
Part, though, was also because of some misconceptions about Computer Science programs. I&#39;d hear things like &#34;but they only offer a BA not a BS,&#34;</description>
    </item>
    
    <item>
      <title>It gets easier (or advent of code 2016 day 19)</title>
      <link>https://cestlaz.github.io/posts/it-gets-easier-advent19/</link>
      <pubDate>Mon, 19 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/it-gets-easier-advent19/</guid>
      <description>Today&#39;s Advent of Code problem was a variant on the Josephus problem.
I recalled that there was a formula to figure out the sole survivor but I decide to run a simulation rather than looking it up. I also decided to write it up in C++, well, really C with cout instead of printf.
Part 1 was the traditional problem. Part 2 was a variant where at each iteration, you remove the elf opposite the elf being processed (see the problem description for details).</description>
    </item>
    
    <item>
      <title>Advent of Code 2016 - Check your data</title>
      <link>https://cestlaz.github.io/posts/advent-of-code-2016-check-data/</link>
      <pubDate>Sat, 10 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/advent-of-code-2016-check-data/</guid>
      <description>I&#39;m spending the weekend up in Michigan. Visiting my brother and is family. We&#39;re here to see the UMGASS production of Gilbert and Sullivan&#39;s The Sorcerer. Batya also came up from Cornell to join us so the two families are all togehter for the first time in about 10 years.
This hasn&#39;t left much time for Advent of Code but I did manage to finish yesterday&#39;s challenge this morning.
What took me so long?</description>
    </item>
    
    <item>
      <title>A Teacher looks at Advent of Code 2016 #2</title>
      <link>https://cestlaz.github.io/posts/advent-of-code-2016-2/</link>
      <pubDate>Thu, 08 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/advent-of-code-2016-2/</guid>
      <description>Today we&#39;re looking at Advent of Code 2016 number 2.
To change things up, I thought I&#39;d do a video where I live code a solution.
The solution I present is pretty straightforward - use a 2D array (or technically, an array of strings) to represent the keypad, parse the input, and follow the input instructions to build the code.
One of the things I really like about Advent of Code is that every problem has two parts and depending on how you solved part 1, you may or may not have extra work to do for part 2.</description>
    </item>
    
    <item>
      <title>A Teacher looks at Advent of Code 2016 #1</title>
      <link>https://cestlaz.github.io/posts/advent-of-code-2016-1/</link>
      <pubDate>Tue, 06 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/advent-of-code-2016-1/</guid>
      <description>I recently posted about Advent of Code - a series of programming problems relseased one a day. While they vary in terms of level of difficulty, a number of them make nice problems for introductory to mid level programming classes.
I thought I&#39;d share some of my thoughts on a few of them starting with the first problem from this years competition.
Take a minute to read it over.
At first glance, it might seem to a young programmer that this problem requires a two dimensional array - all about (x,y) coordinates but then there&#39;s a problem - there are no limits on coordinates and we can&#39;t make an unlimited size array.</description>
    </item>
    
    <item>
      <title>Advent of Code 2016</title>
      <link>https://cestlaz.github.io/posts/advent-of-code-2016/</link>
      <pubDate>Sat, 03 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/advent-of-code-2016/</guid>
      <description>Once again, it&#39;s time for Advent of Code - a series of small programming problems released once a day.
I wrote a bit about it last year and you can still find last years problems here.
It&#39;s only day three but so far, all of the problems look really nice for students in APCS-A or any similar intro course. I&#39;m thinking of looking at a couple of the problems this week with my class at Hunter.</description>
    </item>
    
    <item>
      <title>Inverted Index Project</title>
      <link>https://cestlaz.github.io/posts/inverted-index/</link>
      <pubDate>Sat, 26 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/inverted-index/</guid>
      <description>I haven&#39;t spoken much about the class I&#39;ve been teaching this semester. It&#39;s an intro CS course - a programming heavy intro. I decided to use Python with a transition at the end to C++. The transition is to mirror Hunter&#39;s normal first CS course that ends with a C++ intro to prepare the students for next semester&#39;s CS course which is a more intense OOP class using C++ - the language we use in our core courses.</description>
    </item>
    
    <item>
      <title>Cornell Technion Project Studio</title>
      <link>https://cestlaz.github.io/posts/cornell-tech-proj-studio/</link>
      <pubDate>Tue, 01 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/cornell-tech-proj-studio/</guid>
      <description>I spent this evening as a crit advisor for this semesters Project Studio. The class is basically a finishing class for their Masters students. The class forms teams that work with a &#34;company champion&#34; that acts an advisor to build a product.
As a Crit Advisor, I, along with two other people from the tech industry have a give and take with three groups and hopefully we can provide useful feedback.</description>
    </item>
    
    <item>
      <title>Computational Thinkers in Scotland</title>
      <link>https://cestlaz.github.io/posts/scotland/</link>
      <pubDate>Fri, 30 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/scotland/</guid>
      <description>I&#39;m way behind on my Communications of the ACM. I generally only read them when I use my trainer in the mornings and with summer running and outside riding, I&#39;m still on the December 2015 issue.
This morning, I read a viewpoint by Jeremy Scott and Alan Bundy on a program in Scotland. If you&#39;re an ACM member, and if you&#39;re a CS practitioner, student, academic, or teacher you should be, you can read the piece for details.</description>
    </item>
    
    <item>
      <title>Can NYCIST become in leader in CS Education?</title>
      <link>https://cestlaz.github.io/posts/nycist/</link>
      <pubDate>Sat, 24 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/nycist/</guid>
      <description>I only learned about NYCIST last spring. They&#39;re the &#34;New York Consortium for Independent School Technologists.&#34; They had something of an open house that I attended. I heard about them from friend and fellow CS educator Saber Khan.
Last Thursday I spent an afternoon and evening with NYCIST members for a discussion of the state of K12 Computer Science Education in the City.
Most of my work has been with public schools and most of the teachers I know, public school teachers so it was great to make new friends in the Independent school community.</description>
    </item>
    
  </channel>
</rss>